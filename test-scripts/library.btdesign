Application Library {
    basePackage = org.fornax.cartridges.sculptor.test

    Module media {
   
        Service LibraryService {
          findLibraryByName => LibraryRepository.findLibraryByName;
          findMediaByName => MediaRepository.findMediaByName;
          findMediaByCharacter => MediaRepository.findMediaByCharacter;
          findPersonByName => PersonService.findPersonByName;
        }
   
        Entity Library {
          scaffold
          gap
          String name key
          - Set<@PhysicalMedia> media <-> library
          
          Repository LibraryRepository {
            findByQuery;
            @Library findLibraryByName(String name) throws LibraryNotFoundException;
          }
        }
       
        Entity PhysicalMedia {
          scaffold
          String status length="3"
          String location
          - @Library library nullable <-> media
          - Set<@Media> media <-> physicalMedia
        }
        
        Service MediaService {
          findAll => MediaRepository.findAll;
        }
       
        abstract Entity Media {
          gap
          String title !changeable
          - Set<@PhysicalMedia> physicalMedia inverse <-> media
          - Set<@Engagement> engagements cascade="all-delete-orphan" <-> media
          - Set<@MediaCharacter> mediaCharacters <-> existsInMedia
          
          Repository MediaRepository {
            > @MediaCharacterRepository
            int getNumberOfMovies(Long libraryId) => AccessObject;
            List<@Media> findMediaByCharacter(Long libraryId, String characterName);
            findById;
            save;
            findAll;
            findByQuery;
            protected findByKeys(Set<String> keys, String keyPropertyName, Class persistentClass);
            List<@Media> findMediaByName(Long libraryId, String name);
            Map<String, @Movie> findMovieByUrlIMDB(Set<String> keys);
          }
        }
        
        Entity Book extends @Media {
          !auditable
          String isbn key length="20"
        }
        
        Entity Movie extends @Media {
          gap
          !auditable
          String urlIMDB key
          Integer playLength
          - @Genre category nullable
        }
        
        enum Genre {
            ACTION,
            COMEDY,
            DRAMA,
            SCI_FI,
            SHORT
        }
       
        ValueObject Engagement {
          String role
          - @Person person
          - @Media media <-> engagements
        }
        
        Service MediaCharacterService {
          findAll => MediaCharacterRepository.findAll;
        }
        
        ValueObject MediaCharacter {
          String name !changeable
          - Set<@Person> playedBy
          - Set<@Media> existsInMedia <-> mediaCharacters
          
          Repository MediaCharacterRepository {
            findByQuery;
            findAll;
          }
        }
    }
 
Module person {
        Service PersonService {
          findPersonByName => PersonRepository.findPersonByName;
        }
     
        Entity Person {
          gap
          scaffold
          Date birthDate past
          - @Gender sex !changeable
          - @Ssn ssn key
          - @PersonName name
        
          Repository PersonRepository {
              List<@Person> findPersonByName(String name) => AccessObject;
              save;
              save(Collection<@Person> entities);
              findByQuery;
              findByQuery(PagingParameter pagingParameter);
              findByExample;
              findByKeys;
              findByKey hint="cache";
              findByCriteria(PagingParameter pagingParameter);
              findAll(PagingParameter pagingParameter) hint="orderBy=name.last";
          }
        }
        
        BasicType Ssn {
          String number key length="20"
          - @Country country key
        }
    
        BasicType PersonName {
          String first
          String last
        }
        
        enum Gender {
            FEMALE("F"), 
            MALE("M")
        }
        
        enum Country {
            String alpha2 key 
            String alpha3
            int numeric
            SWEDEN("SE", "SWE", "752"),
            NORWAY("NO", "NOR", "578"),
            DENMARK("DK", "DNK", "208"),
            US("US", "USA", "840")
        }
        
    }
 
}


