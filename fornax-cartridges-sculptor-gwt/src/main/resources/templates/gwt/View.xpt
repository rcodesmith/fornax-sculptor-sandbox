«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»
«EXTENSION extensions::gwt::sofeauihelpers»

«DEFINE view(Module module) FOR GuiModule»

	«EXPAND viewBaseInterface FOREACH this.views»
	«EXPAND viewInterface FOREACH this.views»
	«EXPAND viewBase FOREACH this.views»
	«EXPAND viewImpl FOREACH this.views»

	«EXPAND templates::gwt::Activity::activityBase FOREACH this.views»
	«EXPAND templates::gwt::Activity::activityImpl FOREACH this.views»
	
	«EXPAND templates::gwt::ViewTemplate::viewCompositeBaseTemplate FOREACH this.views»
	«EXPAND templates::gwt::Place::placeBase FOREACH this.views»
	
	«EXPAND templates::gwt::Presenter::presenterBaseInterface FOREACH this.views»
	
	«EXPAND templates::gwt::Presenter::presenterInterface FOREACH this.views»
	
	
«ENDDEFINE»


«REM»View interface«ENDREM»
«DEFINE viewInterface FOR View»
«FILE javaFileName(fqnGwtViewInterface(this)) TO_SRC»
«EXPAND viewInterfaceBody FOR this»
«ENDFILE»
«ENDDEFINE»

«REM»View interface - for unit tests«ENDREM»
«DEFINE viewInterfaceForUnitTest FOR View»
«FILE javaFileName(fqnGwtViewInterface(this))»
«EXPAND viewInterfaceBody FOR this»
«ENDFILE»
«ENDDEFINE»

«DEFINE viewInterfaceBody FOR View»
«javaHeader()»

package «gwtWidgetsPackage()»;

«IF formatJavaDoc() == "" -»
/**
 * Generated interface for the View «name».
 */
«ELSE -»
«formatJavaDoc()»
«ENDIF -»
	public interface «gwtViewInterface()» extends «fqnGwtViewBaseInterface()» {
	
	}
«ENDDEFINE»


«DEFINE viewBaseInterface FOR View»

«FILE javaFileName(fqnGwtViewBaseInterface())»
«javaHeader()»

package «gwtWidgetsPackage()»;

«IF formatJavaDoc() == "" -»
/**
 * Generated base interface for the View «name».
 */
«ELSE -»
«formatJavaDoc()»
«ENDIF -»
	public interface «gwtViewBaseInterface()» extends com.google.gwt.user.client.ui.IsWidget, org.fornax.cartridges.sculptor.framework.gwt.client.HasDirtyFlag {
	
		/**
     	 * Initialize this view with the given presenter.
         */
		public void initView(«fqnPresenterBaseInterface()» presenter);
		
		«EXPAND widgetInterfaceDeclarations FOREACH this.allWidgets()»
		
	}

«ENDFILE»
«ENDDEFINE»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget interface declarations
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»Declarations that must be added to the view interface for each widget«ENDREM»
«DEFINE widgetInterfaceDeclarations FOR Widget»
	// No interface declarations for «name» widget - fill in implementation?
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR TableWidget»
	«IF this.for != null»
		public com.google.gwt.view.client.HasData<«fqnTableForClass()»> get«name.toFirstUpper()»HasData();
	«ENDIF»
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR ButtonWidget»
	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers();
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InputTextWidget»
	/**
	 * Text accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InformationalTextWidget»
	/**
	 * Text accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();

«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InputDateWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR AutocompleteWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
	
	/**
	 * Value accessor for «name»
	 */
	public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection();

	public com.google.gwt.event.logical.shared.HasSelectionHandlers<com.google.gwt.user.client.ui.SuggestOracle.Suggestion> get«name.toFirstUpper()»HasSelectionHandlers();
		
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR LinkWidget»
    «formatJavaDoc()»

	public com.google.gwt.event.dom.client.HasClickHandlers «widgetClickHandlersExpr()»;
«ENDDEFINE»


«DEFINE widgetInterfaceDeclarations FOR PanelWidget»
	public com.google.gwt.user.client.ui.HasWidgets.ForIsWidget «widgetForIsWidgetExpr()»;
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR ListBoxWidget»
		/**
		 * Value accessor for «name»
		 */
		public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection();
		
	    public com.google.gwt.event.logical.shared.HasValueChangeHandlers<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasValueChangeHandlers();


«ENDDEFINE»

«REM»Placeholder for any custom widget interface declarations.  If you have any, override this and invoke your template
based on CustomWidget.widgetType«ENDREM»
«DEFINE widgetInterfaceDeclarations FOR CustomWidget»
«ENDDEFINE»







«REM»View base class«ENDREM»
«DEFINE viewBase FOR View»
«FILE javaFileName(fqnGwtViewWidgetBaseClass())»

package «gwtWidgetsPackage()»;

public abstract class «gwtViewWidgetBaseClass()» extends «getViewRootBaseClass()»
	implements «fqnGwtViewBaseInterface()» {

	«loggerDeclaration(gwtViewWidgetBaseClass())»

    interface «gwtViewWidgetBaseUiBinderClass()» extends com.google.gwt.uibinder.client.UiBinder<com.google.gwt.user.client.ui.Widget, «fqnGwtViewWidgetBaseClass()»> {}

    private static «gwtViewWidgetBaseClass()»UiBinder uiBinder = com.google.gwt.core.client.GWT
    	.create(«gwtViewWidgetBaseClass()»UiBinder.class);

	public «gwtViewWidgetBaseClass()»() {
		initWidget(getWidget());
		
		«EXPAND widgetInitCalls FOREACH allWidgets()»
	}
	
    protected com.google.gwt.user.client.ui.Widget getWidget() {
    	return uiBinder.createAndBindUi(this);
    }
    
    «fqnPresenterBaseInterface()» presenter;
    
    /**
     * Initialize this view with the given presenter.
     */
    public void initView(«fqnPresenterBaseInterface()» presenter) {
    	this.presenter = presenter;
    }
    
    «EXPAND widgetDeclaration FOREACH allWidgets()»
    
    «EXPAND widgetMethods FOREACH allWidgets()»
}

«ENDFILE»

«ENDDEFINE»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget init calls
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»Calls to widget initialization functions on construction«ENDREM»
«DEFINE widgetInitCalls FOR Widget»
«ENDDEFINE»

«DEFINE widgetInitCalls FOR ButtonWidget»
	init«name.toFirstUpper()»();
«ENDDEFINE»

«DEFINE widgetInitCalls FOR LinkWidget»
	init«name.toFirstUpper()»();
«ENDDEFINE»

«DEFINE widgetInitCalls FOR TableWidget»
	// Initialize «name» table (columns, etc)
	init«name.toFirstUpper()»Table();
«ENDDEFINE»



«REM»Widget misc. methods«ENDREM»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget methods - any methods, including init methods that may be needed
///////////////////////////////////////////////////////////////////////////////////////////////////////

«DEFINE widgetMethods FOR TableWidget»
	«IF this.for != null»

    public void replace«name.toFirstUpper()»Data(java.util.Collection<«fqnTableForClass()»> newData) {
        java.util.List<«fqnTableForClass()»> newDataList = new java.util.ArrayList<«fqnTableForClass()»>(newData);
        replace«name.toFirstUpper()»Data(newDataList);
    }

    public void replace«name.toFirstUpper()»Data(java.util.List<«fqnTableForClass()»> newDataList) {
    	«name»ListDataProvider.getList().clear();
//        «name».setRowCount(newDataList.size());
//        «name».setRowData(newDataList);
    }

    public void clear«name.toFirstUpper()»Data() {
        replace«name.toFirstUpper()»Data(new java.util.ArrayList<«fqnTableForClass()»>());
    }

	/**
	  * Initialize table columns
	  * This method may be overridden by implementation class to do any specialized behavior.
	  */
    protected void init«name.toFirstUpper()»Table() {
    
    	«name»ListDataProvider.addDataDisplay(«name»);
    	
    «FOREACH columns AS col»
    «name».addColumn(init«name.toFirstUpper()»Table«col.name.toFirstUpper()»Column());
    «ENDFOREACH»
    }
	«ENDIF»
    
    «FOREACH columns AS col»
	    «IF col.columnType == "Text"»
		    «EXPAND tableColumnInitText(this) FOR col »
		«ELSEIF col.columnType == "Button"»
		    «EXPAND tableColumnInitButton(this) FOR col »
		«ELSEIF col.columnType == "Date"»
		    «EXPAND tableColumnInitDate(this) FOR col »
		«ELSEIF col.columnType == "Custom"»
		«ELSEIF col.columnType == "Link"»
		    «EXPAND tableColumnInitLink(this) FOR col »			
	    «ENDIF»
	    
    «ENDFOREACH»
    

	«IF this.for != null»
	public com.google.gwt.view.client.HasData<«fqnTableForClass()»> get«name.toFirstUpper()»HasData() {
		return «name»;
	}
	«ENDIF»
	
	

«ENDDEFINE»


«DEFINE tableColumnInitComment(TableWidget tableWidget) FOR TableColumn»
    /**
     * Initialization method for «name» column of «tableWidget.name» table.
     * Override this in derived class to specialize the initialization of this column if needed.
     */
«ENDDEFINE»


«DEFINE tableColumnInitText(TableWidget tableWidget) FOR TableColumn»

	com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> «this.tableColumnAttrName()»;
	
	«EXPAND tableColumnInitComment(tableWidget) FOR this»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {
		«this.tableColumnAttrName()» = new com.google.gwt.user.cellview.client.TextColumn<«tableWidget.for.fqnGwtDto()»>() {
                        @Override
                        public String getValue(«tableWidget.for.fqnGwtDto()» object) {
                        	return get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(object);
                        }
        };
        
        return «this.tableColumnAttrName()»;
	}
	    
		
	/**
	 * Method to return the value that should be displayed in the «name» column of «tableWidget.name» table.
	 */
	protected «this.hasSourceRef() ? "" : "abstract "»String get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(«tableWidget.for.fqnGwtDto()» object)
	
		«IF this.hasSourceRef()»
		{
	    	return «this.getSourceRefExpression("object")»;
	    }
	    «ELSE»
	    ;
		«ENDIF»
«ENDDEFINE»


«DEFINE tableColumnInitDate(TableWidget tableWidget) FOR TableColumn»

	com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», java.util.Date> «this.tableColumnAttrName()»;
	
	«EXPAND tableColumnInitComment(tableWidget) FOR this»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», java.util.Date> init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {
	
	com.google.gwt.cell.client.DateCell dateCell = new com.google.gwt.cell.client.DateCell();
	
		«this.tableColumnAttrName()» = new com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», java.util.Date>(dateCell) {
                        @Override
                        public Date getValue(«tableWidget.for.fqnGwtDto()» object) {
                        	return get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(object);
                        }
        };
        
        return «this.tableColumnAttrName()»;
	}
	
	/**
	 * Method to return the value that should be displayed in the «name» column of «tableWidget.name» table.
	 */
	protected «this.hasSourceRef() ? "" : "abstract "»java.util.Date get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(«tableWidget.for.fqnGwtDto()» object)
	
		«IF this.hasSourceRef()»
		{
	    	return «this.getSourceRefExpression("object")»;
	    }
	    «ELSE»
	    ;
		«ENDIF»
«ENDDEFINE»


«DEFINE tableColumnInitButton(TableWidget tableWidget) FOR TableColumn»
	com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String>  «this.tableColumnAttrName()»;

	«EXPAND tableColumnInitComment(tableWidget) FOR this»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {

		com.google.gwt.cell.client.ButtonCell cellB = new com.google.gwt.cell.client.ButtonCell();
		
		«this.tableColumnAttrName()» = new Column<«tableWidget.for.fqnGwtDto()», String>(cellB) {

			@Override
			public String getValue(«tableWidget.for.fqnGwtDto()» object) {
            	return get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(object);
			}
		};
		«this.tableColumnAttrName()».setFieldUpdater(new com.google.gwt.cell.client.FieldUpdater<«tableWidget.for.fqnGwtDto()», String>() {

			@Override
			public void update(int index, «tableWidget.for.fqnGwtDto()» object, String value) {
				LOG.info("Click on " + object);
				
				onClick«tableWidget.name.toFirstUpper()»«this.name.toFirstUpper()»Col(object, value);
			}
			
		});
		return «this.tableColumnAttrName()»;
    }
    
   /**
	 * On-click callback handler for «name» column within «tableWidget.name» table.
	 */
    protected abstract void onClick«tableWidget.name.toFirstUpper()»«this.name.toFirstUpper()»Col(«tableWidget.for.fqnGwtDto()» object, String value);

	/**
	 * Method to return the value that should be displayed in the «name» column of «tableWidget.name» table.
	 */
	protected «this.hasSourceRef() ? "" : "abstract "»String get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(«tableWidget.for.fqnGwtDto()» object)
	
		«IF this.hasSourceRef()»
		{
	    	return «this.getSourceRefExpression("object")»;
	    }
	    «ELSE»
	    ;
		«ENDIF»

«ENDDEFINE»

«DEFINE tableColumnInitLink(TableWidget tableWidget) FOR TableColumn»
	
	com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> «this.tableColumnAttrName()»;
	
	«EXPAND tableColumnInitComment(tableWidget) FOR this»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {

		com.google.gwt.cell.client.ClickableTextCell cellB = new com.google.gwt.cell.client.ClickableTextCell();
		
		«this.tableColumnAttrName()» = new Column<«tableWidget.for.fqnGwtDto()», String>(cellB) {

			@Override
			public String getValue(«tableWidget.for.fqnGwtDto()» object) {
				return "«this.label»";
			}

		};
		«this.tableColumnAttrName()».setFieldUpdater(new com.google.gwt.cell.client.FieldUpdater<«tableWidget.for.fqnGwtDto()», String>() {

			@Override
			public void update(int index, «tableWidget.for.fqnGwtDto()» object, String value) {
				LOG.info("Click on " + object);
				
				onClick«tableWidget.name.toFirstUpper()»«this.name.toFirstUpper()»Col(object, value);
			}
			
		});
		return «this.tableColumnAttrName()»;
    }
    
   /**
	 * On-click method for «name» column within «tableWidget.name» table.
	 * By default delegates to presenter.
	 */
    protected void onClick«tableWidget.name.toFirstUpper()»«this.name.toFirstUpper()»Col(«tableWidget.for.fqnGwtDto()» object, String value) {
    	presenter.onClick«tableWidget.name.toFirstUpper()»«this.name.toFirstUpper()»Col(object, value);
    }

«ENDDEFINE»

«DEFINE widgetMethods FOR ButtonWidget»
	public void init«name.toFirstUpper()»() {
		«name».addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
			public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
				presenter.onClick«name.toFirstUpper()»();
			}
		});
	}

	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR InputTextWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR InformationalTextWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR InputDateWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR AutocompleteWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
		
	/**
	 * Value accessor for «name»
	 */
	public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection() {
		return «name»;
	}

	
	public com.google.gwt.event.logical.shared.HasSelectionHandlers<com.google.gwt.user.client.ui.SuggestOracle.Suggestion> get«name.toFirstUpper()»HasSelectionHandlers() {
		return «name»;
	}
	
	
«ENDDEFINE»


«DEFINE widgetMethods FOR LinkWidget»
    «formatJavaDoc()»
	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers() {
		return «name»;
	}
	
	«formatJavaDoc()»
	public void init«name.toFirstUpper()»() {
		«name».addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
			public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
				presenter.onClick«name.toFirstUpper()»();
			}
		});
	}

«ENDDEFINE»

«DEFINE widgetMethods FOR PanelWidget»
	public com.google.gwt.user.client.ui.HasWidgets.ForIsWidget «widgetForIsWidgetExpr()» {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR ListBoxWidget»
		/**
		 * Value accessor for «name»
		 */
		public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection() {
			return «name»;
		}
		
	    public com.google.gwt.event.logical.shared.HasValueChangeHandlers<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasValueChangeHandlers() {
	    	return «name»;
	    }


«ENDDEFINE»

«DEFINE widgetMethods FOR CustomWidget»
«ENDDEFINE»


«DEFINE widgetMethods FOR Widget»
	// No widget methods for widget «name» - need to implement?
«ENDDEFINE»



///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget object declarations - most can just use widgetDeclaration template below
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»
	Widget attribute implementation delarations
«ENDREM»

«DEFINE widgetDeclaration FOR Widget»
    @com.google.gwt.uibinder.client.UiField
    «resolveGwtWidgetType()» «name»;
    
«ENDDEFINE»


«DEFINE widgetDeclaration FOR TableWidget»

    // «name» cell table
    «debugTrace("widgetDeclaration() for table: " + this.name + " forModule = " + this.for.guiModule.for)»
    @com.google.gwt.uibinder.client.UiField(provided = true)
    «resolveGwtWidgetType()»<«fqnTableForClass()»> «name» = new «resolveGwtWidgetType()»<«fqnTableForClass()»>();
    final com.google.gwt.view.client.SingleSelectionModel<«fqnTableForClass()»> «name»SelectionModel =
        new com.google.gwt.view.client.SingleSelectionModel<«fqnTableForClass()»>();

	com.google.gwt.view.client.ListDataProvider<«fqnTableForClass()»> «name»ListDataProvider = new com.google.gwt.view.client.ListDataProvider<«fqnTableForClass()»>();

«ENDDEFINE»



«REM»View impl class«ENDREM»
«DEFINE viewImpl FOR View»
«FILE javaFileName(fqnGwtViewWidgetImplClass(this)) TO_SRC»
«EXPAND viewImplBody FOR this»
«ENDFILE»
«ENDDEFINE»

«REM»View impl class - for unit tests«ENDREM»
«DEFINE viewImplForUnitTest FOR View»
«FILE javaFileName(fqnGwtViewWidgetImplClass(this))»
«EXPAND viewImplBody FOR this»
«ENDFILE»
«ENDDEFINE»

«DEFINE viewImplBody FOR View»
package «gwtWidgetsPackage()»;

public class «gwtViewWidgetImplClass()» extends  «fqnGwtViewWidgetBaseClass()» implements «fqnGwtViewInterface()» {

	«loggerDeclaration(gwtViewWidgetImplClass())»

	public «gwtViewWidgetImplClass()»() {
		super();
	}
	
	// Uncomment the following if you need to override the template
	/*
    interface «gwtViewWidgetImplClass()»UiBinder extends com.google.gwt.uibinder.client.UiBinder<com.google.gwt.user.client.ui.Widget, «fqnGwtViewWidgetImplClass()»> {}

    private static «gwtViewWidgetImplClass()»UiBinder uiBinder = com.google.gwt.core.client.GWT
    	.create(«gwtViewWidgetImplClass()»UiBinder.class);

    protected com.google.gwt.user.client.ui.Widget getWidget() {
    	return uiBinder.createAndBindUi(this);
    }

	*/
}
«ENDDEFINE»
