«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»
«EXTENSION extensions::gwt::sofeauihelpers»

«DEFINE view(Module module) FOR GuiModule»

	«EXPAND viewBaseInterface FOREACH this.views»
	«EXPAND viewInterface FOREACH this.views»
	«EXPAND viewBase FOREACH this.views»
	«EXPAND viewImpl FOREACH this.views»

	«EXPAND templates::gwt::Activity::activityBase FOREACH this.views»
	«EXPAND templates::gwt::Activity::activityImpl FOREACH this.views»
	
	«EXPAND templates::gwt::ViewTemplate::viewCompositeBaseTemplate FOREACH this.views»
	«EXPAND templates::gwt::Place::placeBase FOREACH this.views»
	
	«EXPAND templates::gwt::Presenter::presenterBaseInterface FOREACH this.views»
	
	«EXPAND templates::gwt::Presenter::presenterInterface FOREACH this.views»
	
	
«ENDDEFINE»


«REM»View interface«ENDREM»
«DEFINE viewInterface FOR View»
	«FILE javaFileName(fqnGwtViewInterface(this)) TO_SRC»
		«EXPAND viewInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«REM»View interface - for unit tests«ENDREM»
«DEFINE viewInterfaceForUnitTest FOR View»
	«FILE javaFileName(fqnGwtViewInterface(this))»
		«EXPAND viewInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE viewInterfaceBody FOR View»
«javaHeader()»

package «gwtWidgetsPackage()»;

«IF formatJavaDoc() == "" -»
/**
 * Generated interface for the View «name».
 */
«ELSE -»
«formatJavaDoc()»
«ENDIF -»
	public interface «gwtViewInterface()» extends «fqnGwtViewBaseInterface()» {
	
	}
«ENDDEFINE»


«DEFINE viewBaseInterfaceBody FOR View»
«javaHeader()»

package «gwtBaseWidgetsPackage()»;

«IF formatJavaDoc() == "" -»
/**
 * Generated base interface for the View «name».
 */
«ELSE -»
«formatJavaDoc()»
«ENDIF -»
	public interface «gwtViewBaseInterface()» extends com.google.gwt.user.client.ui.IsWidget, org.fornax.cartridges.sculptor.framework.gwt.client.PresentsMessage {
	
		/**
     	 * Initialize this view with the given presenter.
         */
		public void initView(«fqnPresenterBaseInterface()» presenter);
		
	    /**
	     * Set the presenter to null
	     */
	    public void unsetPresenter();

		/**
		 * Clear the contents of the entire view - clear all widgets
		 */
		public void clear();
		
		«EXPAND widgetInterfaceDeclarations FOREACH this.allWidgets()»

		«EXPAND widgetClearMethodDeclaration FOREACH this.allWidgets()»
		
	}

«ENDDEFINE»

«DEFINE viewBaseInterface FOR View»
	«FILE javaFileName(fqnGwtViewBaseInterface()) TO_SRC»
		«EXPAND viewBaseInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE viewBaseInterfaceForUnitTest FOR View»
	«FILE javaFileName(fqnGwtViewBaseInterface())»
		«EXPAND viewBaseInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE widgetClearMethodDeclaration FOR Widget»
	
	/**
	 * Clear contents of «name» widget
	 */
	public void «clearMethodName()»();
	
«ENDDEFINE»


///////////////////////////////////////////////////////////////////////////////////////////////////////
// General Widget-related templates
///////////////////////////////////////////////////////////////////////////////////////////////////////

«DEFINE widgetEventHandlers FOR Widget»
	«EXPAND widgetEventHandler(this) FOREACH this.behaviorBindings»
«ENDDEFINE»


«REM»Default implementation - does nothing.  Should be implemented for any widget that has something
to clear.«ENDREM»
«DEFINE widgetClearMethodImplementation FOR Widget»
	/**
	 * Clear contents of «name» widget
	 */
	public void «clearMethodName()»() {
	}
	
«ENDDEFINE»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// ButtonWidget-related templates
///////////////////////////////////////////////////////////////////////////////////////////////////////

«DEFINE widgetEventHandler(ButtonWidget widget) FOR OnClickBinding»
	/**
	 * Event handler for «widget.name» widget, «this.bindingTypeName» event binding
	 */
	@com.google.gwt.uibinder.client.UiHandler("«widget.name»")
	public void on«widget.name.toFirstUpper()»«this.bindingTypeName.toFirstUpper()»(com.google.gwt.event.dom.client.ClickEvent event) {
			presenter.«widget.presenterCallbackMethodName(this)»(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.EventFactory.create(event));
	}
«ENDDEFINE»


«DEFINE widgetInterfaceDeclarations FOR ButtonWidget»

	/**
	 * Get the HasClickHandlers interface for the «name.toFirstUpper()» button
	 */
	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers();
	
	/**
	 * Enable/disable the «name.toFirstUpper()» button
	 */
	public void set«name.toFirstUpper()»Enabled(boolean enabled);

	/**
	 * Show/hide the «name.toFirstUpper()» button
	 */
	public void set«name.toFirstUpper()»Visible(boolean visible);
	
«ENDDEFINE»


«DEFINE widgetInitCalls FOR ButtonWidget»
	init«name.toFirstUpper()»();
«ENDDEFINE»

«DEFINE widgetMethods FOR ButtonWidget»
	public void init«name.toFirstUpper()»() {
	}

	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers() {
		return «name»;
	}
	
	/**
	 * Enable/disable the «name.toFirstUpper()» button
	 */
	public void set«name.toFirstUpper()»Enabled(boolean enabled) {
		«name».setEnabled(enabled);
	}
	
	/**
	 * Show/hide the «name.toFirstUpper()» button
	 */
	public void set«name.toFirstUpper()»Visible(boolean visible) {
		«name».setVisible(visible);
	}

«ENDDEFINE»




///////////////////////////////////////////////////////////////////////////////////////////////////////
// LinkWidget-related templates
///////////////////////////////////////////////////////////////////////////////////////////////////////

«DEFINE widgetEventHandler(LinkWidget widget) FOR OnClickBinding»
	/**
	 * Event handler for «widget.name» widget, «this.bindingTypeName» event binding
	 */
	@com.google.gwt.uibinder.client.UiHandler("«widget.name»")
	public void on«widget.name.toFirstUpper()»«this.bindingTypeName.toFirstUpper()»(com.google.gwt.event.dom.client.ClickEvent event) {
			presenter.«widget.presenterCallbackMethodName(this)»(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.EventFactory.create(event));
	}
«ENDDEFINE»


«DEFINE widgetInterfaceDeclarations FOR LinkWidget»
    «formatJavaDoc()»

	public com.google.gwt.event.dom.client.HasClickHandlers «widgetClickHandlersExpr()»;
«ENDDEFINE»

«DEFINE widgetInitCalls FOR LinkWidget»
	init«name.toFirstUpper()»();
«ENDDEFINE»

«DEFINE widgetMethods FOR LinkWidget»
    «formatJavaDoc()»
	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers() {
		return «name»;
	}
	
	«formatJavaDoc()»
	public void init«name.toFirstUpper()»() {
	}

«ENDDEFINE»





///////////////////////////////////////////////////////////////////////////////////////////////////////
// ListBoxWidget -related templates
///////////////////////////////////////////////////////////////////////////////////////////////////////


«DEFINE widgetClearMethodImplementation FOR ListBoxWidget»
	
	/**
	 * Clear contents of «name» widget
	 */
	public void «clearMethodName()»() {
		«name».clear();
	}
«ENDDEFINE»
		


«DEFINE widgetEventHandler(ListBoxWidget widget) FOR OnSelectItemBinding»
	/**
	 * Event handler for «widget.name» widget, «this.bindingTypeName» event binding
	 */
	@com.google.gwt.uibinder.client.UiHandler("«widget.name»")
	public void on«widget.name.toFirstUpper()»«this.bindingTypeName.toFirstUpper()»(com.google.gwt.event.dom.client.ChangeEvent event) {
			presenter.«widget.presenterCallbackMethodName(this)»(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.EventFactory.create(event));
	}
«ENDDEFINE»


///////////////////////////////////////////////////////////////////////////////////////////////////////
// AutocompleteWidget-related templates
///////////////////////////////////////////////////////////////////////////////////////////////////////
«DEFINE widgetEventHandler(AutocompleteWidget widget) FOR OnSelectItemBinding»
	/**
	 * Event handler for «widget.name» widget, «this.bindingTypeName» event binding
	 */
	@com.google.gwt.uibinder.client.UiHandler("«widget.name»")
	public void on«widget.name.toFirstUpper()»«this.bindingTypeName.toFirstUpper()»(com.google.gwt.event.logical.shared.SelectionEvent<com.google.gwt.user.client.ui.SuggestOracle.Suggestion> event) {
			presenter.«widget.presenterCallbackMethodName(this)»(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.EventFactory.create(event));
	}
«ENDDEFINE»

«DEFINE widgetClearMethodImplementation FOR AutocompleteWidget»
	
	/**
	 * Clear contents of «name» widget
	 */
	public void «clearMethodName()»() {
		«name».clear();
	}
	
«ENDDEFINE»





///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget interface declarations
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»Declarations that must be added to the view interface for each widget«ENDREM»
«DEFINE widgetInterfaceDeclarations FOR Widget»
	// No interface declarations for «name» widget - fill in implementation?
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR TableWidget»
	«IF this.for != null»
		/**
		 * HasData accessor for «name» table
		 */
		public com.google.gwt.view.client.HasData<«fqnTableForClass()»> get«name.toFirstUpper()»HasData();

    	/**
    	 * Clear all of the data in the «name» table
    	 * See GWT ListDataProvider
    	 */
	    public void clear«name.toFirstUpper()»Data();
		
    	«IF usesAsyncDataProvider()»
			/**
			  * Inform the table of the total number of items that are available
	   	 	  * See GWT AsyncDataProvider
	    	  */
			public void update«name.toFirstUpper()»RowCount(int count, boolean exact);
		
			/**
			  * Inform the table of the new data
	    	  * See GWT AsyncDataProvider
			  */
			public void update«name.toFirstUpper()»RowData(int start, java.util.List<«fqnTableForClass()»> values);
		«ELSE»    	
    		/**
    		 * Replace the data in the «name» table with the given collection.
    		 * See GWT ListDataProvider
    		 */
		    public void replace«name.toFirstUpper()»Data(java.util.Collection<«fqnTableForClass()»> newData);

    		/**
    		 * Replace the data in the «name» table with the given list
    		 * See GWT ListDataProvider
    		 */
		    public void replace«name.toFirstUpper()»Data(java.util.List<«fqnTableForClass()»> newDataList);

		«ENDIF»
		
		
	 	«EXPAND ViewTableColumn::tableColumnInterfaceDeclarations(this) FOREACH this.columns»
	«ENDIF»
«ENDDEFINE»







«DEFINE widgetClearMethodImplementation FOR InputTextWidget»
	/**
	 * Clear contents of «name» widget
	 */
	public void «clearMethodName()»() {
		«name».setText("");
	}
	
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InputTextWidget»
	/**
	 * Text accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InformationalTextWidget»
	/**
	 * Text accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();

«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InputDateWidget»
//	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
	public com.google.gwt.user.client.ui.HasValue<java.util.Date> get«name.toFirstUpper()»HasDate();

«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR AutocompleteWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
	
	/**
	 * Value accessor for «name»
	 */
	public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection();

	/**
	 * HasSelectionHandlers accessor for «name»
	 */
	public com.google.gwt.event.logical.shared.HasSelectionHandlers<com.google.gwt.user.client.ui.SuggestOracle.Suggestion> get«name.toFirstUpper()»HasSelectionHandlers();
	
	/**
	 * HasValue accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasValue<String> get«name.toFirstUpper()»HasValue();
	
«ENDDEFINE»



«DEFINE widgetInterfaceDeclarations FOR PanelWidget»
	public com.google.gwt.user.client.ui.HasWidgets.ForIsWidget «widgetForIsWidgetExpr()»;
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR ListBoxWidget»
		/**
		 * Value accessor for «name»
		 */
		public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection();
		
	    public com.google.gwt.event.logical.shared.HasValueChangeHandlers<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasValueChangeHandlers();

    	public org.fornax.cartridges.sculptor.framework.gwt.client.HasSelectableItems<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasSelectableItems();
    

«ENDDEFINE»


«REM»Placeholder for any custom widget interface declarations.  If you have any, override this and invoke your template
based on CustomWidget.widgetType«ENDREM»
«DEFINE widgetInterfaceDeclarations FOR CustomWidget»
«ENDDEFINE»





«DEFINE viewBaseBody FOR View»
package «gwtBaseWidgetsPackage()»;

public abstract class «gwtViewWidgetBaseClass()» extends «getViewRootBaseClass()»
	implements «fqnGwtViewBaseInterface()» {

	«loggerDeclaration(gwtViewWidgetBaseClass())»

    interface «gwtViewWidgetBaseUiBinderClass()» extends com.google.gwt.uibinder.client.UiBinder<com.google.gwt.user.client.ui.Widget, «fqnGwtViewWidgetBaseClass()»> {}

    private static «gwtViewWidgetBaseClass()»UiBinder uiBinder = com.google.gwt.core.client.GWT
    	.create(«gwtViewWidgetBaseClass()»UiBinder.class);

	/**
	  * Default constructor for view base class.
	  * This constructor doesn't do anything interesting (on purpose).  See the initView() method to see where everything is
	  * constructed and initialized.  Everything is done there rather than the constructor so initialization of different widgets may be
	  * overridden in the implementation class if needed.
	  */
	public «gwtViewWidgetBaseClass()»() {

		«LET allWidgets().select(w | w.isProvided()) AS providedWidgets»
			«IF providedWidgets.size > 0»
				// Initialize widgets that are provided first since they need to be created before UiBinder is bound
				«EXPAND widgetInitCalls FOREACH providedWidgets»
			«ENDIF»	
		«ENDLET»
		
		// Create and bind UiBinder and initialize main widget
		initWidget(getWidget());
		
		
		«LET allWidgets().select(w | w.isProvided() == false) AS providedWidgets»
			«IF providedWidgets.size > 0»
				// Do post-creation initialization of widgets that are created by UiBinder (not provided)
				«EXPAND widgetInitCalls FOREACH providedWidgets»
			«ENDIF»	
		«ENDLET»
		
	}
	
    protected com.google.gwt.user.client.ui.Widget getWidget() {
    	return uiBinder.createAndBindUi(this);
    }
    
    // Presenter that should handle UI events
    protected «fqnPresenterBaseInterface()» presenter;
    
    /**
     * Set the presenter to null
     */
    public void unsetPresenter() {
    	presenter = null;
    }
    
    «EXPAND initView FOR this»
    
    
    «EXPAND widgetDeclaration FOREACH allWidgets()»
    
    «EXPAND widgetMethods FOREACH allWidgets()»
    
    «EXPAND viewClearImpl FOR this»
	
	«EXPAND widgetClearMethodImplementation FOREACH this.allWidgets()»

	«IF usePresenterCallbacks()»
		«EXPAND widgetEventHandlers FOREACH allWidgets()»
	«ENDIF»
}
«ENDDEFINE»

«DEFINE viewClearImpl FOR View»
	/**
	 * Clear the contents of the entire view - clear all widgets
	 */
	public void clear() {
    	LOG.info("clear()");
		«FOREACH widgets AS w»
			«w.clearMethodName()»();
		«ENDFOREACH»
	}
«ENDDEFINE»


«DEFINE initView FOR View»
    /**
     * Initialize this view with the given presenter, constructing any widgets and other objects as needed.
     */
    public void initView(«fqnPresenterBaseInterface()» presenter) {
    	LOG.info("initView()");
    	this.presenter = presenter;
    	
    }
    
«ENDDEFINE»

«REM»View base class«ENDREM»
«DEFINE viewBase FOR View»
	«FILE javaFileName(fqnGwtViewWidgetBaseClass()) TO_SRC»
		«EXPAND viewBaseBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE viewBaseForUnitTest FOR View»
	«FILE javaFileName(fqnGwtViewWidgetBaseClass())»
		«EXPAND viewBaseBody FOR this»
	«ENDFILE»
«ENDDEFINE»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget init calls
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»Calls to widget initialization functions on construction«ENDREM»
«DEFINE widgetInitCalls FOR Widget»
«ENDDEFINE»

«DEFINE widgetInitCalls FOR TableWidget»
	// Initialize «name» table (columns, etc)
	init«name.toFirstUpper()»Table();
«ENDDEFINE»

«DEFINE widgetInitCalls FOR ListBoxWidget»
	init«name.toFirstUpper()»();
«ENDDEFINE»



«REM»Widget misc. methods«ENDREM»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget methods - any methods, including init methods that may be needed
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»TODO: Should be able to replace other clearXData method that is called with this«ENDREM»
«DEFINE widgetClearMethodImplementation FOR TableWidget»
	/**
	 * Clear contents of «name» widget
	 */
	public void «clearMethodName()»() {
		clear«name.toFirstUpper()»Data();
	}
«ENDDEFINE»



«DEFINE widgetMethods FOR TableWidget»
	«IF this.for != null»

    «IF usesAsyncDataProvider()»
		/** {@inheritDoc}
		  */
		public void update«name.toFirstUpper()»RowCount(int count, boolean exact) {
			«name»DataProvider.updateRowCount(count, exact);
		}
		
		/** {@inheritDoc}
		  */
		public void update«name.toFirstUpper()»RowData(int start, java.util.List<«fqnTableForClass()»> values) {
			«name»DataProvider.updateRowData(start, values);
		}
		
	    /** {@inheritDoc}
	 	 */
    	public void clear«name.toFirstUpper()»Data() {
        	«name».setRowCount(0);
    	}

	«ELSE»
	    /** {@inheritDoc}
	 	 */
    	public void replace«name.toFirstUpper()»Data(java.util.Collection<«fqnTableForClass()»> newData) {
       		java.util.List<«fqnTableForClass()»> newDataList = new java.util.ArrayList<«fqnTableForClass()»>(newData);
        	replace«name.toFirstUpper()»Data(newDataList);
    	}
    
	    /** {@inheritDoc}
	 	 */
	    public void replace«name.toFirstUpper()»Data(java.util.List<«fqnTableForClass()»> newDataList) {
        	«name».setRowCount(0);
   	 		«name»DataProvider.getList().clear();
        	«name»DataProvider.getList().addAll(0, newDataList);
        	«name»DataProvider.refresh();
		}

	    /** {@inheritDoc}
	 	 */
    	public void clear«name.toFirstUpper()»Data() {
        	replace«name.toFirstUpper()»Data(new java.util.ArrayList<«fqnTableForClass()»>());
    	}
    «ENDIF»


	/**
	  * Initialize table columns
	  * This method may be overridden by implementation class to do any specialized behavior.
	  */
    protected void init«name.toFirstUpper()»Table() {

		«IF paging»
			init«name»TablePager();
    	«ENDIF»
    	
    	«REM»Call onRangeChanged if async data provider used«ENDREM»
    	«IF usesAsyncDataProvider()»
			«name»DataProvider = new «fqnDataProviderClass()»<«fqnTableForClass()»>() {
			
				@Override
				protected void onRangeChanged(final com.google.gwt.view.client.HasData<«fqnTableForClass()»> hasData) {
					if(presenter == null) {
						LOG.fine("onRangeChanged() called, but presenter null.  Ignoring as this is probably happening during init");
					} else {
						presenter.«name»RangeChanged(hasData);
					}
				}
			};
						
		«ELSE»
			«name»DataProvider = new «fqnDataProviderClass()»<«fqnTableForClass()»>();		
		«ENDIF»
		
    	«name»DataProvider.addDataDisplay(«name»);
    	
		«IF paging»
			«name»Pager.setDisplay(«name»);
		«ENDIF»
		
    	«FOREACH columns AS col»
	    	«name».addColumn(init«name.toFirstUpper()»Table«col.name.toFirstUpper()»Column(), "«col.label»");
	    «ENDFOREACH»
    }
	«ENDIF»
    
	«EXPAND initTablePager FOR this»

    «FOREACH columns AS col»
	    «IF col.columnType == "Text"»
		    «EXPAND ViewTableColumn::tableColumnInitText(this) FOR col »
		«ELSEIF col.columnType == "Button"»
		    «EXPAND ViewTableColumn::tableColumnInitButton(this) FOR col »
		«ELSEIF col.columnType == "Date"»
		    «EXPAND ViewTableColumn::tableColumnInitDate(this) FOR col »
		«ELSEIF col.columnType == "Custom"»
		«ELSEIF col.columnType == "Link"»
		    «EXPAND ViewTableColumn::tableColumnInitLink(this) FOR col »			
		«ELSEIF col.columnType == "Widget"»
		    «EXPAND ViewTableColumn::tableColumnInitWidget(this, col) FOR col.widget »
	    «ENDIF»
	    
    «ENDFOREACH»
    

	«IF this.for != null»
	public com.google.gwt.view.client.HasData<«fqnTableForClass()»> get«name.toFirstUpper()»HasData() {
		return «name»;
	}
	«ENDIF»
	
	

«ENDDEFINE»

«DEFINE initTablePager FOR TableWidget»
	«IF paging»
		protected void init«name»TablePager() {
			«getWidgetType("pager")».Resources pagerResources = com.google.gwt.core.client.GWT.create(«getWidgetType("pager")».Resources.class);
			«name»Pager = new «getWidgetType("pager")»(com.google.gwt.user.cellview.client.SimplePager.TextLocation.RIGHT, pagerResources, false, 0, true);
		}
    «ENDIF»
«ENDDEFINE»




«DEFINE widgetMethods FOR InputTextWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
«ENDDEFINE»


«DEFINE widgetMethods FOR InformationalTextWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR InputDateWidget»
//	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
	public com.google.gwt.user.client.ui.HasValue<java.util.Date> get«name.toFirstUpper()»HasDate() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR AutocompleteWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
		
	/**
	 * Value accessor for «name»
	 */
	public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection() {
		return «name»;
	}

	
	public com.google.gwt.event.logical.shared.HasSelectionHandlers<com.google.gwt.user.client.ui.SuggestOracle.Suggestion> get«name.toFirstUpper()»HasSelectionHandlers() {
		return «name»;
	}
	
	/**
	 * HasValue accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasValue<String> get«name.toFirstUpper()»HasValue() {
		return «name»;
	}

	
	
«ENDDEFINE»


«DEFINE widgetMethods FOR PanelWidget»
	public com.google.gwt.user.client.ui.HasWidgets.ForIsWidget «widgetForIsWidgetExpr()» {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetClearMethodImplementation FOR PanelWidget»
	/**
	 * Clear contents of «name» widget.
	 * Clear each widget contained in the panel.
	 */
	public void «clearMethodName()»() {
		«FOREACH widgets AS w»
			«w.clearMethodName()»();
		«ENDFOREACH»
	}
«ENDDEFINE»





«DEFINE widgetMethods FOR ListBoxWidget»

		/**
		 * Initialize «name» widget
		 */
		public void init«name.toFirstUpper()»() {
		}

		/**
		 * Value accessor for «name»
		 */
		public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection() {
			return «name»;
		}
		
	    public com.google.gwt.event.logical.shared.HasValueChangeHandlers<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasValueChangeHandlers() {
	    	return «name»;
	    }

    	public org.fornax.cartridges.sculptor.framework.gwt.client.HasSelectableItems<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasSelectableItems() {
	    	return «name»;    	
    	}


«ENDDEFINE»

«DEFINE widgetMethods FOR CustomWidget»
«ENDDEFINE»


«DEFINE widgetMethods FOR Widget»
	// No widget methods for widget «name» - need to implement?
«ENDDEFINE»



///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget object declarations - most can just use widgetDeclaration template below
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»
	Widget attribute implementation delarations
«ENDREM»

«DEFINE widgetDeclaration FOR Widget»
    @com.google.gwt.uibinder.client.UiField
    public «resolveGwtWidgetType()» «name»;    
«ENDDEFINE»

«DEFINE widgetDeclaration FOR ListBoxWidget»
	«IF this.forEnum != null»   «REM»see isProvided() method«ENDREM»
	    @com.google.gwt.uibinder.client.UiField( provided=true)
    	public «resolveGwtWidgetType()» «name» = new «resolveGwtWidgetType()»(«this.getTypedWidgetTargetType()».class);
    «ELSE»
	    @com.google.gwt.uibinder.client.UiField
   	 	public «resolveGwtWidgetType()» «name»;
   	«ENDIF»    
«ENDDEFINE»


«DEFINE widgetDeclaration FOR TableWidget»
	«REM»see isProvided() method«ENDREM»
    // «name» table
    @com.google.gwt.uibinder.client.UiField(provided = true)
    «IF this.for != null»
	    public «resolveGwtWidgetType()»<«fqnTableForClass()»> «name» = new «resolveGwtWidgetType()»<«fqnTableForClass()»>();
	    final com.google.gwt.view.client.SingleSelectionModel<«fqnTableForClass()»> «name»SelectionModel =
   	    	new com.google.gwt.view.client.SingleSelectionModel<«fqnTableForClass()»>();

		// Define data provider for «name» table
		protected «fqnDataProviderClass()»<«fqnTableForClass()»> «name»DataProvider;
    «ENDIF»
	
	«IF paging»
		// Pager for «name» table	
		@com.google.gwt.uibinder.client.UiField(provided = true)
		public «getWidgetType("pager")» «name»Pager;
	«ENDIF»

«ENDDEFINE»



«REM»View impl class«ENDREM»
«DEFINE viewImpl FOR View»
	«FILE javaFileName(fqnGwtViewWidgetImplClass(this)) TO_SRC»
		«EXPAND viewImplBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«REM»View impl class - for unit tests«ENDREM»
«DEFINE viewImplForUnitTest FOR View»
	«FILE javaFileName(fqnGwtViewWidgetImplClass(this))»
		«EXPAND viewImplBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE viewImplBody FOR View»
package «gwtWidgetsPackage()»;

public class «gwtViewWidgetImplClass()» extends  «fqnGwtViewWidgetBaseClass()» implements «fqnGwtViewInterface()» {

	«loggerDeclaration(gwtViewWidgetImplClass())»

	public «gwtViewWidgetImplClass()»() {
		super();
	}
	
	// Uncomment the following if you need to override the template
	/*
    interface «gwtViewWidgetImplClass()»UiBinder extends com.google.gwt.uibinder.client.UiBinder<com.google.gwt.user.client.ui.Widget, «fqnGwtViewWidgetImplClass()»> {}

    private static «gwtViewWidgetImplClass()»UiBinder uiBinder = com.google.gwt.core.client.GWT
    	.create(«gwtViewWidgetImplClass()»UiBinder.class);

    protected com.google.gwt.user.client.ui.Widget getWidget() {
    	return uiBinder.createAndBindUi(this);
    }

	*/
}
«ENDDEFINE»
