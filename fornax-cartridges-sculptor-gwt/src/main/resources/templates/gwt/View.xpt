«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»
«EXTENSION extensions::gwt::sofeauihelpers»

«DEFINE view(Module module) FOR GuiModule»

	«EXPAND viewBaseInterface FOREACH this.views»
	«EXPAND viewInterface FOREACH this.views»
	«EXPAND viewBase FOREACH this.views»
	«EXPAND viewImpl FOREACH this.views»

	«EXPAND templates::gwt::Activity::activityBase FOREACH this.views»
	«EXPAND templates::gwt::Activity::activityImpl FOREACH this.views»
	
	«EXPAND templates::gwt::ViewTemplate::viewCompositeBaseTemplate FOREACH this.views»
	«EXPAND templates::gwt::Place::placeBase FOREACH this.views»
	
	«EXPAND templates::gwt::Presenter::presenterBaseInterface FOREACH this.views»
	
	«EXPAND templates::gwt::Presenter::presenterInterface FOREACH this.views»
	
	
«ENDDEFINE»


«REM»View interface«ENDREM»
«DEFINE viewInterface FOR View»
	«FILE javaFileName(fqnGwtViewInterface(this)) TO_SRC»
		«EXPAND viewInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«REM»View interface - for unit tests«ENDREM»
«DEFINE viewInterfaceForUnitTest FOR View»
	«FILE javaFileName(fqnGwtViewInterface(this))»
		«EXPAND viewInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE viewInterfaceBody FOR View»
«javaHeader()»

package «gwtWidgetsPackage()»;

«IF formatJavaDoc() == "" -»
/**
 * Generated interface for the View «name».
 */
«ELSE -»
«formatJavaDoc()»
«ENDIF -»
	public interface «gwtViewInterface()» extends «fqnGwtViewBaseInterface()» {
	
	}
«ENDDEFINE»


«DEFINE viewBaseInterfaceBody FOR View»
«javaHeader()»

package «gwtBaseWidgetsPackage()»;

«IF formatJavaDoc() == "" -»
/**
 * Generated base interface for the View «name».
 */
«ELSE -»
«formatJavaDoc()»
«ENDIF -»
	public interface «gwtViewBaseInterface()» extends com.google.gwt.user.client.ui.IsWidget, org.fornax.cartridges.sculptor.framework.gwt.client.PresentsConfirmationMessage {
	
		/**
     	 * Initialize this view with the given presenter.
         */
		public void initView(«fqnPresenterBaseInterface()» presenter);
		
	    /**
	     * Set the presenter to null
	     */
	    public void unsetPresenter();

		«EXPAND widgetInterfaceDeclarations FOREACH this.allWidgets()»
		
	}

«ENDDEFINE»

«DEFINE viewBaseInterface FOR View»
	«FILE javaFileName(fqnGwtViewBaseInterface()) TO_SRC»
		«EXPAND viewBaseInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE viewBaseInterfaceForUnitTest FOR View»
	«FILE javaFileName(fqnGwtViewBaseInterface())»
		«EXPAND viewBaseInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»


///////////////////////////////////////////////////////////////////////////////////////////////////////
// ButtonWidget-related templates
///////////////////////////////////////////////////////////////////////////////////////////////////////

«DEFINE widgetInterfaceDeclarations FOR ButtonWidget»

	/**
	 * Get the HasClickHandlers interface for the «name.toFirstUpper()» button
	 */
	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers();
	
	/**
	 * Enable/disable the «name.toFirstUpper()» button
	 */
	public void set«name.toFirstUpper()»Enabled(boolean enabled);

	/**
	 * Show/hide the «name.toFirstUpper()» button
	 */
	public void set«name.toFirstUpper()»Visible(boolean visible);
	
«ENDDEFINE»

«DEFINE widgetInitCalls FOR ButtonWidget»
	init«name.toFirstUpper()»();
«ENDDEFINE»

«DEFINE widgetMethods FOR ButtonWidget»
	public void init«name.toFirstUpper()»() {
		«IF this.findContainingView().usePresenterCallbacks()»
			«EXPAND widgetPresenterCallback(this) FOREACH this.behaviorBindings»
		«ENDIF»
	}

	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers() {
		return «name»;
	}
	
	/**
	 * Enable/disable the «name.toFirstUpper()» button
	 */
	public void set«name.toFirstUpper()»Enabled(boolean enabled) {
		«name».setEnabled(enabled);
	}
	
	/**
	 * Show/hide the «name.toFirstUpper()» button
	 */
	public void set«name.toFirstUpper()»Visible(boolean visible) {
		«name».setVisible(visible);
	}

«ENDDEFINE»

«DEFINE widgetPresenterCallback(ButtonWidget widget) FOR OnClickBinding»
    «widget.name».addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
			
			@Override
			public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
				presenter.«widget.name»«this.bindingTypeName»(new org.fornax.cartridges.sculptor.framework.gwt.client.behavior.BehaviorDispatcher.Event());
			}
		});
	
«ENDDEFINE»

// ButtonWidget support in a table

«DEFINE tableColumnAttrDeclaration(TableWidget tableWidget, TableColumn col) FOR ButtonWidget»
	protected «EXPAND tableColumnType(tableWidget, col) FOR this» «col.tableColumnAttrName()»;
	
	protected «getColumnWrapperClass("button")»<«tableWidget.for.fqnGwtDto()»> «col.tableColumnAttrName()»Wrapper;
	 
«ENDDEFINE»

«REM»Initialize a table column that is based on a ButtonWidget class«ENDREM»
«DEFINE tableColumnInitWidget(TableWidget tableWidget, TableColumn col) FOR ButtonWidget»
	
	«EXPAND tableColumnAttrDeclaration(tableWidget, col) FOR this»
	
	«EXPAND tableColumnInitComment(tableWidget) FOR col»
	protected «EXPAND tableColumnType(tableWidget, col) FOR this» init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {

		«col.tableColumnAttrName()»Wrapper =
			new «getColumnWrapperClass("button")»<«tableWidget.for.fqnGwtDto()»>();
		//«col.tableColumnAttrName()»Wrapper.init();

		«col.tableColumnAttrName()»Wrapper.setLabelGetter(new org.fornax.cartridges.sculptor.framework.gwt.client.ValueGetter<«tableWidget.for.fqnGwtDto()», String>() {
				«EXPAND tableColumnValueGetterBridge(tableWidget, col) FOR this»
			
		});
		
		«col.tableColumnAttrName()» = «col.tableColumnAttrName()»Wrapper.getColumn();
		
		«IF tableWidget.findContainingView().usePresenterCallbacks()»
		    «EXPAND tableColumnBehaviorBinding(tableWidget, col, this) FOREACH this.behaviorBindings»
		«ENDIF»

		return «col.tableColumnAttrName()»Wrapper.getColumn();
    }
    
    «EXPAND tableColumnValueGetterDeclaration(tableWidget, col) FOR this»
    
	public org.fornax.cartridges.sculptor.framework.gwt.client.widgets.cell.HasActionDelegate<«tableWidget.for.fqnGwtDto()»> get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»HasActionDelegate() {
		return «col.tableColumnAttrName()»Wrapper;
	}
	
«ENDDEFINE»


«DEFINE tableWidgetColumnInterfaceDeclaration(TableWidget tableWidget, WidgetTableColumn col) FOR ButtonWidget»
	/**
	 * Get the action cell delegate for the «this.name» column.  This is typically used for button actions.
	 */
	public org.fornax.cartridges.sculptor.framework.gwt.client.widgets.cell.HasActionDelegate<«tableWidget.for.fqnGwtDto()»> get«tableWidget.name.toFirstUpper()»Table«col.name.toFirstUpper()»HasActionDelegate();
«ENDDEFINE»

«DEFINE tableColumnType(TableWidget tableWidget, TableColumn col) FOR ButtonWidget»com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», «tableWidget.for.fqnGwtDto()»>«ENDDEFINE»


///////////////////////////////////////////////////////////////////////////////////////////////////////
// LinkWidget-related templates
///////////////////////////////////////////////////////////////////////////////////////////////////////

«DEFINE widgetInterfaceDeclarations FOR LinkWidget»
    «formatJavaDoc()»

	public com.google.gwt.event.dom.client.HasClickHandlers «widgetClickHandlersExpr()»;
«ENDDEFINE»

«DEFINE widgetInitCalls FOR LinkWidget»
	init«name.toFirstUpper()»();
«ENDDEFINE»

«DEFINE widgetMethods FOR LinkWidget»
    «formatJavaDoc()»
	public com.google.gwt.event.dom.client.HasClickHandlers get«name.toFirstUpper()»HasClickHandlers() {
		return «name»;
	}
	
	«formatJavaDoc()»
	public void init«name.toFirstUpper()»() {
	}

«ENDDEFINE»



«REM»
--------------------------------------------------------------------------------------------------------------
Table column support for LinkWidget type
--------------------------------------------------------------------------------------------------------------
«ENDREM»

«REM»Initialize cell object«ENDREM»
«DEFINE tableCellInit(TableWidget tableWidget, TableColumn col) FOR LinkWidget»
	«this.resolveGwtCellWidgetType()» cell =
		new «this.resolveGwtCellWidgetType()»();
«ENDDEFINE»



///////////////////////////////////////////////////////////////////////////////////////////////////////
// ListBoxWidget -related templates
///////////////////////////////////////////////////////////////////////////////////////////////////////
«REM»
--------------------------------------------------------------------------------------------------------------
	Table column support for ListBoxWidget type
--------------------------------------------------------------------------------------------------------------
«ENDREM»

«REM»Initialize cell object«ENDREM»
«DEFINE tableCellInit(TableWidget tableWidget, TableColumn col) FOR ListBoxWidget»
	«IF this.forEnum != null»
		«this.resolveGwtCellWidgetTypeWithOverriding("enumListBox")»<«this.cellParameterizedType(col)»> cell =
			new «this.resolveGwtCellWidgetTypeWithOverriding("enumListBox")»<«this.cellParameterizedType(col)»>(«this.getTypedWidgetTargetType()».class);
	«ELSE»
		«error("ListBoxWidget cell type without forEnum not yet supported")»
	«ENDIF»
«ENDDEFINE»



«REM»Getter to get the value for a column that is based on a ListBoxWidget
TODO: Combine this with generic method for Widget that looks the same?«ENDREM»
«DEFINE tableColumnValueGetterDeclaration(TableWidget tableWidget, TableColumn col) FOR ListBoxWidget»
	«LET this.cellTableColumnType(col) AS columnType»
		/**
		 * Method to return the value that should be displayed in the «col.name» column of «tableWidget.name» table.
		 * This method «IF this.hasSourceRef()»can«ELSE»must«ENDIF» be overridden by the concrete view class.
		 */
		protected «this.hasSourceRef() ? "" : "abstract "»«columnType» get«tableWidget.name.toFirstUpper()»Table«col.name.toFirstUpper()»ColValue(«tableWidget.for.fqnGwtDto()» obj)
	
			«IF this.hasSourceRef()»
			{
		    	return «this.getSourceRefExpression(tableWidget.for, "obj")»«IF this.forEnum != null && columnType == "String"».getName()«ENDIF»;
		    }
		    «ELSE»
		    ;
			«ENDIF»
	«ENDLET»

«ENDDEFINE»


«DEFINE tableColumnBehaviorBinding(TableWidget tableWidget, TableColumn col, Widget widget) FOR BehaviorBinding»
	// No presenter callback support for «widget.name» widget in «tableWidget.name» table for «this.bindingTypeName» type binding
«ENDDEFINE»

«DEFINE tableColumnBehaviorBinding(TableWidget tableWidget, TableColumn col, ListBoxWidget widget) FOR OnSelectItemBinding»
	«col.tableColumnAttrName()».setFieldUpdater(new com.google.gwt.cell.client.FieldUpdater<«tableWidget.for.fqnGwtDto()», «widget.cellTableColumnType(col)»>(){

		@Override
		public void update(int index,
			«tableWidget.for.fqnGwtDto()» object, «widget.cellTableColumnType(col)» value) {
			presenter.«presenterCallbackMethodName(tableWidget, col, this)»(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.EventFactory.create(object, value));
		}        	
    });

«ENDDEFINE»


«REM»Attach event handlers as needed to widget-based column
«DEFINE columnEventHandlersBridge(TableWidget tableWidget, TableColumn col) FOR ListBoxWidget»
		«col.tableColumnAttrName()».setFieldUpdater(new com.google.gwt.cell.client.FieldUpdater<«tableWidget.for.fqnGwtDto()», String>() {

			@Override
			public void update(int index, «tableWidget.for.fqnGwtDto()» object, String value) {
				LOG.info("Click on column «col.name» for object " + object);

				onSelect«tableWidget.name.toFirstUpper()»«col.name.toFirstUpper()»Col(object, value);
			}
			
		});
		
«ENDDEFINE»
«ENDREM»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget interface declarations
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»Declarations that must be added to the view interface for each widget«ENDREM»
«DEFINE widgetInterfaceDeclarations FOR Widget»
	// No interface declarations for «name» widget - fill in implementation?
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR TableWidget»
	«IF this.for != null»
		/**
		 * HasData accessor for «name» table
		 */
		public com.google.gwt.view.client.HasData<«fqnTableForClass()»> get«name.toFirstUpper()»HasData();

    	/**
    	 * Clear all of the data in the «name» table
    	 * See GWT ListDataProvider
    	 */
	    public void clear«name.toFirstUpper()»Data();
		
    	«IF usesAsyncDataProvider()»
			/**
			  * Inform the table of the total number of items that are available
	   	 	  * See GWT AsyncDataProvider
	    	  */
			public void update«name.toFirstUpper()»RowCount(int count, boolean exact);
		
			/**
			  * Inform the table of the new data
	    	  * See GWT AsyncDataProvider
			  */
			public void update«name.toFirstUpper()»RowData(int start, java.util.List<«fqnTableForClass()»> values);
		«ELSE»    	
    		/**
    		 * Replace the data in the «name» table with the given collection.
    		 * See GWT ListDataProvider
    		 */
		    public void replace«name.toFirstUpper()»Data(java.util.Collection<«fqnTableForClass()»> newData);

    		/**
    		 * Replace the data in the «name» table with the given list
    		 * See GWT ListDataProvider
    		 */
		    public void replace«name.toFirstUpper()»Data(java.util.List<«fqnTableForClass()»> newDataList);

		«ENDIF»
		
		
	 	«EXPAND tableColumnInterfaceDeclarations(this) FOREACH this.columns»
	«ENDIF»
«ENDDEFINE»

«REM»Interface declarations for Table Columns«ENDREM»
«DEFINE tableColumnInterfaceDeclarations(TableWidget tableWidget) FOR TableColumn»
«ENDDEFINE»

«REM»Interface declarations for Widget Table Columns«ENDREM»
«DEFINE tableColumnInterfaceDeclarations(TableWidget tableWidget) FOR WidgetTableColumn»
	«EXPAND tableWidgetColumnInterfaceDeclaration(tableWidget, this) FOR this.widget»
«ENDDEFINE»

«DEFINE tableWidgetColumnInterfaceDeclaration(TableWidget tableWidget, WidgetTableColumn col) FOR Widget»
	public void set«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»FieldUpdater(
		com.google.gwt.cell.client.FieldUpdater<«tableWidget.for.fqnGwtDto()», «this.cellTableColumnType(col)»> fieldUpdater);
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InputTextWidget»
	/**
	 * Text accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InformationalTextWidget»
	/**
	 * Text accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();

«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR InputDateWidget»
//	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
	public com.google.gwt.user.client.ui.HasValue<java.util.Date> get«name.toFirstUpper()»HasDate();

«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR AutocompleteWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText();
	
	/**
	 * Value accessor for «name»
	 */
	public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection();

	/**
	 * HasSelectionHandlers accessor for «name»
	 */
	public com.google.gwt.event.logical.shared.HasSelectionHandlers<com.google.gwt.user.client.ui.SuggestOracle.Suggestion> get«name.toFirstUpper()»HasSelectionHandlers();
	
	/**
	 * HasValue accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasValue<String> get«name.toFirstUpper()»HasValue();
	
«ENDDEFINE»



«DEFINE widgetInterfaceDeclarations FOR PanelWidget»
	public com.google.gwt.user.client.ui.HasWidgets.ForIsWidget «widgetForIsWidgetExpr()»;
«ENDDEFINE»

«DEFINE widgetInterfaceDeclarations FOR ListBoxWidget»
		/**
		 * Value accessor for «name»
		 */
		public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection();
		
	    public com.google.gwt.event.logical.shared.HasValueChangeHandlers<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasValueChangeHandlers();

    	public org.fornax.cartridges.sculptor.framework.gwt.client.HasSelectableItems<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasSelectableItems();
    

«ENDDEFINE»

«REM»Placeholder for any custom widget interface declarations.  If you have any, override this and invoke your template
based on CustomWidget.widgetType«ENDREM»
«DEFINE widgetInterfaceDeclarations FOR CustomWidget»
«ENDDEFINE»





«DEFINE viewBaseBody FOR View»
package «gwtBaseWidgetsPackage()»;

public abstract class «gwtViewWidgetBaseClass()» extends «getViewRootBaseClass()»
	implements «fqnGwtViewBaseInterface()» {

	«loggerDeclaration(gwtViewWidgetBaseClass())»

    interface «gwtViewWidgetBaseUiBinderClass()» extends com.google.gwt.uibinder.client.UiBinder<com.google.gwt.user.client.ui.Widget, «fqnGwtViewWidgetBaseClass()»> {}

    private static «gwtViewWidgetBaseClass()»UiBinder uiBinder = com.google.gwt.core.client.GWT
    	.create(«gwtViewWidgetBaseClass()»UiBinder.class);

	/**
	  * Default constructor for view base class.
	  * This constructor doesn't do anything interesting (on purpose).  See the initView() method to see where everything is
	  * constructed and initialized.  Everything is done there rather than the constructor so initialization of different widgets may be
	  * overridden in the implementation class if needed.
	  */
	public «gwtViewWidgetBaseClass()»() {

		«LET allWidgets().select(w | w.isProvided()) AS providedWidgets»
			«IF providedWidgets.size > 0»
				// Initialize widgets that are provided first since they need to be created before UiBinder is bound
				«EXPAND widgetInitCalls FOREACH providedWidgets»
			«ENDIF»	
		«ENDLET»
		
		// Create and bind UiBinder and initialize main widget
		initWidget(getWidget());
		
		
		«LET allWidgets().select(w | w.isProvided() == false) AS providedWidgets»
			«IF providedWidgets.size > 0»
				// Do post-creation initialization of widgets that are created by UiBinder (not provided)
				«EXPAND widgetInitCalls FOREACH providedWidgets»
			«ENDIF»	
		«ENDLET»
		
	}
	
    protected com.google.gwt.user.client.ui.Widget getWidget() {
    	return uiBinder.createAndBindUi(this);
    }
    
    // Presenter that should handle UI events
    protected «fqnPresenterBaseInterface()» presenter;
    
    /**
     * Set the presenter to null
     */
    public void unsetPresenter() {
    	presenter = null;
    }
    
    «EXPAND initView FOR this»
    
    
    «EXPAND widgetDeclaration FOREACH allWidgets()»
    
    «EXPAND widgetMethods FOREACH allWidgets()»
}
«ENDDEFINE»

«DEFINE initView FOR View»
    /**
     * Initialize this view with the given presenter, constructing any widgets and other objects as needed.
     */
    public void initView(«fqnPresenterBaseInterface()» presenter) {
    	this.presenter = presenter;
    	
    }
    
«ENDDEFINE»

«REM»View base class«ENDREM»
«DEFINE viewBase FOR View»
	«FILE javaFileName(fqnGwtViewWidgetBaseClass()) TO_SRC»
		«EXPAND viewBaseBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE viewBaseForUnitTest FOR View»
	«FILE javaFileName(fqnGwtViewWidgetBaseClass())»
		«EXPAND viewBaseBody FOR this»
	«ENDFILE»
«ENDDEFINE»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget init calls
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»Calls to widget initialization functions on construction«ENDREM»
«DEFINE widgetInitCalls FOR Widget»
«ENDDEFINE»

«DEFINE widgetInitCalls FOR TableWidget»
	// Initialize «name» table (columns, etc)
	init«name.toFirstUpper()»Table();
«ENDDEFINE»

«DEFINE widgetInitCalls FOR ListBoxWidget»
	init«name.toFirstUpper()»();
«ENDDEFINE»



«REM»Widget misc. methods«ENDREM»

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget methods - any methods, including init methods that may be needed
///////////////////////////////////////////////////////////////////////////////////////////////////////

«DEFINE widgetMethods FOR TableWidget»
	«IF this.for != null»

    «IF usesAsyncDataProvider()»
		/** {@inheritDoc}
		  */
		public void update«name.toFirstUpper()»RowCount(int count, boolean exact) {
			«name»DataProvider.updateRowCount(count, exact);
		}
		
		/** {@inheritDoc}
		  */
		public void update«name.toFirstUpper()»RowData(int start, java.util.List<«fqnTableForClass()»> values) {
			«name»DataProvider.updateRowData(start, values);
		}
		
	    /** {@inheritDoc}
	 	 */
    	public void clear«name.toFirstUpper()»Data() {
        	«name».setRowCount(0);
    	}

	«ELSE»
	    /** {@inheritDoc}
	 	 */
    	public void replace«name.toFirstUpper()»Data(java.util.Collection<«fqnTableForClass()»> newData) {
       		java.util.List<«fqnTableForClass()»> newDataList = new java.util.ArrayList<«fqnTableForClass()»>(newData);
        	replace«name.toFirstUpper()»Data(newDataList);
    	}
    
	    /** {@inheritDoc}
	 	 */
	    public void replace«name.toFirstUpper()»Data(java.util.List<«fqnTableForClass()»> newDataList) {
   	 		«name»DataProvider.getList().clear();
        	«name»DataProvider.getList().addAll(0, newDataList);
        	«name»DataProvider.refresh();
		}

	    /** {@inheritDoc}
	 	 */
    	public void clear«name.toFirstUpper()»Data() {
        	replace«name.toFirstUpper()»Data(new java.util.ArrayList<«fqnTableForClass()»>());
    	}
    «ENDIF»


	/**
	  * Initialize table columns
	  * This method may be overridden by implementation class to do any specialized behavior.
	  */
    protected void init«name.toFirstUpper()»Table() {

		«IF paging»
			init«name»TablePager();
    	«ENDIF»
    	
    	«REM»Call onRangeChanged if async data provider used«ENDREM»
    	«IF usesAsyncDataProvider()»
			«name»DataProvider = new «fqnDataProviderClass()»<«fqnTableForClass()»>() {
			
				@Override
				protected void onRangeChanged(final com.google.gwt.view.client.HasData<«fqnTableForClass()»> hasData) {
					if(presenter == null) {
						LOG.fine("onRangeChanged() called, but presenter null.  Ignoring as this is probably happening during init");
					} else {
						presenter.«name»RangeChanged(hasData);
					}
				}
			};
						
		«ELSE»
			«name»DataProvider = new «fqnDataProviderClass()»<«fqnTableForClass()»>();		
		«ENDIF»
		
    	«name»DataProvider.addDataDisplay(«name»);
    	
		«IF paging»
			«name»Pager.setDisplay(«name»);
		«ENDIF»
		
    	«FOREACH columns AS col»
	    	«name».addColumn(init«name.toFirstUpper()»Table«col.name.toFirstUpper()»Column(), "«col.label»");
	    «ENDFOREACH»
    }
	«ENDIF»
    
	«EXPAND initTablePager FOR this»

    «FOREACH columns AS col»
	    «IF col.columnType == "Text"»
		    «EXPAND tableColumnInitText(this) FOR col »
		«ELSEIF col.columnType == "Button"»
		    «EXPAND tableColumnInitButton(this) FOR col »
		«ELSEIF col.columnType == "Date"»
		    «EXPAND tableColumnInitDate(this) FOR col »
		«ELSEIF col.columnType == "Custom"»
		«ELSEIF col.columnType == "Link"»
		    «EXPAND tableColumnInitLink(this) FOR col »			
		«ELSEIF col.columnType == "Widget"»
		    «EXPAND tableColumnInitWidget(this, col) FOR col.widget »
	    «ENDIF»
	    
    «ENDFOREACH»
    

	«IF this.for != null»
	public com.google.gwt.view.client.HasData<«fqnTableForClass()»> get«name.toFirstUpper()»HasData() {
		return «name»;
	}
	«ENDIF»
	
	

«ENDDEFINE»

«DEFINE initTablePager FOR TableWidget»
	«IF paging»
		protected void init«name»TablePager() {
			«getWidgetType("pager")».Resources pagerResources = com.google.gwt.core.client.GWT.create(«getWidgetType("pager")».Resources.class);
			«name»Pager = new «getWidgetType("pager")»(com.google.gwt.user.cellview.client.SimplePager.TextLocation.RIGHT, pagerResources, false, 0, true);
		}
    «ENDIF»
«ENDDEFINE»


«DEFINE tableColumnInitComment(TableWidget tableWidget) FOR TableColumn»
    /**
     * Initialization method for «name» column of «tableWidget.name» table.
     * Override this in derived class to specialize the initialization of this column if needed.
     */
«ENDDEFINE»



«REM»Deprecated - won't be needed after switching everything to widget-based columns«ENDREM»
«DEFINE tableColumnInitDate(TableWidget tableWidget) FOR TableColumn»

	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», java.util.Date> «this.tableColumnAttrName()»;
	
	«EXPAND tableColumnInitComment(tableWidget) FOR this»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», java.util.Date> init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {
	
		com.google.gwt.cell.client.DateCell dateCell = new com.google.gwt.cell.client.DateCell();
	
		«this.tableColumnAttrName()» = new com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», java.util.Date>(dateCell) {
                        @Override
                        public Date getValue(«tableWidget.for.fqnGwtDto()» object) {
                        	return get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(object);
                        }
        };
        
        return «this.tableColumnAttrName()»;
	}
	
	/**
	 * Method to return the value that should be displayed in the «name» column of «tableWidget.name» table.
	 */
	protected «this.hasSourceRef() ? "" : "abstract "»java.util.Date get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(«tableWidget.for.fqnGwtDto()» object)
	
		«IF this.hasSourceRef()»
		{
	    	return «this.getSourceRefExpression("object")»;
	    }
	    «ELSE»
	    ;
		«ENDIF»
«ENDDEFINE»

«REM»Deprecated - won't be needed after switching everything to widget-based columns«ENDREM»
«DEFINE tableColumnInitButton(TableWidget tableWidget) FOR TableColumn»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String>  «this.tableColumnAttrName()»;

	«EXPAND tableColumnInitComment(tableWidget) FOR this»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {

		com.google.gwt.cell.client.ButtonCell cellB = new com.google.gwt.cell.client.ButtonCell();
		
		«this.tableColumnAttrName()» = new Column<«tableWidget.for.fqnGwtDto()», String>(cellB) {

			@Override
			public String getValue(«tableWidget.for.fqnGwtDto()» object) {
            	return get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(object);
			}
		};
		return «this.tableColumnAttrName()»;
    }
    
	/**
	 * Method to return the value that should be displayed in the «name» column of «tableWidget.name» table.
	 */
	protected «this.hasSourceRef() ? "" : "abstract "»String get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(«tableWidget.for.fqnGwtDto()» object)
	
		«IF this.hasSourceRef()»
		{
	    	return «this.getSourceRefExpression("object")»;
	    }
	    «ELSE»
	    ;
		«ENDIF»

«ENDDEFINE»

«REM»Deprecated - won't be needed after switching everything to widget-based columns«ENDREM»
«DEFINE tableColumnInitLink(TableWidget tableWidget) FOR TableColumn»
	
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> «this.tableColumnAttrName()»;
	
	«EXPAND tableColumnInitComment(tableWidget) FOR this»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {

		com.google.gwt.cell.client.ClickableTextCell cellB = new com.google.gwt.cell.client.ClickableTextCell();
		
		«this.tableColumnAttrName()» = new Column<«tableWidget.for.fqnGwtDto()», String>(cellB) {

			@Override
			public String getValue(«tableWidget.for.fqnGwtDto()» object) {
				return "«this.label»";
			}

		};
		return «this.tableColumnAttrName()»;
    }
    
«ENDDEFINE»


«REM»
--------------------------------------------------------------------------------------------------------------
	Table column support for Widget type
--------------------------------------------------------------------------------------------------------------
«ENDREM»


«DEFINE tableColumnAttrDeclaration(TableWidget tableWidget, TableColumn col) FOR Widget»
	protected «EXPAND tableColumnType(tableWidget, col) FOR this» «col.tableColumnAttrName()»;
«ENDDEFINE»

«DEFINE tableColumnType(TableWidget tableWidget, TableColumn col) FOR Widget»com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», «this.cellTableColumnType(col)»>«ENDDEFINE»

«REM»Function of column anonymous inner class responsible for getting a value for a column«ENDREM»
«DEFINE tableColumnValueGetterBridge(TableWidget tableWidget, TableColumn col) FOR Widget»
			@Override
			public «this.cellTableColumnType(col)» getValue(«tableWidget.for.fqnGwtDto()» object) {
				return get«tableWidget.name.toFirstUpper()»Table«col.name.toFirstUpper()»ColValue(object);
			}
«ENDDEFINE»


«DEFINE tableColumnEventHandlers(TableWidget tableWidget, TableColumn col) FOR Widget»
«ENDDEFINE»

«REM»Getter to get the value for a column that is based on a Widget«ENDREM»
«DEFINE tableColumnValueGetterDeclaration(TableWidget tableWidget, TableColumn col) FOR Widget»
	/**
	 * Method to return the value that should be displayed in the «col.name» column of «tableWidget.name» table.
	 * This method «IF this.hasSourceRef()»can«ELSE»must«ENDIF» be overridden by the concrete view class.
	 */
	protected «this.hasSourceRef() ? "" : "abstract "»«this.cellTableColumnType(col)» get«tableWidget.name.toFirstUpper()»Table«col.name.toFirstUpper()»ColValue(«tableWidget.for.fqnGwtDto()» obj)
	
		«IF this.hasSourceRef()»
		{
	    	return «this.getSourceRefExpression(tableWidget.for, "obj")»;
	    }
	    «ELSE»
	    ;
		«ENDIF»

«ENDDEFINE»


«REM»
--------------------------------------------------------------------------------------------------------------
Table column support for InformationalTextWidget type
--------------------------------------------------------------------------------------------------------------
«ENDREM»

«REM»Depracated - Initialize InformationalTextWidget column - get value that should be displayed«ENDREM»
«DEFINE tableColumnInitText(TableWidget tableWidget) FOR TableColumn»

	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> «this.tableColumnAttrName()»;
	
	«EXPAND tableColumnInitComment(tableWidget) FOR this»
	protected com.google.gwt.user.cellview.client.Column<«tableWidget.for.fqnGwtDto()», String> init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {
		«this.tableColumnAttrName()» = new com.google.gwt.user.cellview.client.TextColumn<«tableWidget.for.fqnGwtDto()»>() {
                        @Override
                        public String getValue(«tableWidget.for.fqnGwtDto()» object) {
                        	return get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(object);
                        }
        };
        
        return «this.tableColumnAttrName()»;
	}
	    
		
	/**
	 * Method to return the value that should be displayed in the «name» column of «tableWidget.name» table.
	 */
	protected «this.hasSourceRef() ? "" : "abstract "»String get«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»ColValue(«tableWidget.for.fqnGwtDto()» object)
	
		«IF this.hasSourceRef()»
		{
	    	return «this.getSourceRefExpression(tableWidget.for.fqnGwtDto(), "object")»;
	    }
	    «ELSE»
	    ;
		«ENDIF»
«ENDDEFINE»


«REM»Initialize cell object«ENDREM»
«DEFINE tableCellInit(TableWidget tableWidget, TableColumn col) FOR InformationalTextWidget»
	«this.resolveGwtCellWidgetType()» cell =
		new «this.resolveGwtCellWidgetType()»();
«ENDDEFINE»







«REM»Initialize a table column that is based on a Widget class«ENDREM»
«DEFINE tableColumnInitWidget(TableWidget tableWidget, TableColumn col) FOR Widget»
	
	«EXPAND tableColumnAttrDeclaration(tableWidget, col) FOR this»
	
	«EXPAND tableColumnInitComment(tableWidget) FOR col»
	protected «EXPAND tableColumnType(tableWidget, col) FOR this» init«tableWidget.name.toFirstUpper()»Table«this.name.toFirstUpper()»Column() {

		«EXPAND tableCellInit(tableWidget, col) FOR this»

		«col.tableColumnAttrName()» = new «EXPAND tableColumnType(tableWidget, col) FOR this»(cell) {
			«EXPAND tableColumnValueGetterBridge(tableWidget, col) FOR this»
		};
		
		«IF tableWidget.findContainingView().usePresenterCallbacks()»
		    «EXPAND tableColumnBehaviorBinding(tableWidget, col, this) FOREACH this.behaviorBindings»
		«ENDIF»

		return «col.tableColumnAttrName()»;
    }
    
    «EXPAND tableColumnValueGetterDeclaration(tableWidget, col) FOR this»
    
	
	public void set«tableWidget.name.toFirstUpper()»Table«col.name.toFirstUpper()»FieldUpdater(
		com.google.gwt.cell.client.FieldUpdater<«tableWidget.for.fqnGwtDto()», «this.cellTableColumnType(col)»> fieldUpdater) {
		
			«col.tableColumnAttrName()».setFieldUpdater(fieldUpdater);
	}
	
	
«ENDDEFINE»





«DEFINE widgetMethods FOR InputTextWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR InformationalTextWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR InputDateWidget»
//	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
	public com.google.gwt.user.client.ui.HasValue<java.util.Date> get«name.toFirstUpper()»HasDate() {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR AutocompleteWidget»
	public com.google.gwt.user.client.ui.HasText get«name.toFirstUpper()»HasText() {
		return «name»;
	}
		
	/**
	 * Value accessor for «name»
	 */
	public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection() {
		return «name»;
	}

	
	public com.google.gwt.event.logical.shared.HasSelectionHandlers<com.google.gwt.user.client.ui.SuggestOracle.Suggestion> get«name.toFirstUpper()»HasSelectionHandlers() {
		return «name»;
	}
	
	/**
	 * HasValue accessor for «name»
	 */
	public com.google.gwt.user.client.ui.HasValue<String> get«name.toFirstUpper()»HasValue() {
		return «name»;
	}

	
	
«ENDDEFINE»


«DEFINE widgetMethods FOR PanelWidget»
	public com.google.gwt.user.client.ui.HasWidgets.ForIsWidget «widgetForIsWidgetExpr()» {
		return «name»;
	}
«ENDDEFINE»

«DEFINE widgetMethods FOR ListBoxWidget»

		/**
		 * Initialize «name» widget
		 */
		public void init«name.toFirstUpper()»() {
		}

		/**
		 * Value accessor for «name»
		 */
		public «getGwtInterfaceHasSelection()» get«name.toFirstUpper()»HasSelection() {
			return «name»;
		}
		
	    public com.google.gwt.event.logical.shared.HasValueChangeHandlers<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasValueChangeHandlers() {
	    	return «name»;
	    }

    	public org.fornax.cartridges.sculptor.framework.gwt.client.HasSelectableItems<«this.getTypedWidgetTargetType()»> get«name.toFirstUpper()»HasSelectableItems() {
	    	return «name»;    	
    	}


«ENDDEFINE»

«DEFINE widgetMethods FOR CustomWidget»
«ENDDEFINE»


«DEFINE widgetMethods FOR Widget»
	// No widget methods for widget «name» - need to implement?
«ENDDEFINE»



///////////////////////////////////////////////////////////////////////////////////////////////////////
// Widget object declarations - most can just use widgetDeclaration template below
///////////////////////////////////////////////////////////////////////////////////////////////////////

«REM»
	Widget attribute implementation delarations
«ENDREM»

«DEFINE widgetDeclaration FOR Widget»
    @com.google.gwt.uibinder.client.UiField
    public «resolveGwtWidgetType()» «name»;    
«ENDDEFINE»

«DEFINE widgetDeclaration FOR ListBoxWidget»
	«IF this.forEnum != null»   «REM»see isProvided() method«ENDREM»
	    @com.google.gwt.uibinder.client.UiField( provided=true)
    	public «resolveGwtWidgetType()» «name» = new «resolveGwtWidgetType()»(«this.getTypedWidgetTargetType()».class);
    «ELSE»
	    @com.google.gwt.uibinder.client.UiField
   	 	public «resolveGwtWidgetType()» «name»;
   	«ENDIF»    
«ENDDEFINE»


«DEFINE widgetDeclaration FOR TableWidget»
	«REM»see isProvided() method«ENDREM»
    // «name» table
    @com.google.gwt.uibinder.client.UiField(provided = true)
    «IF this.for != null»
	    public «resolveGwtWidgetType()»<«fqnTableForClass()»> «name» = new «resolveGwtWidgetType()»<«fqnTableForClass()»>();
	    final com.google.gwt.view.client.SingleSelectionModel<«fqnTableForClass()»> «name»SelectionModel =
   	    	new com.google.gwt.view.client.SingleSelectionModel<«fqnTableForClass()»>();

		// Define data provider for «name» table
		protected «fqnDataProviderClass()»<«fqnTableForClass()»> «name»DataProvider;
    «ENDIF»
	
	«IF paging»
		// Pager for «name» table	
		@com.google.gwt.uibinder.client.UiField(provided = true)
		public «getWidgetType("pager")» «name»Pager;
	«ENDIF»

«ENDDEFINE»



«REM»View impl class«ENDREM»
«DEFINE viewImpl FOR View»
«FILE javaFileName(fqnGwtViewWidgetImplClass(this)) TO_SRC»
«EXPAND viewImplBody FOR this»
«ENDFILE»
«ENDDEFINE»

«REM»View impl class - for unit tests«ENDREM»
«DEFINE viewImplForUnitTest FOR View»
«FILE javaFileName(fqnGwtViewWidgetImplClass(this))»
«EXPAND viewImplBody FOR this»
«ENDFILE»
«ENDDEFINE»

«DEFINE viewImplBody FOR View»
package «gwtWidgetsPackage()»;

public class «gwtViewWidgetImplClass()» extends  «fqnGwtViewWidgetBaseClass()» implements «fqnGwtViewInterface()» {

	«loggerDeclaration(gwtViewWidgetImplClass())»

	public «gwtViewWidgetImplClass()»() {
		super();
	}
	
	// Uncomment the following if you need to override the template
	/*
    interface «gwtViewWidgetImplClass()»UiBinder extends com.google.gwt.uibinder.client.UiBinder<com.google.gwt.user.client.ui.Widget, «fqnGwtViewWidgetImplClass()»> {}

    private static «gwtViewWidgetImplClass()»UiBinder uiBinder = com.google.gwt.core.client.GWT
    	.create(«gwtViewWidgetImplClass()»UiBinder.class);

    protected com.google.gwt.user.client.ui.Widget getWidget() {
    	return uiBinder.createAndBindUi(this);
    }

	*/
}
«ENDDEFINE»
