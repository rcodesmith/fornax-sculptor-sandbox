«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»


«DEFINE gwtService(Module module) FOR GuiModule»
	«LET this.stubModule.services AS serviceProxies»
		«EXPAND gwtAsyncService FOREACH serviceProxies»
		«EXPAND gwtSyncService FOREACH serviceProxies»
		«EXPAND gwtServiceImpl FOREACH serviceProxies»
	«ENDLET»

«ENDDEFINE»


«REM»Async interface«ENDREM»

«DEFINE gwtAsyncService FOR ServiceProxy»

    «FILE javaFileName(gwtServiceAsyncInterface(this))»
    	package «gwtServiceAsyncInterfacePackage(this)»;
    	
		public interface «gwtServiceAsyncInterfaceName(this)» {
		«EXPAND gwtAsyncServiceOperation FOREACH this.operations.select(op|op.isPublicVisibility())»
«REM»
«ENDREM»
		
		
		}
	«ENDFILE»
«ENDDEFINE»


«DEFINE gwtAsyncServiceOperation FOR ServiceOperation»

	public void «name»(«EXPAND anotParamTypeAndName(this.service.module) FOREACH parameters SEPARATOR ","» «IF parameters != null && parameters.size > 0»,«ENDIF»
	«LET getGwtTypeName() AS retTypeName»
	com.google.gwt.user.client.rpc.AsyncCallback<«IF retTypeName == "void"»Void«ELSE»«retTypeName»«ENDIF»> callback);
	«ENDLET»
«ENDDEFINE»


«REM»Parameter type and name«ENDREM»

«DEFINE anotParamTypeAndName(Module module) FOR Parameter»
«getGwtParameterTypeName(this, module)» «name»
«ENDDEFINE»


«REM»Sync interface«ENDREM»


«DEFINE gwtSyncService FOR ServiceProxy»

    «FILE javaFileName(gwtServiceSyncInterface(this))»
    	package «gwtServiceSyncInterfacePackage(this)»;
    	
    	@com.google.gwt.user.client.rpc.RemoteServiceRelativePath("«name».gwt")
    	@org.fornax.cartridges.sculptor.framework.gwt.shared.GwtRemoteService("«name».gwt")
		public interface «gwtServiceSyncInterfaceName(this)» extends com.google.gwt.user.client.rpc.RemoteService {
		«EXPAND gwtSyncServiceOperation FOREACH this.operations.select(op|op.isPublicVisibility())»
«REM»
«ENDREM»
		
		
		}
	«ENDFILE»
«ENDDEFINE»


«DEFINE gwtSyncServiceOperation FOR ServiceOperation»

	public «getGwtTypeName()» «name»(«EXPAND anotParamTypeAndName(this.service.module) FOREACH parameters SEPARATOR ","»);
«ENDDEFINE»






«REM»Service implementation«ENDREM»


«DEFINE gwtServiceImpl FOR ServiceProxy»
	«EXPAND gwtServiceImpl(this.guiModule, this.eContainer) FOR this»
«ENDDEFINE»

«DEFINE gwtServiceImpl(GuiModule guiModule, Module module) FOR ServiceProxy»

    «FILE javaFileName(gwtServiceImplFqn(this))»
    	package «gwtServiceImplPackage(this)»;
    	
    	import org.fornax.cartridges.sculptor.framework.gwt.shared.domain.ServiceTechnologyException;
    	
    	@org.springframework.stereotype.Service("Gwt«name»")
		public class «gwtServiceImplName(this)» extends com.google.gwt.user.server.rpc.RemoteServiceServlet
			implements «gwtServiceSyncInterface(this)» {

    	/**
		  * Default serialVersionUID
		  */
		private static final long serialVersionUID = 1L;
		
		private final static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(«gwtServiceImplName(this)».class);

			
		@org.springframework.beans.factory.annotation.Autowired
		private «this.for.getServiceapiPackage()».«this.name» «name.toFirstLower()»;
		«EXPAND gwtServiceImplOperation(module) FOREACH this.operations.select(op|op.isPublicVisibility())»

		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE gwtServiceImplOperation(Module module) FOR ServiceOperation»
	/**
	 * Type is «type»
	 * Domain object type name is «domainObjectType.name»
	 * Type name is «getTypeName()»
	 */
	public «getGwtTypeName()» «name»(«EXPAND anotParamTypeAndName(this.service.module) FOREACH parameters SEPARATOR ","») {

	«IF parameters.size > 0»
		if(log.isDebugEnabled()) {
			log.debug("«name»(" + «FOREACH parameters AS p SEPARATOR ' + ", " + '»«p.name»«ENDFOREACH» + ")");	
		} else
	«ENDIF»	
	if(log.isInfoEnabled()) {
		log.debug("«name»()");
	}
	try {
	«LET this.getTypeName() AS typeName»
		«IF typeName != null && typeName != 'void'»
			«typeName» res =
		«ENDIF»
		«this.service.name.toFirstLower()».«name»(«EXPAND gwtServiceImplOperationParameter FOREACH parameters SEPARATOR ","»);
		
		«IF typeName != null && typeName != 'void'»
			
			«IF domainObjectType != null»
			return «module.dtoMapper()».map«domainObjectType.name»FromDomain(res);				
			«ELSE»
			
			if(log.isInfoEnabled()) {
				log.debug("«name»() returning");
			}
			return res;
			«ENDIF»
		«ENDIF»

	«ENDLET»
    	} catch(Exception e) {
    		log.error("error calling «name»", e);
    		throw new ServiceTechnologyException(e);
    	}

	
	}

«ENDDEFINE»


«DEFINE gwtServiceImplOperationParameter FOR Parameter»
		«this.getMapToDomainExpression()»
«ENDDEFINE»




