«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»


«REM»Place base class«ENDREM»
«DEFINE placeBase FOR View»
	«FILE javaFileName(this.fqnPlaceBaseClass()) TO_SRC»
		«EXPAND placeBaseBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE placeBaseForUnitTest FOR View»
	«FILE javaFileName(this.fqnPlaceBaseClass())»
		«EXPAND placeBaseBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE placeBaseBody FOR View»
package «gwtPlacesBasePackage()»;

public class «gwtPlaceBaseClass()» extends «gwtFrameworkPlaceBaseClass()» {

	«EXPAND attribute FOREACH parameters»
	«EXPAND attributeNameConst FOREACH parameters»
	
	// «requiredParameters()»
	«IF requiredParameters().size > 0»
	private «gwtPlaceBaseClass()»() {
	}
	«ENDIF»
	
	public «gwtPlaceBaseClass()»(«EXPAND parameterTypeAndName FOREACH requiredParameters() SEPARATOR ","») {
		«FOREACH requiredParameters() AS param»
			this.«param.name» = «param.name»;
		«ENDFOREACH»
	
	}
	
	«EXPAND accessors FOREACH parameters»
	
	
	public static class Tokenizer implements com.google.gwt.place.shared.PlaceTokenizer<«gwtPlaceBaseClass()»> {
		@java.lang.Override
		public «gwtPlaceBaseClass()» getPlace(String token) {
			«gwtPlaceBaseClass()» place = new «gwtPlaceBaseClass()»();

			if( com.google.common.base.Strings.isNullOrEmpty(token) ){
				return place;
			}
			com.google.common.base.Splitter.MapSplitter mapSplitter = com.google.common.base.Splitter.on("&&").trimResults().withKeyValueSeparator("=");
			java.util.Map<String, String> keyValueMap = mapSplitter.split(token);

			«FOREACH parameters AS param ITERATOR iter»
			{
				String paramVal = keyValueMap.get(«param.getPlaceArgConst()»);
				if(paramVal != null) {
					paramVal = paramVal.trim();
					place.set«param.name.toFirstUpper()»(paramVal);
				}
			}	
			«ENDFOREACH»
			return place;
		}
		
		@java.lang.Override
		public String getToken(«gwtPlaceBaseClass()» place) {
			StringBuilder sb = new StringBuilder();
			boolean isFirst = true;
			«FOREACH parameters AS param ITERATOR iter»
			«REM»TODO: Should use converterutils instead of toString«ENDREM»
			{
				if(place.«param.name» != null) {
				«IF iter.counter1 == 1»
					isFirst = false;
				«ELSE»
					if(isFirst == true) {
						isFirst = false;
					} else {
						sb.append("&&");
					}				
				«ENDIF»
					sb.append(getKeyVal(«param.getPlaceArgConst()»,
						org.fornax.cartridges.sculptor.framework.gwt.client.util.GwtConvertUtils.toString(place.«param.name»)));
				}
			}
			«ENDFOREACH»
			
			return sb.toString();
		}
		
		private String getKeyVal(String key, String val) {
			return key + "=" + val;
		}
	
	}
}
«ENDDEFINE»

«DEFINE parameterTypeAndName FOR ViewParameter»
«getTypeName()» «name»
«ENDDEFINE»

«DEFINE attribute FOR ViewParameter»
	private «getTypeName()» «name»;
«ENDDEFINE»

«DEFINE attributeNameConst FOR ViewParameter»
	private static final String «getPlaceArgConst()» = "«name»";
«ENDDEFINE»



«DEFINE accessors FOR ViewParameter»
	public «getTypeName()» get«name.toFirstUpper()»() {
		return «name»;
	}
	
	public void set«name.toFirstUpper()»(«getTypeName()» «name») {
		this.«name» = «name»;
	}
	
	«IF getTypeName() != "String"»
	public void set«name.toFirstUpper()»(String «name») {
		this.«name» = org.fornax.cartridges.sculptor.framework.gwt.client.util.GwtConvertUtils.convert(«name», («getTypeName()»)null); 
	}
	«ENDIF»
«ENDDEFINE»