«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»
«EXTENSION extensions::gwt::sofeauihelpers»

«DEFINE presenterBaseInterfaceBody FOR View»
«javaHeader()»
package «gwtActivitiesBasePackage()»;

/**
  * Presenter base interface for view «name».
  */
public interface «gwtPresenterBaseInterface()» extends «gwtFrameworkPresenterBaseInterface()» {

	«EXPAND presenterInterfaceDeclarations(this) FOREACH this.allWidgets()»
	
	«EXPAND conditionInterfaceDeclarations(this) FOREACH this.conditions»
}
«ENDDEFINE»

«DEFINE presenterBaseInterface FOR View»
	«FILE javaFileName(fqnPresenterBaseInterface()) TO_SRC»
		«EXPAND presenterBaseInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»

«DEFINE presenterBaseInterfaceForUnitTest FOR View»
	«FILE javaFileName(fqnPresenterBaseInterface())»
		«EXPAND presenterBaseInterfaceBody FOR this»
	«ENDFILE»
«ENDDEFINE»


«REM»----------------------------------------------------------------------------------------
	Condition interfaces
-------------------------------------------------------------------------------------
«ENDREM»

«DEFINE conditionInterfaceDeclarations(View view) FOR UiCondition»

	/**
	 * @return the value of condition «name»
	 */
	public boolean «name.toFirstUpper()»Condition();
	
«ENDDEFINE»


«REM»----------------------------------------------------------------------------------------
	Behavior binding methods
-------------------------------------------------------------------------------------
	// Presenter interface for «widget.name» widget and «this.bindingTypeName» type binding not yet implemented
«ENDREM»

«DEFINE behaviorBindingMethods(Widget widget) FOR BehaviorBinding»
	/**
	  * «widget.name» widget «this.bindingTypeName» binding callback
	  */
	void «widget.name»«this.bindingTypeName»(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.BehaviorDispatcher.Event event);
	
«ENDDEFINE»

«REM»
«DEFINE behaviorBindingMethods(Widget widget) FOR OnClickBinding»
	/**
	  * «widget.name» widget has received a click
	  */
	void «widget.name»OnClick(com.google.gwt.event.dom.client.ClickEvent clickEvent);
«ENDDEFINE»
«ENDREM»



«REM»----------------------------------------------------------------------------------------
	Widget presenter interface declarations
-------------------------------------------------------------------------------------«ENDREM»

«REM»Declarations that must be added to the presenter interface for each widget«ENDREM»
«DEFINE presenterInterfaceDeclarations(View view) FOR Widget»
	
	«IF view.usePresenterCallbacks()»
		«EXPAND behaviorBindingMethods(this) FOREACH this.behaviorBindings»	
	«ENDIF»

«ENDDEFINE»

«DEFINE presenterInterfaceDeclarations(View view) FOR TableWidget»
	«IF view.usePresenterCallbacks()»
		«EXPAND behaviorBindingMethods(this) FOREACH this.behaviorBindings»			
	«ENDIF»

	«EXPAND presenterInterfaceDeclarations(view, this) FOREACH this.columns»
	
	«IF usesAsyncDataProvider()»
		/**
		 * Indication that the range of elements to be displayed for the «name» table has changed, and the
		 * table should be updated.
		 * This method should be overridden by subclasses.
		 * @param hasData HasData interface of the table
		 */
		public void «name»RangeChanged(com.google.gwt.view.client.HasData<«fqnTableForClass()»> hasData);
	«ENDIF»

«ENDDEFINE»

«REM»
	Interface declarations for table columns
«ENDREM»
«DEFINE presenterInterfaceDeclarations(View view, TableWidget tableWidget) FOR TableColumn»
	    «IF this.columnType == "Text"»
		«ELSEIF this.columnType == "Button"»
		    «EXPAND tableColumnOnClickHandlers(tableWidget) FOR this »
		«ELSEIF this.columnType == "Date"»
		«ELSEIF this.columnType == "Custom"»
		«ELSEIF this.columnType == "Link"»
		    «EXPAND tableColumnOnClickHandlers(tableWidget) FOR this »
	    «ENDIF»
«ENDDEFINE»

«REM»
	Widget-based table columns can have behavior bindings
«ENDREM»
«DEFINE presenterInterfaceDeclarations(View view, TableWidget tableWidget) FOR WidgetTableColumn»
	«IF view.usePresenterCallbacks()»
		«EXPAND behaviorBindingMethods(view, tableWidget, this) FOREACH this.widget.behaviorBindings»
	«ENDIF»
«ENDDEFINE»

«DEFINE behaviorBindingMethods(View view, TableWidget tableWidget, WidgetTableColumn column) FOR BehaviorBinding»
	/**
	  * «widget.name» widget «this.bindingTypeName» binding callback
	  */
	void «presenterCallbackMethodName(tableWidget, column, this)»(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.BehaviorDispatcher.Event event);
«ENDDEFINE»


«DEFINE tableColumnOnClickHandlers(TableWidget tableWidget) FOR TableColumn»

«ENDDEFINE»






«DEFINE presenterInterface FOR View»
«FILE javaFileName(fqnPresenterInterface()) TO_SRC»
«javaHeader()»
package «gwtActivitiesPackage()»;

/**
  * Presenter interface for view «name».
  */
public interface «gwtPresenterInterface()» extends «fqnPresenterBaseInterface()» {
}

«ENDFILE»
«ENDDEFINE»
