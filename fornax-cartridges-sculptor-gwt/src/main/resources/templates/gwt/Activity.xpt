«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»

«DEFINE activityBaseForUnitTest FOR View»
	«FILE javaFileName(fqnActivityBaseClass())»
		«EXPAND activityBaseBody FOR this» 
	«ENDFILE»
«ENDDEFINE»

«DEFINE activityBase FOR View»
	«FILE javaFileName(fqnActivityBaseClass()) TO_SRC»
		«EXPAND activityBaseBody FOR this» 
	«ENDFILE»
«ENDDEFINE» 

«DEFINE activityBaseBody FOR View»
«javaHeader()»
package «gwtActivitiesBasePackage()»;

/**
  * Activity base class for view «name».
  */
public abstract class «gwtActivityBaseClass()» extends «gwtFrameworkActivityBaseClass()» implements «fqnPresenterBaseInterface()» {

	«loggerDeclaration(gwtActivityBaseClass())»

	protected final com.google.gwt.event.shared.EventBus eventBus;
	protected final com.google.gwt.place.shared.PlaceController placeController;
	
	protected final «fqnGwtViewInterface()» view;
	
	«EXPAND serviceDeclaration FOREACH serviceProxies»

	public «gwtActivityBaseClass()»(com.google.gwt.event.shared.EventBus eventBus,
		«gwtViewInterface()» theView,
		com.google.gwt.place.shared.PlaceController placeController
		«EXPAND serviceConstructorArgs FOR this») {
		super();
		
		this.view = theView;
		this.eventBus = eventBus;
		this.placeController = placeController;
		
		«FOREACH serviceProxies AS service»
		this.«service.name.toFirstLower()» = «service.name.toFirstLower()»;
		«ENDFOREACH»
	}


	/**
	 *
	 */
	@Override
	public void start(com.google.gwt.user.client.ui.AcceptsOneWidget panel, com.google.gwt.event.shared.EventBus theEventBus) {
		LOG.info("start()");
		
		init();
		bind();

		//set the view widget into the panel
		panel.setWidget(getViewAsWidget());
		
		registerValidators();
		
		populateFromPlace();

	}

	protected abstract void registerValidators();
	
	protected void init() {
		LOG.info("init()");
		
		getView().initView(this);
				
	}

	/**
	 * Populate the view associated with this activity based on the place, loading whatever data is necessary.
	 */
	protected abstract void populateFromPlace();

	/**
	 * Bind to the view (register event handlers, etc) 
	 */
	protected void bind() {
	«FOREACH widgets AS w»
		bind«w.name.toFirstUpper()»();
	«ENDFOREACH»
	}
	
	«EXPAND widgetBindMethod FOREACH widgets»
	
	protected com.google.gwt.user.client.ui.Widget getViewAsWidget() {
		return view.asWidget();
	}
	
	protected «gwtViewInterface()» getView() {
		return view;
	}
	

	public void clearData() {
		«EXPAND widgetClearCall FOREACH widgets»
	}
	
}
«ENDDEFINE»

«REM»Declaration of service constructor arguments, with leading ,«ENDREM»
«DEFINE serviceConstructorArgs FOR View»
«IF this.serviceProxies.size > 0»
,
«FOREACH this.serviceProxies AS service SEPARATOR ","»
«service.gwtServiceAsyncInterface()» «service.name.toFirstLower()»
«ENDFOREACH»
«ENDIF»
«ENDDEFINE»


«REM»Methods to bind activity to view«ENDREM»
«DEFINE widgetBindMethod FOR Widget»
	protected void bind«this.name.toFirstUpper()»() {	
	}

«ENDDEFINE»

«DEFINE widgetBindMethod FOR LinkWidget»

	protected void bind«this.name.toFirstUpper()»() {
	«IF this.toView != null»
	   		view.«widgetClickHandlersExpr()».addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
			
				@java.lang.Override
				public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
					placeController.goTo(new «this.toView.fqnPlaceClass()»());
				}
			});
	«ENDIF»
	}

«ENDDEFINE»

«REM»Methods to clear data from widgets«ENDREM»
«DEFINE widgetClearCall FOR Widget»
«ENDDEFINE»

«DEFINE widgetClearCall FOR InputTextWidget»
	view.get«name.toFirstUpper()»HasText().setText("");
«ENDDEFINE»


«DEFINE widgetClearCall FOR TableWidget»
	«IF this.for == null»
		// No clear method since table has no domain object assigned in model
	«ELSE»
    	view.get«name.toFirstUpper()»HasData().setRowData(0, new java.util.ArrayList<«fqnTableForClass()»>());	
	«ENDIF»
«ENDDEFINE»



«REM»Declaration of service interface to be used by activity«ENDREM»
«DEFINE serviceDeclaration FOR Service»
    /**
     * Create a remote service proxy to talk to the server-side «name» service.
     */
    protected final «gwtServiceAsyncInterface()» «name.toFirstLower()»;

«ENDDEFINE»




«REM»Activity implementation class«ENDREM»
«DEFINE activityImpl FOR View»
«FILE javaFileName(fqnActivityImplClass()) TO_SRC»
«EXPAND activityImplBody FOR this»
«ENDFILE»
«ENDDEFINE» 

«DEFINE activityImplForUnitTest FOR View»
«FILE javaFileName(fqnActivityImplClass())»
«EXPAND activityImplBody FOR this»
«ENDFILE»
«ENDDEFINE» 

«DEFINE activityImplBody FOR View»
package «gwtActivitiesPackage()»;

/**
  * Activity implementation class for «name» view.
  */
public class «gwtActivityImplClass()» extends «fqnActivityBaseClass()» implements «fqnPresenterInterface()» {

	«loggerDeclaration(gwtActivityImplClass())»
	
	«fqnGwtViewInterface()» display;
	
	@com.google.inject.Inject
	public «gwtActivityImplClass()»(«fqnGwtViewInterface()» theDisplay,
		com.google.gwt.event.shared.EventBus eventBus,
		com.google.gwt.place.shared.PlaceController placeController
		«EXPAND serviceConstructorArgs FOR this») {
		super(eventBus, theDisplay, placeController
		«IF serviceProxies.size > 0»,«FOREACH serviceProxies AS service SEPARATOR ", "»«service.name.toFirstLower()»«ENDFOREACH»«ENDIF»
		);
		display = theDisplay;
		
		bind();
	}
	
	protected void bind() {
	}

}
«ENDDEFINE»