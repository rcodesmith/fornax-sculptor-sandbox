«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»

«DEFINE activityBaseForUnitTest FOR View»
	«FILE javaFileName(fqnActivityBaseClass())»
		«EXPAND activityBaseBody FOR this» 
	«ENDFILE»
«ENDDEFINE»

«DEFINE activityBase FOR View»
	«FILE javaFileName(fqnActivityBaseClass()) TO_SRC»
		«EXPAND activityBaseBody FOR this» 
	«ENDFILE»
«ENDDEFINE» 

«DEFINE activityBaseBody FOR View»
«javaHeader()»
package «gwtActivitiesBasePackage()»;

/**
  * Activity base class for view «name».
  */
public abstract class «gwtActivityBaseClass()» extends «gwtFrameworkActivityBaseClass()» implements «fqnPresenterBaseInterface()» {

	«loggerDeclaration(gwtActivityBaseClass())»

	protected final com.google.gwt.event.shared.EventBus eventBus;
	protected final com.google.gwt.place.shared.PlaceController placeController;
	
	protected final «fqnGwtViewInterface()» view;
	
	«EXPAND serviceDeclaration FOREACH serviceProxies»

	«EXPAND initBehavior FOREACH behaviors»
	
	public «gwtActivityBaseClass()»(com.google.gwt.event.shared.EventBus eventBus,
		«fqnGwtViewInterface()» theView,
		com.google.gwt.place.shared.PlaceController placeController
		«EXPAND serviceConstructorArgs FOR this») {
		super();
		
		this.view = theView;
		this.eventBus = eventBus;
		this.placeController = placeController;
		
		«FOREACH serviceProxies AS service»
		this.«service.name.toFirstLower()» = «service.name.toFirstLower()»;
		«ENDFOREACH»
	}


	/**
	 * Start the activity, attaching it to the view
	 */
	@Override
	public void start(com.google.gwt.user.client.ui.AcceptsOneWidget panel, com.google.gwt.event.shared.EventBus theEventBus) {
		LOG.info("start()");
		
		init();
		bind();

		//set the view widget into the panel
		panel.setWidget(getViewAsWidget());
		
		registerValidators();
		
		populateFromPlace();

	}

	protected abstract void registerValidators();
	
	protected void init() {
		LOG.info("init()");
		
		getView().initView(this);
				
	}

	/**
	 * Populate the view associated with this activity based on the place, loading whatever data is necessary.
	 */
	protected abstract void populateFromPlace();

	/**
	 * Bind to the view (register event handlers, etc) 
	 */
	protected void bind() {
		«FOREACH behaviors AS behavior»
			«behavior.name»Behavior = create«behavior.name.toFirstUpper()»Behavior();
		«ENDFOREACH»
		
		«FOREACH widgets AS w»
			bind«w.name.toFirstUpper()»();
		«ENDFOREACH»
		
		«FOREACH widgets.typeSelect(TableWidget) AS table»
			«FOREACH table.columns AS col»
				bind«table.name.toFirstUpper()»«col.name.toFirstUpper()»();
			«ENDFOREACH»
		«ENDFOREACH»
		
		
	}
	
	
	«EXPAND widgetBindMethod FOREACH widgets»
	
	protected com.google.gwt.user.client.ui.Widget getViewAsWidget() {
		return view.asWidget();
	}
	
	protected «fqnGwtViewInterface()» getView() {
		return view;
	}
	

	public void clearData() {
		«EXPAND widgetClearCall FOREACH widgets»
	}
	
}
«ENDDEFINE»

«DEFINE initBehavior FOR UiBehavior»
	// TODO: No behavior init for «name».  There should be.
«ENDDEFINE»

«DEFINE initBehavior FOR CustomBehavior»
	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("custom")» «name»Behavior;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("custom")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("custom")»(new org.fornax.cartridges.sculptor.framework.gwt.client.behavior.AsyncInvocable<Boolean>() {
		
			@Override
			public void invoke(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.BehaviorDispatcher.Event event, 
				com.google.gwt.user.client.rpc.AsyncCallback<Boolean> callback) {
				«name»(callback);
			}
		});
	}

	/**
	 * Custom method for the «name» behavior.  Must be overridden by derived class.
	 */
	protected abstract void «name»(com.google.gwt.user.client.rpc.AsyncCallback<Boolean> callback);


«ENDDEFINE»

«DEFINE initBehavior FOR UpdateTableBehavior»
	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("updateTable")»<«this.table.fqnTableForClass()»> «name»Behavior;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("updateTable")»<«this.table.fqnTableForClass()»> create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("updateTable")»<«this.table.fqnTableForClass()»>("«name»",
				view.get«table.name.toFirstUpper()»HasData(),
				new «getBehaviorClass("updateTable")».DataSource<«this.table.fqnTableForClass()»>() {

					@Override
					public void getData(
							com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<«this.table.fqnTableForClass()»>> resultsCallback) {

						«name»BehaviorGetData(resultsCallback);
					}
		});    	
 	}


	/**
	 * Method to get the updated data for table «this.table.name» as part of behavior «name»
	 */
	protected abstract void «name»BehaviorGetData(com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<«this.table.fqnTableForClass()»>> callback);

«ENDDEFINE»

«DEFINE initBehavior FOR PopulateListBoxBehavior»

	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("populateListBox")»<«this.widget.getTypedWidgetTargetType()»> «name»Behavior;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("populateListBox")»<«this.widget.getTypedWidgetTargetType()»> create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("populateListBox")»<«this.widget.getTypedWidgetTargetType()»>("«name»",
				view.get«widget.name.toFirstUpper()»HasSelectableItems(),
				new org.fornax.cartridges.sculptor.framework.gwt.client.behavior.AsyncInvocable<java.util.Collection<«this.widget.getTypedWidgetTargetType()»>>() {

			@Override
			public void invoke(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.BehaviorDispatcher.Event event, 
				com.google.gwt.user.client.rpc.AsyncCallback<java.util.Collection<«this.widget.getTypedWidgetTargetType()»>> callback) {
				«name»BehaviorGetData(callback);
			}

		});    	
 	}


	/**
	 * Method to get the updated data for list box «this.widget.name» as part of behavior «name»
	 */
	protected abstract void «name»BehaviorGetData(com.google.gwt.user.client.rpc.AsyncCallback<java.util.Collection<«this.widget.getTypedWidgetTargetType()»>> callback);

«ENDDEFINE»

«DEFINE initBehavior FOR MarkDirtyBehavior»

	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("markDirty")» «name»Behavior;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("markDirty")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("markDirty")»("«name»",
				this, «markSpecificObj»);    	
 	}
«ENDDEFINE»

«DEFINE initBehavior FOR MarkCleanBehavior»

	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("markClean")» «name»Behavior;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("markClean")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("markClean")»("«name»",
				this);    	
 	}
«ENDDEFINE»

«DEFINE initBehavior FOR WarnIfDirtyBehavior»

	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("warnIfDirty")» «name»Behavior;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("warnIfDirty")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("warnIfDirty")»("«name»", "«message»",
				this, view);
 	}
«ENDDEFINE»


«DEFINE initBehavior FOR GoBackBehavior»

	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("goBack")» «name»Behavior;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("goBack")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("goBack")»("«name»", this);
 	}
«ENDDEFINE»

«DEFINE initBehavior FOR UpdateAttributeBehavior»

	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("updateAttribute")» «name»Behavior;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("updateAttribute")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("updateAttribute")»("«name»", new org.fornax.cartridges.sculptor.framework.gwt.client.behavior.UpdateAttributeBehavior.Invocable() {

			@Override
			public void invoke(
					Event event) {
				«IF targetClass != null»
					«targetClass.fqnGwtDto()» targetObj = («targetClass.fqnGwtDto()»)event.getObj();
					«getSetterPathExpression("targetObj", targetClass, propertyPath)»((String)event.getValue());
					
				«ELSE»
					«FOREACH bindings AS binding»
						«EXPAND invokeUpdateAttributeSetter(this) FOR binding.widget»
					«ENDFOREACH»
				«ENDIF»
			}
		});
 	}
«ENDDEFINE»

«REM»
Generate invoke update attribute setter when an update was made from a ListBoxWidget.
We need to find the target class of the containing widget.
If the containing widget is a table, then the table holds the target class.
TODO: Do this more generically & support getting a target class from a containing panel/view also.
«ENDREM»
«DEFINE invokeUpdateAttributeSetter(UpdateAttributeBehavior behavior) FOR ListBoxWidget»
	«debugTrace("invokeUpdateAttributeSetter() eContainer: " + this.eContainer)»
	«IF WidgetTableColumn.isInstance(this.eContainer)»
		«debugTrace("It's a WidgettableColumn")»
		«EXPAND invokeUpdateAttributeSetter(behavior, this.eContainer.eContainer) FOR this»
	«ENDIF»
«ENDDEFINE»

«REM»
Generate invoke update attribute setter when an update was made from a ListBoxWidget that is contained in a table.
«ENDREM»
«DEFINE invokeUpdateAttributeSetter(UpdateAttributeBehavior behavior, TableWidget table) FOR ListBoxWidget»
	«table.for.fqnGwtDto()» targetObj = («table.for.fqnGwtDto()»)event.getObj();
	«getSetterPathExpression("targetObj", table.for, propertyPath)»((String)event.getValue());				
«ENDDEFINE»

«REM»Declaration of service constructor arguments, with leading ,«ENDREM»
«DEFINE serviceConstructorArgs FOR View»
«IF this.serviceProxies.size > 0»
,
«FOREACH this.serviceProxies AS service SEPARATOR ","»
«service.gwtServiceAsyncInterface()» «service.name.toFirstLower()»
«ENDFOREACH»
«ENDIF»
«ENDDEFINE»




«REM»Methods to bind activity to view«ENDREM»

«DEFINE widgetBindMethod FOR Widget»

	/**
	 * Bind behaviors to individual widgets.  Subclasses may override this to perform custom bindings.
	 */
	protected void bind«this.name.toFirstUpper()»() {

		«EXPAND behaviorBinding(this) FOREACH this.behaviorBindings»		
	}
«ENDDEFINE»

«DEFINE behaviorBinding FOR BehaviorBinding»
	«debugTrace("No template for behavior binding " + this)»
«ENDDEFINE»

«DEFINE behaviorBinding(Widget widget) FOR OnSelectItemBinding»
	{
		«EXPAND behaviorDispatcherConstruction(widget, "OnSelectItem") FOR this»

		«IF ListBoxWidget.isInstance(widget)»
			bd.bindHasValueChangeHandlers(view.get«widget.name.toFirstUpper()»HasValueChangeHandlers());
		«ELSE»
			bd.bindHasSelectionHandler(view.get«widget.name.toFirstUpper()»HasSelectionHandlers());
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE behaviorBinding(Widget widget) FOR OnClickBinding»
	{
		«EXPAND behaviorDispatcherConstruction(widget, "OnClick") FOR this»

		bd.bindHasClickHandler(view.get«widget.name.toFirstUpper()»HasClickHandlers());
	}
«ENDDEFINE»

«DEFINE behaviorDispatcherConstruction(Widget widget, String bindingType) FOR BehaviorBinding»
	«gwtBehaviorDispatcherClass()» bd = new «gwtBehaviorDispatcherClass()»("«widget.name + bindingType»", «FOREACH behaviors AS b SEPARATOR ", "»«b.name»Behavior«ENDFOREACH»);
«ENDDEFINE»

«DEFINE widgetBindMethod FOR LinkWidget»

	protected void bind«this.name.toFirstUpper()»() {
	«IF this.toView != null»
	   		view.«widgetClickHandlersExpr()».addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
			
				@java.lang.Override
				public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
					placeController.goTo(new «this.toView.fqnPlaceClass()»());
				}
			});
	«ENDIF»
	}

«ENDDEFINE»


«DEFINE widgetBindMethod FOR TableWidget»

	«REM»reuse template from Widget?«ENDREM»
	/**
	 * Bind behaviors to individual widgets.  Subclasses may override this to perform custom bindings.
	 */
	protected void bind«this.name.toFirstUpper()»() {

		«EXPAND behaviorBinding(this) FOREACH this.behaviorBindings»		
	}


	«EXPAND columnBindMethod(this) FOREACH columns»
«ENDDEFINE»

«DEFINE columnBindMethod(TableWidget table) FOR TableColumn»
	/**
	 * Bind behaviors to individual columns.  Subclasses may override this to perform custom bindings.
	 */
	protected void bind«table.name.toFirstUpper()»«this.name.toFirstUpper()»() {
	}
«ENDDEFINE»

«DEFINE columnBindMethod(TableWidget table) FOR WidgetTableColumn»
	/**
	 * Bind behaviors to individual columns.  Subclasses may override this to perform custom bindings.
	 */
	protected void bind«table.name.toFirstUpper()»«this.name.toFirstUpper()»() {

		«EXPAND behaviorBinding(this.widget, this, table) FOREACH this.widget.behaviorBindings»		
	}

«ENDDEFINE»

«DEFINE behaviorBinding(Widget widget, WidgetTableColumn col, TableWidget tableWidget) FOR OnSelectItemBinding»
	«EXPAND behaviorDispatcherConstruction(widget, "OnSelectItem") FOR this»

	view.set«tableWidget.name.toFirstUpper()»Table«col.name.toFirstUpper()»FieldUpdater(bd.<«tableWidget.for.fqnGwtDto()», String>getFieldUpdater());
«ENDDEFINE»



«REM»Methods to clear data from widgets«ENDREM»
«DEFINE widgetClearCall FOR Widget»
«ENDDEFINE»

«DEFINE widgetClearCall FOR InputTextWidget»
	view.get«name.toFirstUpper()»HasText().setText("");
«ENDDEFINE»


«DEFINE widgetClearCall FOR TableWidget»
	«IF this.for == null»
		// No clear method since table has no domain object assigned in model
	«ELSE»
    	view.get«name.toFirstUpper()»HasData().setRowData(0, new java.util.ArrayList<«fqnTableForClass()»>());	
	«ENDIF»
«ENDDEFINE»



«REM»Declaration of service interface to be used by activity«ENDREM»
«DEFINE serviceDeclaration FOR Service»
    /**
     * Create a remote service proxy to talk to the server-side «name» service.
     */
    protected final «gwtServiceAsyncInterface()» «name.toFirstLower()»;

«ENDDEFINE»




«REM»Activity implementation class«ENDREM»
«DEFINE activityImpl FOR View»
«FILE javaFileName(fqnActivityImplClass()) TO_SRC»
«EXPAND activityImplBody FOR this»
«ENDFILE»
«ENDDEFINE» 

«DEFINE activityImplForUnitTest FOR View»
«FILE javaFileName(fqnActivityImplClass())»
«EXPAND activityImplBody FOR this»
«ENDFILE»
«ENDDEFINE» 

«DEFINE activityImplBody FOR View»
package «gwtActivitiesPackage()»;

/**
  * Activity implementation class for «name» view.
  */
public class «gwtActivityImplClass()» extends «fqnActivityBaseClass()» implements «fqnPresenterInterface()» {

	«loggerDeclaration(gwtActivityImplClass())»
	
	«fqnGwtViewInterface()» display;
	
	@com.google.inject.Inject
	public «gwtActivityImplClass()»(«fqnGwtViewInterface()» theDisplay,
		com.google.gwt.event.shared.EventBus eventBus,
		com.google.gwt.place.shared.PlaceController placeController
		«EXPAND serviceConstructorArgs FOR this») {
		super(eventBus, theDisplay, placeController
		«IF serviceProxies.size > 0»,«FOREACH serviceProxies AS service SEPARATOR ", "»«service.name.toFirstLower()»«ENDFOREACH»«ENDIF»
		);
		display = theDisplay;
		
		bind();
	}
	
	protected void bind() {
	}

}
«ENDDEFINE»