«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»


«REM»Activity base class«ENDREM»
«DEFINE activityBase FOR View»
«FILE javaFileName(fqnActivityBaseClass())»

package «gwtActivitiesPackage()»;

public abstract class «gwtActivityBaseClass()» extends «gwtFrameworkActivityBaseClass()» {

	«loggerDeclaration(gwtActivityBaseClass())»

	protected final com.google.gwt.event.shared.EventBus eventBus;
	protected final com.google.gwt.place.shared.PlaceController placeController;
	
	protected final «fqnGwtViewInterface()» view;
	
	«EXPAND serviceDeclaration FOREACH serviceProxies»

	public «gwtActivityBaseClass()»(com.google.gwt.event.shared.EventBus eventBus,
		«gwtViewInterface()» theView,
		com.google.gwt.place.shared.PlaceController placeController) {
		super();
		
		this.view = theView;
		this.eventBus = eventBus;
		this.placeController = placeController;
	}


	/**
	 *
	 */
	@Override
	public void start(com.google.gwt.user.client.ui.AcceptsOneWidget panel, com.google.gwt.event.shared.EventBus theEventBus) {
		init();
		bind();

		//load model
		loadModel();
		
		//set the view widget into the panel
		panel.setWidget(getViewAsWidget());
		
		registerValidators();
	}

	protected abstract void registerValidators();
	
	protected void init() {
		getView().initView();
		
		populateFromPlace();
		
	}

	protected abstract void populateFromPlace();

	/**
	 * Bind to the view (register event handlers, etc) 
	 */
	protected void bind() {
	«FOREACH widgets AS w»
		bind«w.name.toFirstUpper()»();
	«ENDFOREACH»
	}
	
	«EXPAND widgetBindMethod FOREACH widgets»
	
	protected abstract void loadModel();
	
	protected com.google.gwt.user.client.ui.Widget getViewAsWidget() {
		return view.asWidget();
	}
	
	protected «gwtViewInterface()» getView() {
		return view;
	}
	

	public void clearData() {
		«EXPAND widgetClearCall FOREACH widgets»
	}
	
}
 
«ENDFILE»
«ENDDEFINE» 

«REM»Methods to bind activity to view«ENDREM»
«DEFINE widgetBindMethod FOR Widget»
	protected void bind«this.name.toFirstUpper()»() {	
	}

«ENDDEFINE»

«DEFINE widgetBindMethod FOR LinkWidget»
«IF this.toView != null»

	protected void bind«this.name.toFirstUpper()»() {
   	view.«widgetClickHandlersExpr()».addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() {
			
			@java.lang.Override
			public void onClick(com.google.gwt.event.dom.client.ClickEvent event) {
				placeController.goTo(new «this.toView.fqnPlaceClass()»());
			}
		});
	}
«ENDIF»
«ENDDEFINE»

«REM»Methods to clear data from widgets«ENDREM»
«DEFINE widgetClearCall FOR Widget»
«ENDDEFINE»

«DEFINE widgetClearCall FOR InputTextWidget»
	view.get«name.toFirstUpper()»HasText().setText("");
«ENDDEFINE»


«DEFINE widgetClearCall FOR TableWidget»
    view.get«name.toFirstUpper()»HasData().setRowData(0, new java.util.ArrayList<«fqnTableForClass()»>());
«ENDDEFINE»



«REM»Declaration of service interface to be used by activity«ENDREM»
«DEFINE serviceDeclaration FOR Service»
    /**
     * Create a remote service proxy to talk to the server-side «name» service.
     */
    protected final «gwtServiceAsyncInterface()» «name.toFirstLower()» = com.google.gwt.core.client.GWT
                    .create(«gwtServiceAsyncInterface()».class);

«ENDDEFINE»




«REM»Activity implementation class«ENDREM»
«DEFINE activityImpl FOR View»
«FILE javaFileName(fqnActivityImplClass()) TO_SRC»
«EXPAND activityImplBody FOR this»
«ENDFILE»
«ENDDEFINE» 

«DEFINE activityImplForUnitTest FOR View»
«FILE javaFileName(fqnActivityImplClass())»
«EXPAND activityImplBody FOR this»
«ENDFILE»
«ENDDEFINE» 

«DEFINE activityImplBody FOR View»
package «gwtActivitiesPackage()»;

public class «gwtActivityImplClass()» extends «fqnActivityBaseClass()» {

	«loggerDeclaration(gwtActivityImplClass())»
	
	«fqnGwtViewInterface()» display;
	
	public «gwtActivityImplClass()»(«fqnGwtViewInterface()» theDisplay,
		com.google.gwt.event.shared.EventBus eventBus,
		com.google.gwt.place.shared.PlaceController placeController) {
		super(eventBus, theDisplay, placeController);
		display = theDisplay;
		
		bind();
	}
	
	protected void bind() {
	}

}
«ENDDEFINE»