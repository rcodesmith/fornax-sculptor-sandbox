«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»

«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::gwtuihelpers»
«EXTENSION extensions::gwt::sofeauihelpers»


«DEFINE initBehavior FOR UiBehavior»
	// TODO: No behavior init for «name».  There should be.
«ENDDEFINE»

«DEFINE initBehavior FOR CustomBehavior»
	«IF formatJavaDoc() == "" -»
		/**
		 * «name» behavior class
		 */
	«ELSE -»
		«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("custom")» «name»Behavior = null;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("custom")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("custom")»(new org.fornax.cartridges.sculptor.framework.gwt.client.behavior.AsyncInvocable<Boolean>() {
		
			@Override
			public void invoke(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.BehaviorDispatcher.Event event, 
				com.google.gwt.user.client.rpc.AsyncCallback<Boolean> callback) {
				«name»(callback);
			}
		});
	}

	/**
	 * Custom method for the «name» behavior.  Must be overridden by derived class.
	 */
	protected abstract void «name»(com.google.gwt.user.client.rpc.AsyncCallback<Boolean> callback);


«ENDDEFINE»

«DEFINE initBehavior FOR UpdateTableBehavior»
	«IF formatJavaDoc() == "" -»
		/**
		 * «name» behavior class
		 */
	«ELSE -»
		«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("updateTable")»<«this.table.fqnTableForClass()»> «name»Behavior = null;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("updateTable")»<«this.table.fqnTableForClass()»> create«name.toFirstUpper()»Behavior() {
	
		«IF this.table.paging»
			return new «getBehaviorClass("updateTable")»<«this.table.fqnTableForClass()»>("«name»",
					view.get«table.name.toFirstUpper()»HasData(),
					new «getBehaviorClass("updateTable")».LongCallable() {

						@Override
						public void getValue(
								com.google.gwt.user.client.rpc.AsyncCallback<Long> resultsCallback) {

							«name»BehaviorGetTotalNumRows(resultsCallback);
						}
			});    		
		«ELSE»
			return new «getBehaviorClass("updateTable")»<«this.table.fqnTableForClass()»>("«name»",
					view.get«table.name.toFirstUpper()»HasData(),
					new «getBehaviorClass("updateTable")».DataSource<«this.table.fqnTableForClass()»>() {

						@Override
						public void getData(
								com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<«this.table.fqnTableForClass()»>> resultsCallback) {

							«name»BehaviorGetData(resultsCallback);
						}
			});    	
		«ENDIF»
 	}


	«IF this.table.paging»
		/**
		 * Method to get the updated total row count for table «this.table.name» as part of behavior «name»
		 */
		protected abstract void «name»BehaviorGetTotalNumRows(com.google.gwt.user.client.rpc.AsyncCallback<Long> callback);
	«ELSE»
		/**
		 * Method to get the updated data for table «this.table.name» as part of behavior «name»
		 */
		protected abstract void «name»BehaviorGetData(com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<«this.table.fqnTableForClass()»>> callback);
	
	«ENDIF»
«ENDDEFINE»

«DEFINE initBehavior FOR PopulateListBoxBehavior»

	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("populateListBox")»<«this.widget.getTypedWidgetTargetType()»> «name»Behavior = null;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("populateListBox")»<«this.widget.getTypedWidgetTargetType()»> create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("populateListBox")»<«this.widget.getTypedWidgetTargetType()»>("«name»",
				view.get«widget.name.toFirstUpper()»HasSelectableItems(),
				new org.fornax.cartridges.sculptor.framework.gwt.client.behavior.AsyncInvocable<java.util.Collection<«this.widget.getTypedWidgetTargetType()»>>() {

			@Override
			public void invoke(org.fornax.cartridges.sculptor.framework.gwt.client.behavior.BehaviorDispatcher.Event event, 
				com.google.gwt.user.client.rpc.AsyncCallback<java.util.Collection<«this.widget.getTypedWidgetTargetType()»>> callback) {
				«name»BehaviorGetData(callback);
			}

		});    	
 	}


	/**
	 * Method to get the updated data for list box «this.widget.name» as part of behavior «name»
	 */
	protected abstract void «name»BehaviorGetData(com.google.gwt.user.client.rpc.AsyncCallback<java.util.Collection<«this.widget.getTypedWidgetTargetType()»>> callback);

«ENDDEFINE»

«DEFINE initBehavior FOR MarkDirtyBehavior»

	«IF formatJavaDoc() == "" -»
		/**
		 * «name» behavior class
		 */
	«ELSE -»
		«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("markDirty")» «name»Behavior  = null;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("markDirty")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("markDirty")»("«name»",
				this, «markSpecificObj»);    	
 	}
«ENDDEFINE»

«DEFINE initBehavior FOR MarkCleanBehavior»

	«IF formatJavaDoc() == "" -»
	/**
	 * «name» behavior class
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("markClean")» «name»Behavior = null;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("markClean")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("markClean")»("«name»",
				this);    	
 	}
«ENDDEFINE»

«DEFINE initBehavior FOR WarnIfDirtyBehavior»

	«IF formatJavaDoc() == "" -»
		/**
		 * «name» behavior class
		 */
	«ELSE -»
		«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("warnIfDirty")» «name»Behavior = null;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("warnIfDirty")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("warnIfDirty")»("«name»", "«message»",
				this, view);
 	}
«ENDDEFINE»

«DEFINE initBehavior FOR DisplayMessageBehavior»

	«IF formatJavaDoc() == "" -»
		/**
		 * «name» behavior class
		 */
	«ELSE -»
		«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("displayMessage")» «name»Behavior = null;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("displayMessage")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("displayMessage")»("«name»", "«message»", «messageId == null? "null" : "\"" + messageId + "\""»,
				view);
 	}
«ENDDEFINE»


«DEFINE initBehavior FOR GoBackBehavior»

	«IF formatJavaDoc() == "" -»
		/**
		 * «name» behavior class
		 */
	«ELSE -»
		«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("goBack")» «name»Behavior = null;

	«IF formatJavaDoc() == "" -»
	/**
	 * Method to create the «name» behavior
	 */
	«ELSE -»
	«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("goBack")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("goBack")»("«name»", this);
 	}
«ENDDEFINE»

«DEFINE initBehavior FOR UpdateAttributeBehavior»

	«IF formatJavaDoc() == "" -»
		/**
		 * «name» behavior class
		 */
	«ELSE -»
		«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("updateAttribute")» «name»Behavior = null;

	«IF formatJavaDoc() == "" -»
		/**
		 * Method to create the «name» behavior
		 */
	«ELSE -»
		«formatJavaDoc()»
	«ENDIF -»
	protected «getBehaviorClass("updateAttribute")» create«name.toFirstUpper()»Behavior() {
		return new «getBehaviorClass("updateAttribute")»("«name»", new org.fornax.cartridges.sculptor.framework.gwt.client.behavior.UpdateAttributeBehavior.Invocable() {

			@Override
			public void invoke(
					org.fornax.cartridges.sculptor.framework.gwt.client.behavior.BehaviorDispatcher.Event event) {
				«IF targetClass != null»
					«targetClass.fqnGwtDto()» targetObj = («targetClass.fqnGwtDto()»)event.getObj();
					«REM»TODO: The following won't work yet - the behavior should have property path elements rather than propertyPath String«ENDREM»
					«getPropertyPathSetterExpression("targetObj", targetClass, propertyPath)»((«propertyPath.getLeafType()»)event.getValue());
					
				«ELSE»
					«FOREACH bindings AS binding»
						«EXPAND invokeUpdateAttributeSetter(this) FOR binding.widget»
					«ENDFOREACH»
				«ENDIF»
			}
		});
 	}
«ENDDEFINE»

«REM»
Generate invoke update attribute setter when an update was made from a ListBoxWidget.
We need to find the target class of the containing widget.
If the containing widget is a table, then the table holds the target class.
TODO: Do this more generically & support getting a target class from a containing panel/view also.
«ENDREM»
«DEFINE invokeUpdateAttributeSetter(UpdateAttributeBehavior behavior) FOR ListBoxWidget»
	«IF WidgetTableColumn.isInstance(this.eContainer)»
		«EXPAND invokeUpdateAttributeSetter(behavior, this.eContainer.eContainer) FOR this»
	«ENDIF»
«ENDDEFINE»

«REM»
Generate invoke update attribute setter when an update was made from a ListBoxWidget that is contained in a table.
«ENDREM»
«DEFINE invokeUpdateAttributeSetter(UpdateAttributeBehavior behavior, TableWidget table) FOR ListBoxWidget»
	«table.for.fqnGwtDto()» targetObj = («table.for.fqnGwtDto()»)event.getObj();
«REM»
«getSetterPathExpression("targetObj", table.for, propertyPath)»((String)event.getValue());
«ENDREM»
	«this.getSourceRefSetterExpression(table.for, "targetObj")»((«this.forProperty != null ? this.forProperty.getLeafType() : "String"»)event.getValue());
«ENDDEFINE»

