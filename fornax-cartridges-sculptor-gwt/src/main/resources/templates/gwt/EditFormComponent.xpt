
«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»

«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::sofeauihelpers»

«DEFINE editFormComponents FOR GuiApplication»

	«EXPAND editFormCompositeClass FOREACH this.modules.userTasks.typeSelect(UserTask)»
	«EXPAND editFormCompositeTemplate FOREACH this.modules.userTasks.typeSelect(UserTask)»

«ENDDEFINE»

«DEFINE editFormCompositeTemplate FOR UserTask»
«FILE gwtEditFormBaseTemplateFilePath(this)»
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:g="urn:import:com.google.gwt.user.client.ui"
	xmlns:p1="urn:import:com.google.gwt.user.cellview.client"
	xmlns:d="urn:import:com.google.gwt.user.datepicker.client">
	<ui:style>
		.important {
			font-weight: bold;
		}
	</ui:style>
	<g:HTMLPanel>
		<g:VerticalPanel>
			<g:FormPanel>
				<g:VerticalPanel>
				
«FOREACH getAllBusinessViewDataProperties() AS prop»
				<g:HorizontalPanel>		
					<g:Label text="«prop.name.toFirstUpper()»" />
					<«prop.resolveGwtWidgetBinderReference()» ui:field="«prop.fieldName()»" «IF prop.widgetHasNameProp()» name="«prop.fieldName()»"«ENDIF»/>
				</g:HorizontalPanel>	
«ENDFOREACH»
			
				<g:HorizontalPanel>		
					<g:Button ui:field="saveButton" text="Save"></g:Button>
					<g:Button ui:field="cancelButton" text="Cancel"></g:Button>
					
				</g:HorizontalPanel>	
				
				</g:VerticalPanel>
			</g:FormPanel>
			
		</g:VerticalPanel>
		
	</g:HTMLPanel>
	
</ui:UiBinder> 
«ENDFILE»
«ENDDEFINE»



«DEFINE editFormCompositeClass FOR UserTask»
«FILE javaFileName(fqnGwtEditFormWidgetBaseClass())»
«javaHeader()»
package «gwtWidgetsPackage(this)»;

public abstract class «gwtEditFormWidgetBaseClass()» extends com.google.gwt.user.client.ui.Composite {
	private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger(«gwtEditFormWidgetBaseClass()».class.getName());


    interface «gwtEditFormWidgetBaseClass()»UiBinder extends com.google.gwt.uibinder.client.UiBinder<Widget, «fqnGwtEditFormWidgetBaseClass()»> {}

    private static «gwtEditFormWidgetBaseClass()»UiBinder uiBinder = com.google.gwt.core.client.GWT
    	.create(«gwtEditFormWidgetBaseClass()»UiBinder.class);

	private com.google.gwt.event.shared.HandlerManager handlerManager = new com.google.gwt.event.shared.HandlerManager(this);

	public «gwtEditFormWidgetBaseClass()»() {
		initWidget(getWidget());
	}
	
    protected com.google.gwt.user.client.ui.Widget getWidget() {
    	return uiBinder.createAndBindUi(this);
    }
    
	«FOREACH getAllBusinessViewDataProperties() AS prop»
		«EXPAND gwtWidget FOR prop-»
	«ENDFOREACH»

	@com.google.gwt.uibinder.client.UiField
	com.google.gwt.user.client.ui.Button saveButton;

    protected com.google.gwt.event.shared.HandlerManager getHandlerManager() {
		return handlerManager;
	}
	
	public void fireEvent(com.google.gwt.event.shared.GwtEvent<?> event) {
		handlerManager.fireEvent(event);
	}
	
    public com.google.gwt.event.shared.HandlerRegistration addCommandHandler(
            org.fornax.cartridges.sculptor.framework.gwt.client.GwtCommandEvent.GwtCommandEventHandler handler) {
        return handlerManager.addHandler(org.fornax.cartridges.sculptor.framework.gwt.client.GwtCommandEvent.TYPE, handler);
    }
    
	
	public void populateEditorFields(«this.for.fqnGwtDto()» dto) {
		«FOREACH getAllBusinessViewDataProperties() AS prop»
			«EXPAND populateField FOR prop»
		«ENDFOREACH»
	}
	
	public void clear() {
		LOG.finer("clear()");
		«FOREACH getAllBusinessViewDataProperties() AS prop»
			«EXPAND clearField FOR prop»
		«ENDFOREACH»
	}
	

	@com.google.gwt.uibinder.client.UiHandler("saveButton")
	void onClick(com.google.gwt.event.dom.client.ClickEvent e) {
	
«REM»Don't attempt to generate a separate command if this domain object is a command«ENDREM»
«IF !CommandEvent.isInstance(this.for)»
		«this.fqnAddCommand()» cmd = getCommand(e);
		
		fireEvent(new org.fornax.cartridges.sculptor.framework.gwt.client.GwtCommandEvent(cmd));
«ENDIF»
	}

    @com.google.gwt.uibinder.client.UiHandler("cancelButton")
    void onCancelClick(com.google.gwt.event.dom.client.ClickEvent e) {
    	LOG.finer("onCancelClick()");
    	fireEvent(new org.fornax.cartridges.sculptor.framework.gwt.client.CancelEvent());
    }

    
    public com.google.gwt.event.shared.HandlerRegistration addCancelHandler(org.fornax.cartridges.sculptor.framework.gwt.client.CancelEvent.CancelEventHandler handler) {
    	return handlerManager.addHandler(org.fornax.cartridges.sculptor.framework.gwt.client.CancelEvent.TYPE, handler);
    }

	
«REM»Don't attempt to generate a separate command if this domain object is a command«ENDREM»
«IF !CommandEvent.isInstance(this.for)»
	protected abstract «this.fqnAddCommand()» getCommand(com.google.gwt.event.dom.client.ClickEvent clickEvent);
«ENDIF»

}
«ENDFILE»
«ENDDEFINE»


«REM»Populate the field widget from the DTO values«ENDREM»
«DEFINE populateField FOR EnumViewProperty»
	org.fornax.cartridges.sculptor.framework.gwt.client.ListBoxUtils.populateListBox(«this.reference.fqnGwtDto()».getEnumNames(),
		«fieldName()», dto.get«name.toFirstUpper()»().getName());
«ENDDEFINE»

«DEFINE populateField FOR ViewDataProperty»
	«IF isDateOrDateTime() || isBoolean()»
		«fieldName()».setValue(«getDtoPropertyPath("dto")»);			
	«ELSE»
		«fieldName()».setText(«getDtoPropertyPath("dto")»);			
	«ENDIF»
«ENDDEFINE»


«DEFINE clearField FOR ViewDataProperty»
	«IF isDateOrDateTime() || isBoolean()»
		«fieldName()».setValue(null);			
	«ELSE»
		«fieldName()».setValue("");			
	«ENDIF»
«ENDDEFINE»

«DEFINE clearField FOR EnumViewProperty»
	«fieldName()».setSelectedIndex(-1);			
«ENDDEFINE»



«REM»Declaration of GWT widget classes for each property«ENDREM»

«DEFINE gwtWidget FOR ViewDataProperty»

	@com.google.gwt.uibinder.client.UiField
	protected «resolveGwtWidgetType()» «this.fieldName()»;

«ENDDEFINE»

«DEFINE gwtWidget FOR EnumViewProperty»
	@com.google.gwt.uibinder.client.UiField
	protected com.google.gwt.user.client.ui.ListBox «this.fieldName()»;
«ENDDEFINE»