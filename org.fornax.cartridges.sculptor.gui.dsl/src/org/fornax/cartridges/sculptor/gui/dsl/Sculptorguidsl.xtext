grammar org.fornax.cartridges.sculptor.gui.dsl.Sculptorguidsl with org.eclipse.xtext.common.Terminals

import "http://www.fornax.org/cartridges/sculptor/dsl/sculptordsl" as mm

generate sculptorguidsl "http://www.fornax.org/cartridges/sculptor/gui/dsl/sculptorguidsl"

DslGuiApplication :
	(imports+=DslImport)*
	(doc=STRING)?
	'gui' name=ID 'for' guiForApplication=[mm::DslApplication]  '{'
		("hint" "=" hint=STRING)?
	   //TODO - later release
	   //(topUserTasks+=DslUserTask)*
       (modules+=DslGuiModule)*
	'}';
	
DslImport :
	'import' importURI=STRING;
	
DslGuiModule:
	'Module' 'for' for=[mm::DslModule] '{'
		("basePackage" "=" basePackage=DslGuiJavaIdentifier )?
		("hint" "=" hint=STRING)?
		(serviceDependencies+=DslGuiServiceDependency)*
		(userTasks+=DslUserTask)*
		(skipUserTasks+=DslSkipUserTask)*
		(skipDomainObjects+=DslSkipDomainObject)*
		(views+=DslView)*
		(events+=DslGuiEvent)*
		(behaviors+=DslUiBehavior)*
		(conditions+=DslUiCondition)*
		(dtos+=DslGuiDto)*
	'}';

	 
DslUserTask:
	DslCreateTask | DslViewTask | DslUpdateTask | DslDeleteTask | DslListTask | DslAddTask;

DslCreateTask : 
	'CreateTask' 'for' for=[mm::DslSimpleDomainObject] '{'
		(((gapClass?="gap") | (noGapClass?="nogap"))? &
		 ("hint" "=" hint=STRING)?)
		(viewProperties+=DslGuiViewProperty)*
		(subtasks+=DslGuiListSubtask)*
		((createWith=DslCreateWith)? &
		 (populateWith=DslPopulateWith)?
		)
	'}';

DslViewTask : 
	'ViewTask' 'for' for=[mm::DslSimpleDomainObject] '{'
		(((gapClass?="gap") | (noGapClass?="nogap"))? &
		 ("hint" "=" hint=STRING)?)
		(viewProperties+=DslGuiViewProperty)*
		(subtasks+=DslGuiListSubtask)*
		(findWith=DslFindWith)?
	'}';

DslUpdateTask : 
	'UpdateTask' 'for' for=[mm::DslSimpleDomainObject] '{'
		(((gapClass?="gap") | (noGapClass?="nogap"))? &
		 ("hint" "=" hint=STRING)?)
		(viewProperties+=DslGuiViewProperty)*
		(subtasks+=DslGuiListSubtask)*
		((findWith=DslFindWith)? &
		 (updateWith=DslUpdateWith)? &
		 (populateWith=DslPopulateWith)?
		)
	'}';

DslDeleteTask : 
	'DeleteTask' 'for' for=[mm::DslSimpleDomainObject] '{'
		(((gapClass?="gap") | (noGapClass?="nogap"))? &
		 ("hint" "=" hint=STRING)?)
		(viewProperties+=DslGuiViewProperty)*
		(subtasks+=DslGuiListSubtask)*
		((findWith=DslFindWith)? &
		 (deleteWith=DslDeleteWith)?
		)
		
	'}';

DslListTask : 
	'ListTask' 'for' for=[mm::DslSimpleDomainObject] '{'
		(((gapClass?="gap") | (noGapClass?="nogap"))? &
		 ("hint" "=" hint=STRING)?)
		(viewProperties+=DslGuiViewProperty)*
		(subtasks+=DslGuiListSubtask)*
		(searchWith=DslSearchWith)?
	'}';

DslAddTask : 
	'AddTask' 'for' for=[mm::DslSimpleDomainObject] '{'
		(((gapClass?="gap") | (noGapClass?="nogap"))? &
		 ("hint" "=" hint=STRING)?)
		(viewProperties+=DslGuiViewProperty)*
		(subtasks+=DslGuiListSubtask)*
		(findWith=DslFindWith)?
	'}';

DslGuiViewProperty :
	'-' for=[mm::DslAnyProperty]
	('.' basicTypeProperty=[mm::DslAnyProperty])?
	("hint" "=" hint=STRING)?;

// TODO right now we only support list subtask, but the intention was to be able to have 
//      different subtasks like this
//DslGuiSubtask :
	//(DslGuiListSubtask | DslGuiSkipCreateSubtask | DslGuiSkipDeleteSubtask);

DslGuiListSubtask :
	'list' reference=[mm::DslAnyProperty] // DslReference | DslDtoReference
	(forTarget=DslGuiListSubtaskForTarget)?
	("hint" "=" hint=STRING)?
	'use' 'attributes' (previewProperties+=DslGuiPreviewProperty)*;

DslGuiListSubtaskForTarget :
	'for' 'target' target=[mm::DslSimpleDomainObject];
	
	
// skip subtask will be done later
//DslGuiSkipCreateSubtask :
//	'skip' 'create' reference=[mm::DslReference];

//DslGuiSkipDeleteSubtask :
//	'skip' 'delete' reference=[mm::DslReference];
	
DslGuiPreviewProperty :
	for=[mm::DslAnyProperty]
	('.' basicTypeProperty=[mm::DslAnyProperty])?
	(',')?;

	
DslCreateWith :
	'createWith' service=[mm::DslService] '.' operation=[mm::DslServiceOperation];
	
DslFindWith :
	'findWith' service=[mm::DslService] '.' operation=[mm::DslServiceOperation];

DslUpdateWith :
	'updateWith' service=[mm::DslService] '.' operation=[mm::DslServiceOperation];

DslDeleteWith :
	'deleteWith' service=[mm::DslService] '.' operation=[mm::DslServiceOperation];

DslSearchWith :
	'searchWith' service=[mm::DslService] '.' operation=[mm::DslServiceOperation];

DslPopulateWith :
	'populateWith' service=[mm::DslService] '.' operation=[mm::DslServiceOperation];

DslSkipDomainObject :
	'skip' do=[mm::DslSimpleDomainObject];

DslSkipUserTask :
	DslSkipCreateTask | DslSkipUpdateTask | DslSkipDeleteTask | DslSkipListTask | DslSkipAddTask;
	
DslSkipCreateTask :
	'skip' 'CreateTask' 'for' for=[mm::DslSimpleDomainObject]; 

DslSkipUpdateTask :
	'skip' 'UpdateTask' 'for' for=[mm::DslSimpleDomainObject]; 

DslSkipDeleteTask :
	'skip' 'DeleteTask' 'for' for=[mm::DslSimpleDomainObject]; 

DslSkipListTask :
	'skip' 'ListTask' 'for' for=[mm::DslSimpleDomainObject]; 

DslSkipAddTask :
	'skip' 'AddTask' 'for' for=[mm::DslSimpleDomainObject]; 

DslView:
  (doc=STRING)?
	"View" name=ID ("extends" (("@"extends=[DslView]) | (extendsName=DslGuiJavaIdentifier)))? ('for' for=[mm::DslSimpleDomainObject])? "{"
		("hint" "=" hint=STRING)?
	
		('label' '=' label=STRING)?
		(serviceDependencies+=DslGuiServiceDependency)*
		(publishedEvents+=DslPublishedEvent)*

		("parameters" "{"
			(parameters+=DslViewParameter)*
		"}"
		)?

		("contents" "{"
			(widgets+=DslWidget)*
		"}"		
		)?

		(behaviors+=DslUiBehavior)*
		(conditions+=DslUiCondition)*
		
	'}';

DslViewParameter :
  (doc=STRING)?
  (type=DslGuiType  name=ID ((nullable?="nullable") | (NOT "nullable"))?
	) (";")?;

DslPublishedEvent :
	'publish' event=[mm::DslEvent];

DslGuiServiceDependency :
  ('>'|'inject') ("@"dependency=[mm::DslService]);


///////////////////////////////////////////////////////////////////////////////////////
// Widget definitions
//////////////////////////////////////////////////////////////////////////////////////


DslWidget : 
	DslInputTextWidget | DslButtonWidget | DslInformationalTextWidget | DslTableWidget | DslInputDateWidget | DslNumberSpinnerWidget | DslTextAreaWidget
	| DslRichTextAreaWidget | DslAutocompleteWidget | DslRadioButtonsWidget | DslLinkWidget | DslPanelWidget | DslCustomWidget | DslListBoxWidget;
	

DslPanelWidget :
  (doc=STRING)?
	"panel" name=ID ('for' for=[mm::DslSimpleDomainObject])? "{"
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
		("contents" "{"
			(widgets+=DslWidget)*
		"}"
		)?
	'}';
		
DslInputTextWidget :
  (doc=STRING)?
	'inputText' name=ID  (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
	'}';
	
DslListBoxWidget :
  (doc=STRING)?
	'listBox' name=ID  ('for' for=[mm::DslSimpleDomainObject])? (sourceRef = DslSourceReference)? ('forEnum' forEnum=[mm::DslEnum])? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnSelectItem)?
		(behaviorBindings+=DslOnHover)?
	'}';

DslTextAreaWidget :
  (doc=STRING)?
	'textArea' name=ID  (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
	'}';

DslAutocompleteWidget :
  (doc=STRING)?
	'autocomplete' name=ID  ('for' for=[mm::DslSimpleDomainObject])? (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnSelectItem)?
		(behaviorBindings+=DslOnHover)?
	'}';

DslRadioButtonsWidget :
  (doc=STRING)?
	'radioButtons' name=ID  (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
	'}';

DslRichTextAreaWidget :
  (doc=STRING)?
	'richText' name=ID  (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
	'}';

DslInputDateWidget :
  (doc=STRING)?
	'inputDate' name=ID  (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
	'}';
 
 DslNumberSpinnerWidget :
 (doc=STRING)?
	'numberSpinner' name=ID  (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
	'}';
 
	
DslButtonWidget :
  (doc=STRING)?
	'button' name=ID '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('image' '=' image=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(onClick=DslOnClick)?
		(behaviorBindings+=DslOnHover)?
	'}';

DslInformationalTextWidget :
  (doc=STRING)?
	'informationalText' name=ID (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
	'}';

DslSourceReference :
	('forOp' forOp=[mm::DslDomainObjectOperation]) | ('forProperty' forProperty=[mm::DslProperty]);

DslLinkWidget :
  (doc=STRING)?
	'link' name=ID ('toView' toView=[DslView])? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(onClick=DslOnClick)?
		(behaviorBindings+=DslOnHover)?
	'}';
	
DslForProperty :
	'forProperty' domainObj=[mm::DslSimpleDomainObject] '.' property=[mm::DslProperty];

DslTableWidget :
  (doc=STRING)?
	'table' name=ID ('for' for=[mm::DslSimpleDomainObject])? (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?	
		('widgetType' '=' widgetType=STRING)?		
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		("size" '=' size=INT)?
		((paging?="paging") | (NOT "paging"))?
		(behaviorBindings+=DslOnHover)?
		("columns" "{"
			(columns+=DslTableColumn)*
		"}")?
	'}';
	
DslTableColumn : DslSimpleTableColumn | DslWidgetTableColumn;

DslSimpleTableColumn :
	name=ID ("hint" "=" hint=STRING)? ('label' '=' label=STRING)? ('type' '=' columnType=DslColumnType)? (sourceRef = DslSourceReference)?
		((filterable?="filterable") | (NOT "filterable"))? ((sortable?="sortable") | (NOT "sortable"))?
		((editable?="editable") | (NOT "editable"))?
		(behaviorBindings+=DslOnClick)? (behaviorBindings+=DslOnHover)? ";" ;

DslWidgetTableColumn :
	'widget' ("hint" "=" hint=STRING)? ((filterable?="filterable") | (NOT "filterable"))? ((sortable?="sortable") | (NOT "sortable"))?
		((editable?="editable") | (NOT "editable"))?
		widget=DslWidget;



DslCustomWidget :
  (doc=STRING)?
	'custom' name=ID  (sourceRef = DslSourceReference)? '{'
		("hint" "=" hint=STRING)?
		('label' '=' label=STRING)?
		('widgetType' '=' widgetType=STRING)?
		('enabled' enabled=[DslUiCondition])?
		('visible' visible=[DslUiCondition])?
		(behaviorBindings+=DslOnHover)?
	'}';
	
/////////////////////////////////////////////////////////////////////////
// Behavior bindings
/////////////////////////////////////////////////////////////////////////

DslBehaviorBinding :
	DslOnClick | DslOnHover | DslOnSelectItem;
	
DslOnClick :
	'onClick' '=' behaviors+=[DslUiBehavior] ("," behaviors+=[DslUiBehavior])*;

DslOnHover :
	'onHover' '=' behaviors+=[DslUiBehavior] ("," behaviors+=[DslUiBehavior])*;

DslOnSelectItem :
	'onSelectItem' '=' behaviors+=[DslUiBehavior] ("," behaviors+=[DslUiBehavior])*;
	


	
DslColumnType :
	("Text"|"Button"|"Date"|"Custom"|"Link");
	
DslGuiEvent :
  (doc=STRING)? 
  "Event" name=ID "{"
    ((attributes+=DslGuiAttribute) )*
  "}";

DslGuiDto :
  (doc=STRING)? 
  "GuiDto" 'for' ("@"for=[mm::DslDomainObject]) "{"
  	((gapClass?="gap") | (noGapClass?="nogap"))?
  "}";


//////////////////////////////////////////////////////////////
// Behaviors
//////////////////////////////////////////////////////////////

DslUiBehavior :
	DslPopulatePanelBehavior | DslNavigateToViewBehavior | DslUpdateTableBehavior | DslConfirmMessageBehavior | DslCustomBehavior  | DslCompositeBehavior;
	
DslPopulatePanelBehavior :
  (doc=STRING)?
  "UiBehavior" "PopulatePanel" name=ID "{"
	("hint" "=" hint=STRING)?
    'panel' '=' panel=[DslPanelWidget]    
  "}";

DslNavigateToViewBehavior :
  (doc=STRING)?
  "UiBehavior" "NavigateToView" name=ID "{"
	("hint" "=" hint=STRING)?
    'view' '=' view=[DslView]
  "}";

DslUpdateTableBehavior :
  (doc=STRING)?
  "UiBehavior" "UpdateTable" name=ID "{"
	("hint" "=" hint=STRING)?
  	'table' '=' table=[DslTableWidget]
  "}";

DslConfirmMessageBehavior :
  (doc=STRING)?
  "UiBehavior" "ConfirmMessage" name=ID "{"
	("hint" "=" hint=STRING)?
  	('message' '=' message=STRING)?
  "}";

DslCustomBehavior :
  (doc=STRING)?
  "UiBehavior" "Custom" name=ID "{"
	  ("hint" "=" hint=STRING)?
  "}";

DslCompositeBehavior :
  (doc=STRING)?
  "UiBehavior" "Composite" name=ID "{"
	  ("hint" "=" hint=STRING)?
   	behaviors+=[DslUiBehavior] ("," behaviors+=[DslUiBehavior])*
  "}";
	


//////////////////////////////////////////////////////////////
// Conditions
//////////////////////////////////////////////////////////////

DslUiCondition :
	DslUiCustomCondition;

DslUiCustomCondition :
  (doc=STRING)?
  "Condition" "Custom" name=ID "{"
	  ("hint" "=" hint=STRING)?
  "}";





	
DslGuiAttribute :
  (doc=STRING)?
  (type=DslGuiType  name=ID
	) (";")?;


// TODO: This probably needs to be reduced down - not all are appropriate?
DslGuiType :
  ("String"|"int"|"Integer"|"long"|"Long"|"boolean"|"Boolean"|"Date"|"DateTime"|"Timestamp"|"BigDecimal"|"BigInteger"|
  	"double"|"Double"|"float"|"Float"|"Key"|"PagingPagarameter"|"PagedResult"|"Blob"|"Clob"|
  	DslGuiJavaIdentifier);

DslGuiJavaIdentifier :
  (ID ("." ID)*);
  
//DslGuiReference :
//  (doc=STRING)?
//  REF (collectionType=mm::DslCollectionType"<")? (("@")?domainObjectType=[mm::DslSimpleDomainObject]) (">")? name=ID
//    (((notChangeable?=NOT "changeable") | ("changeable"))? &
//     ((required?="required") | (NOT "required"))? &
//     (((nullable?="nullable") | (NOT "nullable")) ("=" nullableMessage=STRING)?)? &
//     ("hint" "=" hint=STRING)? &
//     ((notEmpty?="notEmpty") ("=" notEmptyMessage=STRING)?)? &
//     ("size" "=" size=STRING)? &
//     ((valid?="valid") ("=" validMessage=STRING)?)? &
//     ("validate" "=" validate=STRING)? )
//    (";")?;
    

terminal REF :
  ('-'|'reference');

terminal NOT :
  ('!'|'not');
  
  
 