/*
 * generated by Xtext
 */
package org.fornax.cartridges.sculptor.gui.dsl.scoping;

import static org.fornax.cartridges.sculptor.dsl.DslHelper.getExtends;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.fornax.cartridges.sculptor.dsl.scoping.Scope;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslAnyProperty;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslAttribute;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslBasicType;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslDataTransferObject;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslDomainObject;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslDtoProperty;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslDtoReference;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslEnum;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslModule;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslProperty;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslReference;
import org.fornax.cartridges.sculptor.dsl.sculptordsl.DslSimpleDomainObject;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslGuiApplication;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslGuiModule;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslPanelWidget;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslPropertyPathElement;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslSkipDomainObject;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslSourceReference;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslTableWidget;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslUiBehavior;
import org.fornax.cartridges.sculptor.gui.dsl.sculptorguidsl.DslView;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class SculptorguidslScopeProvider extends AbstractDeclarativeScopeProvider {
    // private final static Logger LOG =
    // Logger.getLogger(sculptorguidslScopeProvider.class);

//    IScope scope_DslUserTask_for(DslUserTask ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//
//        DslModule module = ((DslGuiModule) ctx.eContainer()).getFor();
//        addDomainObjectsInModule(elements, module);
//        return myScope;
//    }

    IScope scope_DslSkipDomainObject_do(DslSkipDomainObject ctx, EReference ref) {
        DslGuiModule module = (DslGuiModule) ctx.eContainer();
        return scope_DslSkipDomainObject_do(module, ref);
    }

    IScope scope_DslSkipDomainObject_do(DslGuiModule ctx, EReference ref) {
        Scope myScope = new Scope();
        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
        myScope.setElements(elements);

        addGuiDtosInModule(elements, ctx);
        return myScope;
    }
    
    /**
     * DslView.for reference should only refer to domain objects that have a corresponding DslGuiModule
     * TODO: Filter out domain objects that have been gui skipped
     */
    IScope scope_DslView_for(DslView ctx, EReference ref) {
        Scope myScope = new Scope();
        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
        myScope.setElements(elements);

        DslGuiModule module = (DslGuiModule) ctx.eContainer();
        DslGuiApplication guiApp = (DslGuiApplication) module.eContainer();
        addDomainObjectsInGuiApp(elements, guiApp);
        
        return myScope;
    }
    
    /**
     * A widget within a view should only refer to a behavior that is in the view, or the containing module, not other views
     * @param ctx
     * @param ref
     * @return
     */
    IScope scope_DslBehaviorBinding_behaviors(DslView ctx, EReference ref) {
        Scope myScope = new Scope();
        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
        myScope.setElements(elements);

        DslGuiModule module = (DslGuiModule) ctx.eContainer();
        
        for (DslUiBehavior behavior : module.getBehaviors()) {
            elements.add(new EObjectDescription(behavior.getName(), behavior, null));
		}

        for (DslUiBehavior behavior : ctx.getBehaviors()) {
            elements.add(new EObjectDescription(behavior.getName(), behavior, null));
		}

        return myScope;
    }
    
	/**
	 * A property path element should refer to a property that is contained within the parent path elements
	 * referred-to domain object, or innermost containing 'for' object.
	 * 
	 * TODO: For some reason, code completion isn't working when this is called - it's getting called with the parent path element.
	 * But final resolution of the scope is working, which is what's important.
	 * 
	 * @param ctx
	 * @param ref
	 * @return
	 */
	IScope scope_DslPropertyPathElement_property(DslPropertyPathElement ctx,
			EReference ref) {
		Scope myScope = new Scope();
		List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
		myScope.setElements(elements);

		DslSimpleDomainObject simpleDomainObj = null;

//		if(ctx.getRemainingPath() != null && ctx.getProperty() != null) {
//			simpleDomainObj = getSimpleDomainObjForProperty(ctx.getProperty());			
//		}
		if (ctx.eContainer() instanceof DslPropertyPathElement) {
			simpleDomainObj = getSimpleDomainObjForProperty(((DslPropertyPathElement) ctx
					.eContainer()).getProperty());
		} else {
			simpleDomainObj = findContainerWithForObject(ctx.eContainer());
		}
		
		if (simpleDomainObj == null) {
			return myScope;
		}
    	
    	addElementsForSimpleDomainObjectProperties(elements, simpleDomainObj);

        return myScope;
    }

	/**
	 * The first property reference within a source reference should be for a property in the innermost containing 'for' domain object 
	 * 
	 * @param ctx
	 * @param ref
	 * @return
	 */

	IScope scope_DslPropertyPathElement_property(DslSourceReference ctx,
			EReference ref) {
		Scope myScope = new Scope();
		List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
		myScope.setElements(elements);

		DslSimpleDomainObject simpleDomainObj = null;

		simpleDomainObj = findContainerWithForObject(ctx.eContainer());
		
		if (simpleDomainObj == null) {
			return myScope;
		}
    	
    	addElementsForSimpleDomainObjectProperties(elements, simpleDomainObj);

        return myScope;
    }

	private void addElementsForSimpleDomainObjectProperties(
			List<IEObjectDescription> elements,
			DslSimpleDomainObject simpleDomainObj) {
		if(simpleDomainObj instanceof DslDomainObject) {
    		DslDomainObject domainObj = (DslDomainObject)simpleDomainObj;
    		addProperties(elements, domainObj.getAttributes(), domainObj.getReferences());
    	} else if(simpleDomainObj instanceof DslBasicType) {
    		DslBasicType basicType = (DslBasicType)simpleDomainObj;
    		addProperties(elements, basicType.getAttributes(), basicType.getReferences());
    	}
	}

	private DslSimpleDomainObject getSimpleDomainObjForProperty(DslProperty prop) {
		if (!(prop instanceof DslReference)) {
			// Parent path element an attribute - nothing to chain off of
			return null;
		}
		DslReference dslRef = (DslReference) prop;
		if (dslRef.getDomainObjectType() == null) {
			return null;
		}

		return (DslSimpleDomainObject) dslRef.getDomainObjectType();

	}
	private void addProperties(List<IEObjectDescription> elements, EList<DslAttribute> attrs, EList<DslReference> refs) {
		for (DslReference dslReference : refs) {
			elements.add(new  EObjectDescription(dslReference.getName(), dslReference, null));
		}
		for (DslAttribute attr : attrs) {
			elements.add(new  EObjectDescription(attr.getName(), attr, null));
		}
	}
	
    /**
     * Walk up the eContainer() chain, looking for an object that has a 'for' object
     * @param obj
     * @return
     */
    private DslSimpleDomainObject findContainerWithForObject(EObject obj) {
    	EObject currObj = obj;
    	while(true) {
    		if(currObj instanceof DslTableWidget) {
    			DslTableWidget tableWidget = (DslTableWidget)currObj;
    			if(tableWidget.getFor() != null) {
    				return tableWidget.getFor();
    			}
    		} else if(currObj instanceof DslPanelWidget) {
    			DslPanelWidget panelWidget = (DslPanelWidget)currObj;
    			if(panelWidget.getFor() != null) {
    				return panelWidget.getFor();
    			}
    		} else if(currObj instanceof DslView) {
    			DslView view = (DslView)currObj; 
    			if(view.getFor() != null) {
    				return view.getFor();
    			} else {
    				// The view is as high as we'll go looking for 'for' objects.
    				return null;
    			}
    		}
    		currObj = currObj.eContainer();
    	}
    }
    
//    /**
//     * Walk forwards from rootPathElem and find domain object associated with ctxPathElement in order to return the scoped elements that may be added to
//     * from there.
//     * @param forObj
//     * @param rootPathElem
//     * @param ctxPathElement
//     * @return
//     */
//    IScope getScopeForPropertyPathElements(DslDomainObject forObj, DslPropertyPathElement rootPathElem, DslPropertyPathElement ctxPathElement) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//    	
//        DslDomainObject currObj = forObj;
//        DslProperty prop = null;
//        DslPropertyPathElement currPathElem = rootPathElem;
//        do {
//        	
//        	if(currPathElem.getProperty() instanceof DslReference) {
//        		
//        	}
//        } while(ctxPathElement != rootPathElem);
//        
//        return myScope;
//        
//    }
    
    
//    IScope scope_DslView_for(DslView ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//
//        DslGuiModule module = (DslGuiModule) ctx.eContainer();
//        DslGuiApplication guiApp = (DslGuiApplication) module.eContainer();
//        addDomainObjectsInGuiApp(elements, guiApp);
//        
//        return myScope;
//    }
    

//    IScope scope_DslSkipUserTask_for(DslSkipUserTask ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//
//        DslModule module = ((DslGuiModule) ctx.eContainer()).getFor();
//        addDomainObjectsInModule(elements, module);
//        return myScope;
//    }

    private void addGuiDtosInModule(List<IEObjectDescription> elements, DslGuiModule guiModule) {
    	DslModule module = guiModule.getFor();
        for (DslSimpleDomainObject each : module.getDomainObjects()) {
            if (each instanceof DslEnum || each instanceof DslBasicType) {
                continue;
            }
            
            // TODO: Commented out since it was causing cyclic error
//            if (GuidslHelper.skipGuiDto(guiModule, each)) {
//            	continue;
//            }
            
            elements.add(new EObjectDescription(each.getName(), each, null));
        }
    }

    
    private void addDomainObjectsInGuiApp(List<IEObjectDescription> elements, DslGuiApplication guiApp) {
    	for (DslGuiModule guiModule : guiApp.getModules()) {
			if(guiModule.getFor() != null) {
				addGuiDtosInModule(elements, guiModule);
			}
		}
    }

//    IScope scope_DslGuiViewProperty_for(DslGuiViewProperty ctx, EReference ref) {
//        DslUserTask userTask = ((DslUserTask) ctx.eContainer());
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        DslSimpleDomainObject domainObject = userTask.getFor();
//
//        populateProperties(elements, domainObject);
//
//        return myScope;
//    }

//    IScope scope_DslGuiPreviewProperty_for(DslGuiPreviewProperty ctx, EReference ref) {
//        DslGuiListSubtask listSubtask = (DslGuiListSubtask) ctx.eContainer();
//        return scope_DslGuiPreviewProperty_for(listSubtask, ref);
//    }

//    IScope scope_DslGuiPreviewProperty_for(DslGuiListSubtask listSubtask, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//
//        DslSimpleDomainObject domainObject;
//        if (listSubtask.getReference() instanceof DslReference) {
//            domainObject = ((listSubtask.getForTarget() == null) ? ((DslReference) listSubtask.getReference())
//                    .getDomainObjectType() : listSubtask.getForTarget().getTarget());
//        } else if (listSubtask.getReference() instanceof DslDtoReference) {
//            domainObject = ((listSubtask.getForTarget() == null) ? ((DslDtoReference) listSubtask.getReference())
//                    .getDomainObjectType() : listSubtask.getForTarget().getTarget());
//        } else {
//            return myScope;
//        }
//
//        populateProperties(elements, domainObject);
//
//        return myScope;
//    }

    private void populateProperties(List<IEObjectDescription> elements, DslSimpleDomainObject domainObject) {
        if (domainObject == null) {
            return;
        }
        if (domainObject instanceof DslDomainObject) {
            for (DslProperty property : EcoreUtil2.typeSelect(domainObject.eContents(), DslProperty.class)) {
                elements.add(new EObjectDescription(property.getName(), property, null));
            }
        } else if (domainObject instanceof DslDataTransferObject) {
            for (DslDtoProperty property : EcoreUtil2.typeSelect(domainObject.eContents(), DslDtoProperty.class)) {
                elements.add(new EObjectDescription(property.getName(), property, null));
            }
        }

        // recursive
        populateProperties(elements, getExtends(domainObject));
    }

//    IScope scope_DslGuiViewProperty_basicTypeProperty(DslGuiViewProperty ctx, EReference ref) {
//        DslAnyProperty forProperty = ctx.getFor();
//        return scope_basicTypeProperty(forProperty);
//    }
//
//    IScope scope_DslGuiPreviewProperty_basicTypeProperty(DslGuiPreviewProperty ctx, EReference ref) {
//        DslAnyProperty forProperty = ctx.getFor();
//        return scope_basicTypeProperty(forProperty);
//    }

    private IScope scope_basicTypeProperty(DslAnyProperty forProperty) {
        Scope myScope = new Scope();
        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
        myScope.setElements(elements);
        DslBasicType basicType = null;
        if (forProperty instanceof DslReference) {
            DslReference reference = (DslReference) forProperty;
            if (reference.getDomainObjectType() instanceof DslBasicType) {
                basicType = (DslBasicType) reference.getDomainObjectType();
            }
        } else if (forProperty instanceof DslDtoReference) {
            DslDtoReference reference = (DslDtoReference) forProperty;
            if (reference.getDomainObjectType() instanceof DslBasicType) {
                basicType = (DslBasicType) reference.getDomainObjectType();
            }
        }

        if (basicType == null) {
            return myScope;
        }

        List<DslAnyProperty> properties = EcoreUtil2.typeSelect(basicType.eContents(), DslAnyProperty.class);
        for (DslAnyProperty property : properties) {
            elements.add(new EObjectDescription(property.getName(), property, null));
        }

        return myScope;
    }

//    IScope scope_DslGuiListSubtask_reference(DslGuiListSubtask ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        DslSimpleDomainObject domainObj = ((DslUserTask) ctx.eContainer()).getFor();
//        if (domainObj instanceof DslDomainObject) {
//            List<DslReference> references = ((DslDomainObject) domainObj).getReferences();
//            for (DslReference reference : references) {
//                if (!(reference.getDomainObjectType() instanceof DslEnum)
//                        && !(reference.getDomainObjectType() instanceof DslBasicType)) {
//                    elements.add(new EObjectDescription(reference.getName(), reference, null));
//                }
//            }
//        } else if (domainObj instanceof DslDataTransferObject) {
//            List<DslDtoReference> references = ((DslDataTransferObject) domainObj).getReferences();
//            for (DslDtoReference reference : references) {
//                elements.add(new EObjectDescription(reference.getName(), reference, null));
//            }
//        }
//
//        return myScope;
//    }

//    IScope scope_DslGuiListSubtaskForTarget_target(DslGuiListSubtaskForTarget ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        DslGuiListSubtask parent = (DslGuiListSubtask) ctx.eContainer();
//        DslSimpleDomainObject domainObject;
//        if (parent.getReference() instanceof DslReference) {
//            domainObject = ((DslReference) parent.getReference()).getDomainObjectType();
//        } else if (parent.getReference() instanceof DslReference) {
//            domainObject = ((DslDtoReference) parent.getReference()).getDomainObjectType();
//        } else {
//            return myScope;
//        }
//        elements.add(new EObjectDescription(domainObject.getName(), domainObject, null));
//        if (domainObject instanceof DslDomainObject) {
//            List<DslDomainObject> subclasses = DslHelper.getAllSubclasses((DslDomainObject) domainObject);
//            for (DslDomainObject subclass : subclasses) {
//                elements.add(new EObjectDescription(subclass.getName(), subclass, null));
//            }
//        } else if (domainObject instanceof DslDataTransferObject) {
//            List<DslDataTransferObject> subclasses = DslHelper.getAllSubclasses((DslDataTransferObject) domainObject);
//            for (DslDataTransferObject subclass : subclasses) {
//                elements.add(new EObjectDescription(subclass.getName(), subclass, null));
//            }
//        }
//
//        return myScope;
//    }
//
//    IScope scope_DslCreateWith_operation(DslCreateWith ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        List<DslServiceOperation> operations = ctx.getService().getOperations();
//        for (DslServiceOperation operation : operations) {
//            elements.add(new EObjectDescription(operation.getName(), operation, null));
//        }
//        return myScope;
//    }
//
//    IScope scope_DslUpdateWith_operation(DslUpdateWith ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        List<DslServiceOperation> operations = ctx.getService().getOperations();
//        for (DslServiceOperation operation : operations) {
//            elements.add(new EObjectDescription(operation.getName(), operation, null));
//        }
//        return myScope;
//    }
//
//    IScope scope_DslFindWith_operation(DslFindWith ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        List<DslServiceOperation> operations = ctx.getService().getOperations();
//        for (DslServiceOperation operation : operations) {
//            elements.add(new EObjectDescription(operation.getName(), operation, null));
//        }
//        return myScope;
//    }
//
//    IScope scope_DslPopulateWith_operation(DslPopulateWith ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        List<DslServiceOperation> operations = ctx.getService().getOperations();
//        for (DslServiceOperation operation : operations) {
//            elements.add(new EObjectDescription(operation.getName(), operation, null));
//        }
//        return myScope;
//    }
//
//    IScope scope_DslDeleteWith_operation(DslDeleteWith ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        List<DslServiceOperation> operations = ctx.getService().getOperations();
//        for (DslServiceOperation operation : operations) {
//            elements.add(new EObjectDescription(operation.getName(), operation, null));
//        }
//        return myScope;
//    }
//
//    IScope scope_DslSearchWith_operation(DslSearchWith ctx, EReference ref) {
//        Scope myScope = new Scope();
//        List<IEObjectDescription> elements = new ArrayList<IEObjectDescription>();
//        myScope.setElements(elements);
//        List<DslServiceOperation> operations = ctx.getService().getOperations();
//        for (DslServiceOperation operation : operations) {
//            elements.add(new EObjectDescription(operation.getName(), operation, null));
//        }
//        return myScope;
//    }
}
