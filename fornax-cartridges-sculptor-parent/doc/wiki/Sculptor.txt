'
'
[!SculptorLogo1.png! | http://sculptor.fornax-platform.org/]

*Version 2.0.0* is current final release. It was released March 13, 2011. 
Look at the [What's New|0. What's New (CSC)#v2_0] page for more information about the release. It also describes some migration steps needed when upgrading.

h2. Overview

Sculptor is an open source productivity tool that applies the concepts from [Domain-Driven Design|http://domaindrivendesign.org/books/index.html] and Domain Specific Languages.

You express your design intent in a textual specification, from which Sculptor generates high quality Java code and configuration. You can use the concepts from Domain-Driven Design (DDD) in the textual Domain Specific Language (DSL). E.g. Service, Module, Entity, Value Object, Repository. 

The generated code is based on well-known frameworks, such as [JPA|http://java.sun.com/javaee/technologies/persistence.jsp], [Hibernate|http://www.hibernate.org/], [Spring Framework|http://www.springframework.org/], [Google App Engine|http://code.google.com/appengine/], [Spring Web Flow|http://www.springframework.org/webflow], [JSF|http://java.sun.com/javaee/javaserverfaces/], [RCP|http://wiki.eclipse.org/Rich_Client_Platform], [Smartclient|http://www.smartclient.com/] and [Java EE|http://java.sun.com/javaee/]. Sculptor takes care of the technical details, the tedious repetitive work, and let you focus on delivering more business value - and have more fun.

The DSL and the code generation drives the development and is not a one time shot. The application can be developed incrementally with an efficient round trip loop.

Sculptor is useful when developing typical enterprise or web applications that benefit from a rich and persistent domain model. Sculptor also provides a sophisticated CRUD GUI for administrative sections of the application or to serve as a scaffolding for your manually created pages.

Within 15 minutes you can go from scratch to a running application, including build scripts, Eclipse projects, domain model, JPA persistence, services, Web Flow application and much more. Thereafter you can continue by evolving the design, add manual code and regenerate.

Sculptor is not an one-size-fits-all product. Even though it is a good start for many systems, sooner or later customization is always needed. Sculptor is designed and documented with this in mind. The generated result can easily be modified to meet your needs.

h2. Strengths

* Easy to learn, intuitive syntax of the textual DSL, based on the concepts from DDD
* Textual DSL has a lot of productivity benefits over graphical tools
* [Quick start|http://fornax-sculptor.blogspot.com/2009/06/jump-start.html], simple installation
* Quick development round trip, short feedback loop, it is not a one time shot
* Support for [TDD|http://fornax-sculptor.blogspot.com/2009/08/testing-is-simple.html] and [refactoring|http://fornax-sculptor.blogspot.com/2009/08/refactoring.html]
* Existing IDE tools, such as refactoring, code assist and debugger will continue to be of service to you
* [High quality|http://fornax-sculptor.blogspot.com/2009/11/promote-quality-with-sculptor.html] of generated code
* [Pick 'n' Choose Target Implementation|http://fornax-sculptor.blogspot.com/2010/01/pick-n-choose-target-implementation.html], based on well known frameworks, best practices, and a lot of experience
* Generation of complete application from a single model, not only fragments that are hard to fit in to the overall design
* Great extensibility and customization
* Used with de facto standard build tool - Maven
* Based on [openArchitectureWare|http://www.openarchitectureware.org/] code generation framework
* Can be used with text editor or any IDE, but DSL editor with error highlight, code completion, and outline is provided for Eclipse users
* Easy to [remove the tool|http://fornax-sculptor.blogspot.com/2010/01/how-to-remove-sculptor.html], no runtime magic

h2. Getting Started

{section:border=false}
{column}
!Sculptor.gif!
{column}
{column}
Start by reading the articles [Improving Developer Productivity with Sculptor|http://sites.google.com/site/fornaxsculptor/improving-developer-productivity] and [Promote Quality with Sculptor|http://java.dzone.com/articles/promote-quality-sculptor]. 

Watch and read the [Screencast:Introduction to Sculptor|http://fornax-sculptor.blogspot.com/2009/08/introduction-to-sculptor.html].

Thereafter you can get your hands dirty with the [Hello World Tutorial|2. Hello World Tutorial (CSC)].
{column}
{section}

h2. Documentation

Below you find links to detailed documentation. Other sources of information is the *[Forum|http://groups.google.com/group/fornax-platform]* and *[Blog|http://fornax-sculptor.blogspot.com/]*.

{section:border=false}
{column}
*Latest* (2.0.0)
* [Installation Guide|1. Installation Guide (CSC)]
* [Hello World Tutorial|2. Hello World Tutorial (CSC)]
* [Advanced Tutorial|3. Advanced Tutorial (CSC)]
* [Archetype Tutorial|4. Archetype Tutorial (CSC)]
* [CRUD Gui Tutorial|5. CRUD GUI Tutorial (CSC)]
** [DSL for GRUD GUI|5.3 DSL for GRUD GUI]
** [Web CRUD GUI Tutorial|5.1 Web CRUD GUI Tutorial (CSC)]
** [Rich Client CRUD GUI Tutorial|5.2 Rich Client CRUD GUI Tutorial (CSC)]
** [SmartClient Tutorial|fornax:5.4. SmartClient (CSC)]
* [Event Driven Tutorial|6. Event Driven Tutorial (CSC)]
* [Developer's Guide|7. Developer's Guide (CSC)]
* [DDD Sample|8. DDD Sample (CSC)]
* [Pure EJB Tutorial|fornax:9. Pure EJB3 (CSC)]
* [App Engine Tutorial|fornax:10. App Engine (CSC)]
* [MongoDB Tutorial|fornax:12. MongoDB (CSC)]
* [REST Tutorial|fornax:13. REST Tutorial (CSC)]
* [DSL language syntax|fornax:DSL language syntax 1.9]
* [Release Notes 2.0|^release-notes-2.0.html]

{column}
{column}
*Version 1.9*
* [Installation Guide|^InstallationGuide-1.9.pdf]
* [Hello World Tutorial|^HelloWorldTutorial-1.9.pdf]
* [Advanced Tutorial|^AdvancedTutorial-1.9.pdf]
* [Archetype Tutorial|^ArchetypeTutorial-1.9.pdf]
* CRUD Gui Tutorial
** [DSL for GRUD GUI|^GuiDSL-1.9.pdf]
** [Web CRUD GUI Tutorial|^WebCRUDGuiTutorial-1.9.pdf]
** [Rich Client CRUD GUI Tutorial|^RichClientTutorial-1.9.pdf]
** [SmartClient Tutorial|^SmartclientTutorial-1.9.pdf]
* [Event Driven Tutorial|^EventTutorial-1.9.pdf]
* [Developer's Guide|^DevelopersGuide-1.9.pdf]
* [DDD Sample|^DDDSample-1.9.pdf]
* [Pure EJB Tutorial|^EJBTutorial-1.9.pdf]
* [App Engine Tutorial|^AppEngineTutorial-1.9.pdf]
* [MongoDB Tutorial|^MongoDbTutorial-1.9.pdf]
* [DSL language syntax|^DslLangSyntax-1.9.pdf]
* [Release Notes 1.9|^release-notes-1.9.html]

{column}
{column}
*Version 1.7 and 1.8*
* [Installation Guide|^InstallationGuide-1.7.pdf]
* [Hello World Tutorial|^HelloWorldTutorial-1.7.pdf]
* [Advanced Tutorial|^AdvancedTutorial-1.7.pdf]
* [Archetype Tutorial|^ArchetypeTutorial-1.7.pdf]
* [Web CRUD Gui Tutorial|^WebCRUDGuiTutorial-1.7.pdf]
* [Rich Client Tutorial|^RichClientTutorial-1.7.pdf]
* [SmartClient Tutorial|^SmartclientTutorial-1.7.pdf]
* [GUI DSL|^GuiDSL-1.7.pdf]
* [Messaging Tutorial|^MessagingTutorial-1.7.pdf]
* [Developer's Guide|^DevelopersGuide-1.7.pdf]
* [DDD Sample|^DDDSample-1.7.pdf]
* [Pure EJB Tutorial|^EJBTutorial-1.7.pdf]
* [App Engine Tutorial|^AppEngineTutorial-1.7.pdf]
* [Release Notes 1.8|^release-notes-1.8.html]
* [Release Notes 1.7|^release-notes-1.7.html]
{column}
{section}

h2. Issues and Improvements

Use the [Forum|http://groups.google.com/group/fornax-platform] for questions and discussion. 

You can report bugs and feature request in the [forum|http://groups.google.com/group/fornax-platform] also. We will add them to  issue tracking system: [http://www.fornax-platform.org/tracker/browse/CSC|http://www.fornax-platform.org/tracker/browse/CSC].

h2. Thanks
[!jprofiler.png!|http://www.ej-technologies.com/products/jprofiler/overview.html]