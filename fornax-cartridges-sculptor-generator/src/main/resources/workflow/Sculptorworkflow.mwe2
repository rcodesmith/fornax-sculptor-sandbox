module workflow.Sculptorworkflow

import org.fornax.cartridges.sculptor.dsl.*
import org.fornax.cartridges.sculptor.generator.util.*
import org.fornax.utilities.formatter.xml.XmlFormatter

var modelFile
	
var outlet.src.dir = 'src/generated/java'
var outlet.src.once.dir = 'src/main/java'
var outlet.src.test.dir = 'src/test/generated/java'
var outlet.src.test.once.dir = 'src/test/java'
var outlet.res.test.once.dir = 'src/test/resources'
var outlet.res.once.dir = 'src/main/resources'
var outlet.res.dir = 'src/generated/resources'
var outlet.res.test.dir = 'src/test/generated/resources'
var outlet.webroot.dir = 'src/main/webapp'

var transformationAdvice = "generator::SpecialCases"
var templateAdvice = "generator::SpecialCases"

Workflow {
	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
		platformUri = ".."
		// Register Sculptor dsl meta model
		registerGeneratedEPackage = "org.fornax.cartridges.sculptor.dsl.sculptordsl.SculptordslPackage"

		// Register Sculptor meta model
		registerGeneratedEPackage = "sculptormetamodel.SculptormetamodelPackage"    	
	}
		
	// Load/reload generator properties
	bean = org.fornax.cartridges.sculptor.generator.util.GeneratorProperties {}

	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = 'src-gen'
	} 	
	
	/*
	component = org.eclipse.xtext.mwe.Reader {
		path = modelFile
		
		// this class will be generated by the xtext generator
		register = SculptordslStandaloneSetup {}
	}
	*/
	component = org.eclipse.xtext.mwe.UriBasedReader {
		uri = modelFile
		
		// this class will be generated by the xtext generator
		register = SculptordslStandaloneSetup {}
		load = {
			slot = "model"
			type = "DslApplication"
		}
	}
	

	// Validate the DSL model
	component = org.fornax.cartridges.sculptor.generator.util.CheckComponent {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {
			useSingleGlobalResourceSet = true
		} 
		
		checkFile = "org/fornax/cartridges/sculptor/dsl/validation/SculptordslChecks"
		emfAllChildrenSlot = "model"
	}
	
	// Model transformation from DSL meta model to meta model
	component = org.eclipse.xtend.XtendComponent {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {
			useSingleGlobalResourceSet = true
		}

		extensionAdvice = transformationAdvice
		invoke = "transformation::DslTransformation::transform((DslModel)(model.first().eContainer))"     
		outputSlot = "transformedModel"
	}

	// Model validation before transformation
	component = org.fornax.cartridges.sculptor.generator.util.CheckComponent {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {
			useSingleGlobalResourceSet = true
		}
		checkFile = "constraints/constraints"
		emfAllChildrenSlot = "transformedModel"
	}

	// Model transformation
	component = org.eclipse.xtend.XtendComponent {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {
			useSingleGlobalResourceSet = true
		}

		extensionAdvice = transformationAdvice
		invoke = "transformation::Transformation::modify(transformedModel)"
		outputSlot = "transformedModel"
	}

	// Model validation after transformation
	/*
	component = org.fornax.cartridges.sculptor.generator.util.CheckComponent {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {
			useSingleGlobalResourceSet = true
		}
		checkFile = "constraints/constraints"
		emfAllChildrenSlot = "transformedModel"
	}
	*/

	// Code generation
	component = org.eclipse.xpand2.Generator {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel { 
			useSingleGlobalResourceSet = true
		}
		fileEncoding = "iso-8859-1"
		outlet = {                               path = outlet.src.dir                             postprocessor = org.hybridlabs.source.formatter.JavaImportBeautifier {}}
		outlet = {name = "TO_SRC"                path = outlet.src.once.dir      overwrite = false postprocessor = org.hybridlabs.source.formatter.JavaImportBeautifier {}}
		outlet = {name = "TO_SRC_TEST"           path = outlet.src.test.once.dir overwrite = false postprocessor = org.hybridlabs.source.formatter.JavaImportBeautifier {}}
		outlet = {name = "TO_GEN_SRC_TEST"       path = outlet.src.test.dir      overwrite = true  postprocessor = org.hybridlabs.source.formatter.JavaImportBeautifier {}}
		outlet = {name = "TO_RESOURCES"          path = outlet.res.once.dir      overwrite = false postprocessor = XmlFormatter {}}
		outlet = {name = "TO_RESOURCES_TEST"     path = outlet.res.test.once.dir overwrite = false postprocessor = XmlFormatter {}}
		outlet = {name = "TO_GEN_RESOURCES"      path = outlet.res.dir           overwrite = true  postprocessor = XmlFormatter {}}
		outlet = {name = "TO_GEN_RESOURCES_TEST" path = outlet.res.test.dir      overwrite = true  postprocessor = XmlFormatter {}}
		outlet = {name = "TO_WEBROOT"            path = outlet.webroot.dir       overwrite = false postprocessor = XmlFormatter {}}
		outlet = {name = "TO_GEN_WEBROOT"        path = outlet.webroot.dir       overwrite = true  postprocessor = XmlFormatter {}}

		advice = templateAdvice
		extensionAdvice = transformationAdvice
		expand = "templates::Root::Root FOR transformedModel"
	}
}
