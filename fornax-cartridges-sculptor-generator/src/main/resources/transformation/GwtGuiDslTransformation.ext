/*
 * Copyright 2007 The Fornax Project Team, including the original 
 * author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
import sculptorguidsl;
import sculptordsl;
import sculptormetamodel;
import sculptorguimetamodel;

extension org::fornax::cartridges::sculptor::dsl::ModelLoadExtensions;
 
extension transformation::DslTransformation;
extension transformation::Transformation;
//extension transformation::DefaultGuiDslTransformation;
//extension transformation::GuiTransformation;
extension transformation::GuiDslTransformation;
extension extensions::helper;
extension extensions::guihelper;
extension extensions::properties;


// For any post-DSL transformations that need to occur
modify(GuiModule guiModule) :
	guiModule.commands.modifyExtends() ->
	guiModule.dtos.modify(guiModule);

// NOTE: If any referred-to DTOs exist that are non-GUI mapped modules, they'll get missed here.
// Solution is to include those modules in the GUI model.  Consider adding a validation for this..
modify(GuiDto dto, GuiModule guiModule) :
	dto.setGuiModule(guiModule);

create sculptorguimetamodel::GuiDto this transformToGui(DslEntity entity) :
	initGuiDto(entity, this);

// Don't need to set guiModule, as it is set by modify() method
private initGuiDto(DslDomainObject domainObject, sculptorguimetamodel::GuiDto guiDto) :
    guiDto.setDoc(domainObject.doc) ->
    guiDto.setName(domainObject.name) ->
    guiDto.setPackage(domainObject.package) ->
    guiDto.setAbstract(domainObject.abstract) ->
    guiDto.setOptimisticLocking(!domainObject.notOptimisticLocking) ->
//    guiDto.setImmutable(!domainObject.notImmutable) ->
    guiDto.setCache(domainObject.cache) ->
//    setBelongsToAggregate(domainObject.belongsTo == null ? null : domainObject.belongsTo.transform()) ->
//    guiDto.setPersistent(!domainObject.notPersistent) ->
    guiDto.setValidate(domainObject.validate) ->
    guiDto.setHint(domainObject.hint) ->
    guiDto.setGapClass(isGapClassToBeGenerated(domainObject.gapClass, domainObject.noGapClass)) ->
    guiDto.attributes.addAll(domainObject.attributes.transformToGui()) ->
    guiDto.references.addAll(domainObject.references.transformToGui()) ->
    guiDto.operations.addAll(domainObject.operations.transformToGui()) ->
//    domainObject.transformExtends(this) ->
//    traits.addAll(domainObject.traits.transform()) ->
	debugTrace("Done with domain object " + domainObject.name);

create sculptormetamodel::Attribute this transformToGui(DslAttribute attribute) :
    setDoc(attribute.doc) ->
    setName(attribute.name) ->
    setType(attribute.type) ->
    setCollectionType(convertCollectionTypeEnum(attribute.collectionType)) ->
    setNaturalKey(attribute.key) ->
    setChangeable(!attribute.notChangeable) ->
    setRequired(attribute.required) ->
    setNullable(attribute.nullable) ->
    setIndex(attribute.index) ->
    setLength(attribute.length) ->
    setValidate(attribute.handleValidation()) ->
    setHint(attribute.hint) ->
    setTransient(attribute.transient) ->
    setVisibility(convertVisibility(attribute.visibility));

create sculptormetamodel::Reference this transformToGui(DslReference reference) :
	setFrom(((DslSimpleDomainObject) reference.eContainer).transformToGui()) ->
    setDoc(reference.doc) ->
    setName(reference.name) ->
    setCollectionType(convertCollectionTypeEnum(reference.collectionType)) ->
    setMany(reference.collectionType != null && reference.collectionType != DslCollectionType::None) ->
    setNaturalKey(reference.key) ->
    setChangeable(!reference.notChangeable) ->
    setRequired(reference.required) ->
    setNullable(reference.nullable) ->
    setCache(reference.cache) ->
    setInverse(reference.inverse) ->
    setCascade(reference.cascade) ->
    setFetch(reference.fetch) ->
    setOrderBy(reference.orderBy) ->
    setTo(reference.domainObjectType.transformToGui()) ->
    setValidate(reference.handleValidation()) ->
    setHint(reference.hint) ->
    setTransient(reference.transient) ->
    setVisibility(convertVisibility(reference.visibility)) ->
    (reference.oppositeHolder != null && reference.oppositeHolder.opposite != null ?
      setOpposite(reference.oppositeHolder.opposite.transformToGui()):
      null);
      

create sculptormetamodel::DomainObjectOperation this transformToGui(DslDomainObjectOperation operation) :
	setDomainObject(((DslDomainObject) operation.eContainer).transformToGui()) ->
    setDoc(operation.doc) ->
    setName(operation.name) ->
    setAbstract(operation.abstract) ->
    setVisibility(convertVisibility(operation.visibility)) ->
    parameters.addAll(operation.parameters.transformToGui()) ->
    setCollectionType(convertCollectionType(operation.returnType)) ->
    setMapKeyType(operation.returnType == null ? null : operation.returnType.mapKeyType) ->
    setType(operation.returnType == null ? null : operation.returnType.type) ->
    setDomainObjectType(operation.returnType == null || operation.returnType.domainObjectType == null ? 
    	null : 
    	operation.returnType.domainObjectType.transformToGui()) ->
    setThrows(operation.throws) ->
    setHint(operation.hint);      


create sculptormetamodel::Parameter this transformToGui(DslParameter parameter) :
    setName(parameter.name) ->
    setDoc(parameter.doc) ->
    setCollectionType(convertCollectionType(parameter.parameterType)) ->
    setMapKeyType(parameter.parameterType == null ? null : parameter.parameterType.mapKeyType) ->
    setType(parameter.parameterType == null ? null : parameter.parameterType.type) ->
    setDomainObjectType(parameter.parameterType == null || parameter.parameterType.domainObjectType == null ? 
    	null : 
    	parameter.parameterType.domainObjectType.transformToGui());

create sculptormetamodel::Enum this transformToGui(DslEnum domainObject) :
    setDoc(domainObject.doc) ->
    setName(domainObject.name) ->
    setPackage(domainObject.package) ->
    setHint(domainObject.hint) ->
    setAggregateRoot(false) ->
    attributes.addAll(domainObject.attributes.transformToGui()) ->
    values.addAll(domainObject.values.transformToGui());

create sculptormetamodel::EnumValue this transformToGui(DslEnumValue enumValue) :
	setName(enumValue.name) ->
	setDoc(enumValue.doc) ->
	parameters.addAll(enumValue.parameters.transform());

create sculptormetamodel::EnumConstructorParameter this transformToGui(DslEnumParameter parameter) :
	parameter.value == null ?
		setValue("" + parameter.integerValue) :
		setValue(parameter.value);

create sculptormetamodel::Attribute this transformToGui(DslEnumAttribute attribute) :
    setDoc(attribute.doc) ->
    setName(attribute.name) ->
    setType(attribute.type) ->
    setNaturalKey(attribute.key);

create sculptormetamodel::BasicType this transformToGui(DslBasicType domainObject) :
    setDoc(domainObject.doc) ->
    setName(domainObject.name) ->
    setPackage(domainObject.package) ->
    setHint(domainObject.hint) ->
    setImmutable(!domainObject.notImmutable) ->
    setGapClass(isGapClassToBeGenerated(domainObject.gapClass, domainObject.noGapClass)) ->
    attributes.addAll(domainObject.attributes.transformToGui()) ->
    references.addAll(domainObject.references.transformToGui()) ->
    operations.addAll(domainObject.operations.transformToGui()) ->
    traits.addAll(domainObject.traits.transformToGui());

create sculptorguimetamodel::GuiDto this transformToGui(DslValueObject domainObject) :
	initGuiDto(domainObject, this);




// Copied from DslTransformation.ext
private String convertVisibility(DslVisibility dslVisibility) :
	dslVisibility == null ?
		"public" :
		dslVisibility.toString();

private String convertCollectionType(DslComplexType dslComplexType) :
	if (dslComplexType == null) then
		null
	else if (dslComplexType.mapCollectionType != null) then
		dslComplexType.mapCollectionType
	else
		convertCollectionTypeEnum(dslComplexType.collectionType);
		
private String convertCollectionTypeEnum(DslCollectionType collectionType) :
	if (collectionType == null || collectionType == DslCollectionType::None) then
		null
	else
		collectionType.toString();

// End of Copied from DslTransformation.ext

		
//////////////////////////////////////////////////////////////////////////////////
// Transformation helper functions.  Currently overlapped with sofeauihelpers.ext
//////////////////////////////////////////////////////////////////////////////////
String translateGwtTypeName(String typeStr) :
    JAVA org.fornax.cartridges.sculptor.gwt.generator.util.GwtGenerationHelper.translateGwtTypeName(java.lang.String);

	
	
//////////////////////////////////////////////////////////////////////////////////
// DSL transformation helper functions.  Currently overlapped with DslTransformation.ext
// TODO: Make these common somewhere, or import DslTransformation?
//////////////////////////////////////////////////////////////////////////////////
private String convertCollectionTypeEnum(DslCollectionType collectionType) :
	if (collectionType == null || collectionType == DslCollectionType::None) then
		null
	else
		collectionType.toString();

private String handleValidation(DslAttribute attribute) :
    ((attribute.validate != null) ? attribute.validate : "") +
	handleParameterizedAnnotation("range", "min,max,message", attribute.range, attribute.validate) +
	handleParameterizedAnnotation("length", "max,min,message", attribute.length, attribute.validate) +
	handleParameterizedAnnotation("digits", "integerDigits,fractionalDigits,message", attribute.digits, attribute.validate) +
//	handleParameterizedAnnotation("size", "min,max,message", attribute.size, attribute.validate) +
	handleBooleanAnnotation("assertTrue", attribute.assertTrue, attribute.assertTrueMessage, attribute.validate) +
	handleBooleanAnnotation("assertFalse", attribute.assertFalse, attribute.assertFalseMessage, attribute.validate) +
	handleBooleanAnnotation("creditCardNumber", attribute.creditCardNumber, attribute.creditCardNumberMessage, attribute.validate) +
	handleBooleanAnnotation("ean", attribute.ean, attribute.eanMessage, attribute.validate) +
	handleBooleanAnnotation("email", attribute.email, attribute.emailMessage, attribute.validate) +
	handleBooleanAnnotation("notNull", !attribute.nullable && !attribute.type.isPrimitiveType(), attribute.nullableMessage, attribute.validate) +
	handleBooleanAnnotation("notEmpty", attribute.notEmpty, attribute.notEmptyMessage, attribute.validate) +
	handleBooleanAnnotation("future", attribute.future, attribute.futureMessage, attribute.validate) +
	handleBooleanAnnotation("past", attribute.past, attribute.pastMessage, attribute.validate) +
	handleSimpleAnnotation("min", attribute.min, attribute.validate) +
	handleSimpleAnnotation("max", attribute.max, attribute.validate) +
	// TODO: add missing parameter 'flags', needs special handling
	handleParameterizedAnnotation("pattern", "regex,message", attribute.pattern, attribute.validate)
	// TODO: add support for 'patterns' annotation
	;

private String handleValidation(DslReference reference) :
    ((reference.validate != null) ? reference.validate : "") +
	handleParameterizedAnnotation("size", "min,max,message", reference.size, reference.validate) +
	handleBooleanAnnotation("notNull", !reference.nullable, reference.nullableMessage, reference.validate) +
	handleBooleanAnnotation("notEmpty", reference.notEmpty, reference.notEmptyMessage, reference.validate) +
	handleBooleanAnnotation("valid", reference.valid, reference.validMessage, reference.validate)
	;

private String handleParameterizedAnnotation(String annotation, String parameterNames, String parameters, String validate) :
	JAVA org.fornax.cartridges.sculptor.generator.util.GenerationHelper.handleParameterizedAnnotation(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

private String handleSimpleAnnotation(String annotation, String value, String validate) :
	JAVA org.fornax.cartridges.sculptor.generator.util.GenerationHelper.handleSimpleAnnotation(java.lang.String, java.lang.String, java.lang.String);

private String handleBooleanAnnotation(String annotation, Boolean value, String message, String validate) :
	JAVA org.fornax.cartridges.sculptor.generator.util.GenerationHelper.handleBooleanAnnotation(java.lang.String, java.lang.Boolean, java.lang.String, java.lang.String);

private String convertVisibility(DslVisibility dslVisibility) :
	dslVisibility == null ?
		"public" :
		dslVisibility.toString();



	
	