/*
 * Copyright 2007 The Fornax Project Team, including the original 
 * author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
import sculptorguidsl;
import sculptordsl;
import sculptormetamodel;
import sculptorguimetamodel;

extension org::fornax::cartridges::sculptor::dsl::ModelLoadExtensions;
 
extension transformation::DslTransformation;
extension transformation::Transformation;
//extension transformation::DefaultGuiDslTransformation;
//extension transformation::GuiTransformation;
extension transformation::GuiDslTransformation;
extension extensions::helper;
extension extensions::guihelper;
extension extensions::properties;


//
// Service proxy-related transformations
//

Service getMetamodelService(DslGuiServiceDependency dslServiceDep, Module module) :
	module.services.select(s | s.name == dslServiceDep.dependency.name).first();


create sculptorguimetamodel::ServiceProxy this transformServiceProxy(DslGuiServiceDependency dslServiceDep, Module module) :
	let domainService = getMetamodelService(dslServiceDep, module) :
	setFor(domainService) ->
	setName(domainService.name) ->
	setDoc(domainService.doc) ->
	setModule(module) ->
	operations.addAll(domainService.operations.select(o | dslServiceDep.dependency.operations.exists(e|e.name == o.name)).transformServiceProxyOperation()) ->
	debugTrace("transformServiceProxy: module = " + module) ->
	debugTrace("transformServiceProxy: domain service module = " + this.for.module);


// 	operations.addAll(domainServiceOp.operations.transformServiceProxyOperation());
 	
 	
create sculptorguimetamodel::ServiceProxyOperation this transformServiceProxyOperation(ServiceOperation domainOperation) :
//	setService(((DslService) operation.eContainer).transform()) ->
	setFor(domainOperation) ->
    setDoc(domainOperation.doc) ->
    setName(domainOperation.name) ->
    setVisibility(domainOperation.visibility) ->
    parameters.addAll(domainOperation.parameters.reject(p | p.type == "org.fornax.cartridges.sculptor.framework.errorhandling.ServiceContext").transformGwtServiceOperationParam()) ->
    setCollectionType(domainOperation.collectionType) ->
    setMapKeyType(domainOperation.mapKeyType) ->
    setType(domainOperation.type) ->
    setDomainObjectType(domainOperation.domainObjectType) ->
    setThrows(domainOperation.throws) ->
    setHint(domainOperation.hint);


Parameter transformGwtServiceOperationParam(Parameter param) :
	let newParam = new Parameter :
		newParam.setCollectionType(param.collectionType) ->
		newParam.setDoc(param.doc) ->
		newParam.setDomainObjectType(param.domainObjectType) ->
		newParam.setHint(param.hint) ->
		newParam.setMapKeyType(param.mapKeyType) ->
		newParam.setName(param.name) ->
		newParam.setType(param.type);

//
// View related transformations
//

// TODO: Put a validation check here to ensure the service (serviceDependency) is actually in the contained module.  Right now it's a silent failure
create sculptorguimetamodel::View this transformView(DslView view, Module module) :
	let domainObject = module.domainObjects.select(e | e.name == view.for.name).first() :
	setModule(((DslGuiModule) view.eContainer).transformModule()) ->
	setName(view.name) ->
	setFor(domainObject) ->
	widgets.addAll(view.widgets.transformWidget(module)) ->
	serviceDependencies.addAll(view.serviceDependencies.getMetamodelService(module));

create sculptorguimetamodel::Widget this transformWidget(DslWidget widget, Module module) :
	error("Unexpected call to transformWidget(DslWidget): " + widget);
	
create sculptorguimetamodel::NumberSpinnerWidget this transformWidget(DslNumberSpinnerWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);

create sculptorguimetamodel::InputDateWidget this transformWidget(DslInputDateWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);

create sculptorguimetamodel::RichTextAreaWidget this transformWidget(DslRichTextAreaWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);

create sculptorguimetamodel::RadioButtonsWidget this transformWidget(DslRadioButtonsWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);

create sculptorguimetamodel::AutocompleteWidget this transformWidget(DslAutocompleteWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);

create sculptorguimetamodel::InputTextWidget this transformWidget(DslInputTextWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);

create sculptorguimetamodel::TextAreaWidget this transformWidget(DslTextAreaWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);

	
create sculptorguimetamodel::ButtonWidget this transformWidget(DslButtonWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);
	
create sculptorguimetamodel::InformationalTextWidget this transformWidget(DslInformationalTextWidget widget, Module module) :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label);
	
create sculptorguimetamodel::TableWidget this transformWidget(DslTableWidget widget, Module module) :
	let domainObject = module.domainObjects.select(e | e.name == widget.for.name).first() :
	setView(((DslView) widget.eContainer).transformView(module)) ->
	setName(widget.name) ->
	setLabel(widget.label) ->
	setFor(domainObject) ->
	columns.addAll(widget.columns.transformColumn(module));

create sculptorguimetamodel::TableColumn this transformColumn(DslTableColumn col, Module module) :
	setName(col.name)->
	setLabel(col.label) ->
	setColumnType(col.columnType);


//////////////////////////////////////////////////////////////////////////////////
// GuiEvent related transformations
//////////////////////////////////////////////////////////////////////////////////
create sculptorguimetamodel::GuiEvent this transformEvent(DslGuiEvent event, Module module) :
	setGuiModule(((DslGuiModule) event.eContainer).transformModule()) ->
	setName(event.name) ->
	setDoc(event.doc) ->
	attributes.addAll(event.attributes.transformAttribute(module));
	
create sculptormetamodel::Attribute this transformAttribute(DslGuiAttribute attr, Module module) :
//	setEvent(((DslEvent) attr.eContainer).transformEvent(module)) ->
	setName(attr.name) ->
	setDoc(attr.doc) ->
	setType(attr.type.translateGwtTypeName());
	
	
//////////////////////////////////////////////////////////////////////////////////
// Transformation helper functions.  Currently overlapped with sofeauihelpers.ext
//////////////////////////////////////////////////////////////////////////////////
String translateGwtTypeName(String typeStr) :
    JAVA org.fornax.cartridges.sculptor.gwt.generator.util.GwtGenerationHelper.translateGwtTypeName(java.lang.String);

	
	
	