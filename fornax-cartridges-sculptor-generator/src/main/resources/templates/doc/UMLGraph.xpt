«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::umlgraphhelper»

«DEFINE start FOR Application»
	«LET visibleModules().toSet() AS mods»
		«REM»detail 0 => all Domain (Entity, ValueObject) classes«ENDREM»
		«EXPAND start(mods, 0)»
		«REM»detail 1 => all«ENDREM»
		«EXPAND start(mods, 1)»
		«REM»detail 2 => core domain«ENDREM»
		«IF existsCoreDomain()»
			«EXPAND start(mods, 2)»
		«ENDIF»
		«REM»detail 3 => overview«ENDREM»
		«EXPAND start(mods, 3)»
		«REM»detail 4 => module dependencies«ENDREM»
		«EXPAND start(mods, 4)»
		«REM»Each module separatly«ENDREM»
		«IF mods.size > 1»
			«FOREACH mods AS m»
				«EXPAND start({m}.toSet(), 1)»
				«EXPAND start({m}.toSet(), 0)»
			«ENDFOREACH»
		«ENDIF»
	«ENDLET»
«ENDDEFINE»

«DEFINE start(Set[Module] focus, int detail) FOR Application»
«FILE dotFileName(focus, detail) TO_GEN_RESOURCES»
	«EXPAND graphPropertiesStart»	
	«EXPAND subGraphForModule(focus, detail) FOREACH focus.sortBy(e|e.name)»
	«IF detail < 4»
		«EXPAND InheritanceGraphProperties»
		«EXPAND InheritanceToUML(focus, detail) FOREACH getAllDomainObjects().select(d|d.extends != null).reject(e | e.rejectFromDomain(detail))»
		«EXPAND RelationGraphProperties»
		«EXPAND RelationToUML(focus, detail) FOREACH getAllReferences()
			.reject(e | e.to.metaType == BasicType)
			.reject(e | e.to.metaType == Enum)
			.reject(e | e.to.isPersistent() == false)
			.reject(e | e.from.isPersistent() == false)
			.reject(e | e.to.metaType.rejectFromDomain(detail))
			.reject(e | e.from.metaType.rejectFromDomain(detail))
			.sortBy(e | e.from.name + "->" + e.to.name + ": " + e.name)»
		«IF detail > 0»
			«EXPAND ServiceDependenciesToUML(focus, detail) FOREACH modules.services»
		«ENDIF»		
	«ELSE»
		«EXPAND ModuleDependenciesToUML FOREACH focus»
	«ENDIF»
	«EXPAND graphPropertiesEnd»	
«ENDFILE»    
«ENDDEFINE»


«DEFINE graphPropertiesStart FOR Application»
digraph G {             
	fontsize = 10        
	node [                          
		fontsize = 10                
		fontname="arial"
		shape=plaintext
	     ]        
	     
	edge [                            
		fontsize = 10        
	     ]        
«ENDDEFINE»

«DEFINE graphPropertiesEnd FOR Application»
	}
«ENDDEFINE»

«DEFINE subGraphForModule(Set[Module] focus, int detail) FOR Module»
	«IF detail < 4»
		subgraph cluster«name» {
			label = "«name»"  
			«IF focus.contains(this)»
				«IF detail > 0»		
					«EXPAND ServiceToUML(focus, detail) FOREACH services.select(e|e.visible()).sortBy(e|e.name)»
					«EXPAND ConsumerToUML(focus, detail) FOREACH consumers.select(e|e.visible()).sortBy(e|e.name)»
				«ENDIF»
				«EXPAND ObjectToUML(focus, detail) FOREACH domainObjects.select(e|e.visible()).reject(e | e.rejectFromDomain(detail)).sortBy(e|e.name)»
			«ENDIF»
		}
	«ELSE»
		«name» [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="20" port="p" bgcolor="#«bgcolor()»">
		<tr><td>
			<table border="0" cellspacing="1" cellpadding="1">
				<tr><td> &laquo;«getStereoTypeName()»&raquo; </td></tr>
				<tr><td><font face="arialbd"  point-size="12.0"> «name» </font></td></tr>
			</table>
		</td></tr>	
		</table>>, fontname="arial", fontcolor="«fontcolor()»", fontsize=9.0];
	«ENDIF»
«ENDDEFINE»


«DEFINE InheritanceGraphProperties FOR Application»
	edge [arrowhead = "empty"]
«ENDDEFINE»

«DEFINE RelationGraphProperties FOR Application»
	edge [arrowhead = "none"]
«ENDDEFINE»

«DEFINE ServiceToUML(Set[Module] focus, int detail) FOR Service»
	«name» [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="0" port="p" bgcolor="#«bgcolor()»" >
	<tr><td>
	<table border="0" cellspacing="1" cellpadding="1">
		<tr><td> &laquo;«getStereoTypeName()»&raquo; </td></tr>
		<tr><td><font face="arialbd"  point-size="12.0"> «name» </font></td></tr>
	</table></td></tr>
	«IF showCompartment(detail)-»
		<tr><td>
			<table border="0" cellspacing="0" cellpadding="1">	
		«EXPAND OperationToUML FOREACH operations»
			</table>		
		</td></tr>
	«ENDIF-»
	</table>>, fontname="arial", fontcolor="«fontcolor()»", fontsize=9.0];
«ENDDEFINE»

«DEFINE OperationToUML FOR Operation»
				<tr><td align="left">«this.name»</td></tr>			
«ENDDEFINE»

«DEFINE ServiceDependenciesToUML(Set[Module] focus, int detail) FOR Service»
	«IF focus.contains(module) && visible()»
		edge [arrowtail="none" arrowhead = "open" headlabel = "" taillabel = "" style = "dashed"]
		«FOREACH serviceOperationDependencies() AS dep»
			«IF dep.isShownInView(focus, detail) -»
				«name» -> «dep.name»
			«ENDIF-»
		«ENDFOREACH»
	«ENDIF»
«ENDDEFINE»

«DEFINE ConsumerToUML(Set[Module] focus, int detail) FOR Consumer»
	«name» [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="0" port="p" bgcolor="#«bgcolor()»">
	<tr><td>
	<table border="0" cellspacing="1" cellpadding="1">
		<tr><td> &laquo;«getStereoTypeName()»&raquo; </td></tr>
		<tr><td><font face="arialbd"  point-size="12.0"> «name» </font></td></tr>
	</table></td></tr>
	«IF showCompartment(detail)-»
		<tr><td>
			<table border="0" cellspacing="0" cellpadding="1">	
				<tr><td align="left">onMessage</td></tr>
			</table>		
		</td></tr>
	«ENDIF-»
	</table>>, fontname="arial", fontcolor="«fontcolor()»", fontsize=9.0];
«ENDDEFINE»

«DEFINE ObjectToUML(Set[Module] focus, int detail) FOR DomainObject»
«IF isShownInView(focus, detail) »
	«name» [label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="0" port="p" bgcolor="#«bgcolor()»">
	<tr><td>
	<table border="0" cellspacing="1" cellpadding="1">
		<tr><td> &laquo;«getStereoTypeName()»&raquo; </td></tr>
		<tr><td>«IF this.abstract»<font face="arialbi"  point-size="12.0"> «name» </font>
				«ELSE»<font face="arialbd"  point-size="12.0"> «name» </font>«ENDIF»</td></tr>
	</table></td></tr>
	«IF metaType == Enum && showCompartment(detail)-»
		<tr><td>
			<table border="0" cellspacing="0" cellpadding="1">	
			«EXPAND EnumValueToUML FOREACH ((Enum) this).values»
			</table>		
		</td></tr> 
	«ENDIF -»
	«LET attributes.exists(e | !e.isSystemAttribute() && e.visible())
			|| references.exists(e | e.to.metaType == BasicType && e.visible())
			|| references.exists(e | e.to.metaType == Enum && e.visible())
			|| references.exists(e | !focus.contains(e.to.module) && e.visible()) 
			AS existsAttributesCompartment»
	«IF existsAttributesCompartment && showCompartment(detail)»
		<tr><td>
			<table border="0" cellspacing="0" cellpadding="1">	
		«EXPAND AttributeToUML FOREACH attributes.reject(e|e.isSystemAttribute() || e.hide())»
		«EXPAND BasicTypeAttributeToUML FOREACH references.select(e | e.to.metaType == BasicType && e.visible())»
		«EXPAND EnumAttributeToUML FOREACH references.select(e | e.to.metaType == Enum && e.visible())»
		«EXPAND NonFocusReferenceToUML FOREACH references.select(
			e | e.to.metaType != Enum && e.to.metaType != BasicType && !focus.contains(e.to.module) && e.visible())»
			</table>		
		</td></tr>
	«ENDIF»
	«IF operations.exists(e | e.isPublicVisibility() && e.visible()) && showCompartment(detail)»
		<tr><td>
			<table border="0" cellspacing="0" cellpadding="1">
			«EXPAND OperationToUML FOREACH operations.select(e | e.isPublicVisibility() && e.visible())»
			</table>		
		</td></tr>
	«ENDIF»
	«ENDLET»
	</table>>, fontname="arial", fontcolor="«fontcolor()»", fontsize=9.0];
«ENDIF»
«ENDDEFINE»

«REM»Skip Traits«ENDREM»
«DEFINE ObjectToUML(Set[Module] focus, int detail) FOR Trait»
«ENDDEFINE»

«DEFINE AttributeToUML FOR Attribute»
		«IF !this.isSystemAttribute()»
			«IF this.naturalKey» 
				<tr><td align="left"><font face="arialbd"> * «this.name» : «this.type» </font> </td></tr>			
			«ELSE»
				<tr><td align="left"> + «this.name» : «this.type» </td></tr>
			«ENDIF»
		
		«ENDIF»
«ENDDEFINE»

«DEFINE BasicTypeAttributeToUML FOR Reference»
		«IF this.naturalKey» 
			<tr><td align="left"><font face="arialbd"> * «this.name» : «this.to.name» </font> </td></tr>			
		«ELSE»
			<tr><td align="left"> + «this.name» : «this.to.name» </td></tr>
		«ENDIF»
«ENDDEFINE»

«DEFINE EnumAttributeToUML FOR Reference»
		«IF this.naturalKey» 
			<tr><td align="left"><font face="arialbd"> * «this.name» : «this.to.name» </font> </td></tr>			
		«ELSE»
			<tr><td align="left"> + «this.name» : «this.to.name» </td></tr>
		«ENDIF»
«ENDDEFINE»

«DEFINE NonFocusReferenceToUML FOR Reference»
	«LET (collectionType != null ? collectionType + "&lt;" : "") +
		 to.name +
		 (collectionType != null ? "&gt;" : "")  AS typeStr»
		«IF this.naturalKey» 
			<tr><td align="left"><font face="arialbd"> * «this.name» : «typeStr» </font> </td></tr>			
		«ELSE»
			<tr><td align="left"> + «this.name» : «typeStr» </td></tr>
		«ENDIF»
	«ENDLET»
«ENDDEFINE»

«DEFINE EnumValueToUML FOR EnumValue»
			<tr><td align="left"> + «this.name»</td></tr>
«ENDDEFINE»

«DEFINE OperationToUML FOR DomainObjectOperation»
			<tr><td align="left">«this.name»()</td></tr>
«ENDDEFINE»

«DEFINE InheritanceToUML(Set[Module] focus, int detail) FOR DomainObject»
	«IF this.isShownInView(focus, detail) && extends.isShownInView(focus, detail) -»
		«name»:p -> «extends.name»:p
	«ENDIF»
«ENDDEFINE»

«DEFINE RelationToUML(Set[Module] focus, int detail) FOR Reference»
	«IF from.isShownInView(focus, detail) && to.isShownInView(focus, detail) -»
		«IF isAggregate() -»
			edge [arrowtail="diamond" arrowhead = "none" «
		ELSEIF this.opposite == null -»
			edge [arrowtail="none" arrowhead = "open" «
		ELSE -»
	    	edge [arrowtail="none" arrowhead = "none" «
		ENDIF »headlabel="«detail > 1 ? "" : this.referenceHeadLabel()»" taillabel="«detail > 1 ? "" : this.referenceTailLabel()»" labeldistance="«labeldistance()»" labelangle="«labelangle()»"]
	
		«this.from.name» -> «this.to.name»
	«ENDIF-»
«ENDDEFINE»

«DEFINE ModuleDependenciesToUML FOR Module»
	«EXPAND ModuleDependencyToUML(this) FOREACH moduleDependencies()»
«ENDDEFINE»

«DEFINE ModuleDependencyToUML(Module from) FOR Module»
		edge [arrowtail="none" arrowhead = "open" headlabel = "" taillabel = "" style = "dashed"]
		«from.name» -> «this.name»
«ENDDEFINE»
