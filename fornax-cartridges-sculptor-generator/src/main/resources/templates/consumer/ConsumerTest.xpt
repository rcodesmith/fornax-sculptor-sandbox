«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«EXTENSION extensions::properties»
«EXTENSION extensions::helper»

«DEFINE consumerJUnitWithAnnotations FOR Consumer»
    «FILE javaFileName(getConsumerPackage() + "." + name + "Test") TO_SRC_TEST»
«javaHeader()»
package «getConsumerPackage()»;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

/**
 * JUnit test.
 */
public class «name»Test extends «databaseJpaTestCaseClass()» {

    @org.springframework.beans.factory.annotation.Autowired
    private «consumerInterface()» «name.toFirstLower()»;

	«EXPAND consumerJUnitGetDataSetFile»

	«EXPAND receiveTestMethod»

}
    «ENDFILE »
«ENDDEFINE »

«DEFINE consumerJUnitGetDataSetFile FOR Consumer»
	«IF getDbUnitDataSetFile() != null»
	    @Override
        protected String getDataSetFile() {
    	    return "«getDbUnitDataSetFile()»";
        }
    «ENDIF»
«ENDDEFINE»

«DEFINE receiveTestMethod FOR Consumer»
	@org.junit.Test
    public void testReceive() throws Exception {
        // TODO Auto-generated method stub
        //«name.toFirstLower()».receive(event);
        fail("testReceive not implemented");
    }
«ENDDEFINE »

«DEFINE dbunitTestData FOR Consumer»
    «FILE "dbunit/" + name + "Test.xml" TO_RESOURCES_TEST»
		«EXPAND templates::db::DbUnit::dbunitTestDataContent FOR module.application»
    «ENDFILE »
«ENDDEFINE »

«DEFINE consumerDependencyInjectionJUnit FOR Consumer»
    «FILE javaFileName(getConsumerPackage() + "." + name + "DependencyInjectionTest") TO_GEN_SRC_TEST»
«javaHeader()»
package «getConsumerPackage()»;

/**
 * JUnit test to verify that dependency injection setter methods
 * of other Spring beans have been implemented.
 */
public class «name»DependencyInjectionTest extends junit.framework.TestCase {

    «EXPAND consumerDependencyInjectionTestMethod(this) FOREACH otherDependencies»

}
    «ENDFILE »
«ENDDEFINE »

«REM»This (String) is the name of the dependency«ENDREM»
«DEFINE consumerDependencyInjectionTestMethod(Consumer consumer) FOR String»
    public void test«this.toFirstUpper()»Setter() throws Exception {
        Class clazz = «consumer.getConsumerPackage()».«consumer.name».class;
        java.lang.reflect.Method[] methods = clazz.getMethods();
        String setterMethodName = "set«this.toFirstUpper()»";
        java.lang.reflect.Method setter = null;
        for (int i = 0; i < methods.length; i++) {
            if (methods[i].getName().equals(setterMethodName) &&
                    void.class.equals(methods[i].getReturnType()) &&
                    methods[i].getParameterTypes().length == 1) {
                setter = methods[i];
                break;
            }
        }

        assertNotNull("Setter method for dependency injection of " +
                    "«this» must be defined in «consumer.name».",
                    setter);

        «consumer.getConsumerPackage()».«consumer.name» «consumer.name.toFirstLower()» = new «consumer.getConsumerPackage()».«consumer.name»();
        try {
            setter.invoke(«consumer.name.toFirstLower()», new Object[] {null});
        } catch (java.lang.reflect.InvocationTargetException e) {
            if (e.getCause().getClass().equals(UnsupportedOperationException.class)) {
                assertTrue(e.getCause().getMessage(), false);
            } else {
                // exception due to something else, but the method was not forgotten
            }
        }

    }
«ENDDEFINE»