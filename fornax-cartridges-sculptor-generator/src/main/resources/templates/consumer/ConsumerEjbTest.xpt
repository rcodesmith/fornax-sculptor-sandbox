«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«EXTENSION extensions::properties»
«EXTENSION extensions::helper»
«EXTENSION extensions::xmlhelper»

«DEFINE consumerJUnitOpenEjb FOR Consumer»
    «FILE javaFileName(getConsumerPackage() + "." + name + "Test") TO_SRC_TEST»
«javaHeader()»
package «getConsumerPackage()»;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

/**
 * JUnit test with OpenEJB and DbUnit support.
 */
public class «name»Test extends «IF jpa()»«fw("test.AbstractOpenEJBDbUnitTest")»«ELSE»«fw("test.AbstractOpenEJBTest")»«ENDIF» {

    @javax.annotation.Resource(mappedName="«name.toFirstLower()»")
    private javax.jms.Queue queue;

	«EXPAND ConsumerTest::consumerJUnitGetDataSetFile»

    «EXPAND openEjbTestMethod»

    «EXPAND junitCreateMessage»

}
    «ENDFILE »
«ENDDEFINE »

«DEFINE openEjbTestMethod FOR Consumer»
	@org.junit.Test
    public void testConsume() throws Exception {
        // TODO Auto-generated method stub
        String message = createMessage();
        javax.jms.Destination replyTo = sendMessage(queue, message);
        waitForReply(replyTo);
        fail("testConsume not implemented");
    }
«ENDDEFINE »

«DEFINE junitCreateMessage FOR Consumer»
    «IF messageRoot == null»
    private String createMessage() {
        String msg =
            "<?xml version='1.0' encoding='UTF-8'?>\n" +
            "<«name.toXmlName()»-message>\n" +
            "</«name.toXmlName()»-message>\n";
        return msg;
    }
    «ELSE»
    «LET module.application.name.subString(0,1).toLowerCase() AS prefix»
    private String createMessage() {
        String msg =
            "<?xml version='1.0' encoding='UTF-8'?>\n" +
            "<«prefix»:«messageRoot.name.toXmlName()»>\n" +
            "    xmlns:«prefix»='«module.application.getSchemaUrl()»' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='«module.application.getSchemaUrl()» «module.application.getSchemaUrl()»/schemas/«messageRoot.name.toXmlName()».xsd'" +
            "</«prefix»:«messageRoot.name.toXmlName()»>\n";
        return msg;
    }
    «ENDLET»
    «ENDIF»
«ENDDEFINE »