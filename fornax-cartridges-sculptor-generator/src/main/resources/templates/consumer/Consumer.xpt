«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«EXTENSION extensions::properties»
«EXTENSION extensions::helper»
«EXTENSION extensions::dbhelper»
«EXTENSION extensions::xmlhelper»

«DEFINE consumer FOR Consumer»
	«IF pureEjb3()»
		«EXPAND ConsumerEjb::messageBeanImplBase»
    	«EXPAND ConsumerEjb::messageBeanImplSubclass»
	«ELSE»
		«EXPAND consumerInterface»
		«EXPAND eventConsumerImplBase»
    	«EXPAND eventConsumerImplSubclass»
	«ENDIF»
    
    «IF isTestToBeGenerated()»
	    «IF pureEjb3()»
	    	«EXPAND ConsumerEjbTest::consumerJUnitOpenEjb»
	    «ELSEIF applicationServer() == "appengine"»
	    	«REM»TODO«ENDREM»
	    «ELSEIF mongoDb()»
	    	«REM»TODO«ENDREM»
	    «ELSE»
		    «EXPAND ConsumerTest::consumerJUnitWithAnnotations»
		«ENDIF»
		«IF isDbUnitTestDataToBeGenerated()»
			«EXPAND ConsumerTest::dbunitTestData»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE consumerInterface FOR Consumer»
    «FILE javaFileName(getConsumerPackage() + "." + name)»
«javaHeader()»
package «getConsumerPackage()»;

public interface «name» extends «consumerInterface()» {

}
	«ENDFILE»
«ENDDEFINE»


«DEFINE eventConsumerImplBase FOR Consumer»
    «FILE javaFileName(getConsumerPackage() + "." + name + "ImplBase")»
«javaHeader()»
package «getConsumerPackage()»;

«IF formatJavaDoc() == "" -»
/**
 * Generated base class for implementation of Consumer «name».
	«IF isSpringToBeGenerated() -»
 * <p>Make sure that subclass defines the following annotations:
 * <pre>
   @org.springframework.stereotype.Component("«name.toFirstLower()»")
 * </pre>
 *	«ENDIF»
 */
«ELSE -»
«formatJavaDoc()»
«ENDIF -»
«IF subscribe != null»«EXPAND templates::common::PubSub::subscribeAnnotation FOR subscribe»«ENDIF»
public abstract class «name»ImplBase implements «name» {

    public final static String BEAN_ID = "«name.toFirstLower()»";

    public «name»ImplBase() {
    }
    
    «EXPAND serviceDependencies»
    «EXPAND repositoryDependencies»

    «EXPAND consumerHook»

}
    «ENDFILE»
«ENDDEFINE»


«DEFINE eventConsumerImplSubclass FOR Consumer»
    «FILE javaFileName(getConsumerPackage() + "." + name + "Impl") TO_SRC»
«javaHeader()»
package «getConsumerPackage()»;

/**
 * Implementation of «name».
 */
 «IF isSpringToBeGenerated()»
@org.springframework.stereotype.Component("«name.toFirstLower()»")
«ENDIF»
public class «name»Impl extends «name»ImplBase {

    public «name»Impl() {
    }

    «EXPAND otherDependencies»

    «EXPAND receiveMethodSubclass»

}
    «ENDFILE»
«ENDDEFINE»

«DEFINE receiveMethodSubclass FOR Consumer»
	public void receive(«fw("event.Event")» event) {
		// TODO Auto-generated method stub
        throw new UnsupportedOperationException("«name» not implemented");
	}
«ENDDEFINE»

«DEFINE serviceDependencies FOR Consumer»
	«FOREACH serviceDependencies AS serviceDependency »
		«IF isSpringToBeGenerated()»
	    	@org.springframework.beans.factory.annotation.Autowired
		«ENDIF»
		«IF pureEjb3()»
			@javax.ejb.EJB
		«ENDIF»
        private «getServiceapiPackage(serviceDependency)».«serviceDependency.name»«IF pureEjb3()»Local«ENDIF» «serviceDependency.name.toFirstLower()»;
		
        protected «getServiceapiPackage(serviceDependency)».«serviceDependency.name» get«serviceDependency.name»() {
            return «serviceDependency.name.toFirstLower()»;
        }
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE repositoryDependencies FOR Consumer»
	«FOREACH repositoryDependencies AS repositoryDependency »
        «IF isSpringToBeGenerated()»
	    @org.springframework.beans.factory.annotation.Autowired
		«ENDIF»
		«IF pureEjb3()»
			@javax.ejb.EJB
		«ENDIF»
        private «getRepositoryapiPackage(repositoryDependency.aggregateRoot.module)».«repositoryDependency.name» «repositoryDependency.name.toFirstLower()»;
        
        protected «getRepositoryapiPackage(repositoryDependency.aggregateRoot.module)».«repositoryDependency.name» get«repositoryDependency.name»() {
            return «repositoryDependency.name.toFirstLower()»;
        }
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE otherDependencies FOR Consumer»
	«FOREACH otherDependencies AS dependency -»
    /**
     * Dependency injection
     */
	«IF isSpringToBeGenerated()»
    @org.springframework.beans.factory.annotation.Autowired
	«ENDIF»
	«IF pureEjb3()»
		@javax.ejb.EJB
	«ENDIF»
    public void set«dependency.toFirstUpper()»(Object «dependency») {
        // TODO implement setter for dependency injection of «dependency»
        throw new UnsupportedOperationException("Implement setter for dependency injection of «dependency» in «name»");
    }

    «ENDFOREACH -»
«ENDDEFINE»

«DEFINE consumeMethodBase FOR Consumer»
	«IF messageRoot != null»
    public String consume(String textMessage)
        throws «applicationExceptionClass()» {

        «getXmlMapperPackage()».«messageRoot.name»Mapper mapper = new «getXmlMapperPackage()».«messageRoot.name»Mapper(textMessage);
        return consume(mapper.get«messageRoot.name»());
    }

    protected abstract String consume(«messageRoot.getDomainPackage()».«messageRoot.name» «messageRoot.name.toFirstLower()»)
        throws «applicationExceptionClass()»;
    «ENDIF»
«ENDDEFINE»

«DEFINE consumeMethodSubclass FOR Consumer»
	«IF messageRoot == null»
    public String consume(String textMessage) throws «applicationExceptionClass()» {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("«name».consume not implemented");

        //return null; // no reply
    }
    «ELSE»
    protected String consume(«messageRoot.getDomainPackage()».«messageRoot.name» «messageRoot.name.toFirstLower()»)
        throws «applicationExceptionClass()» {

        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("«name».consume not implemented");

        //return null; // no reply
    }
    «ENDIF»
«ENDDEFINE»

«REM»TODO move to common template«ENDREM»
«DEFINE serialVersionUID FOR Consumer»
    private static final long serialVersionUID = 1L;
«ENDDEFINE»

«REM»Extension point to generate more stuff in consumer implementation.
User AROUND templates::consumer::Consumer::consumerHook FOR Consumer
in SpecialCases.xpt«ENDREM»
«DEFINE consumerHook FOR Consumer»
«ENDDEFINE»



