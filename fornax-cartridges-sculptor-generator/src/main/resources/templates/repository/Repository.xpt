«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»
 
«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»

«DEFINE repository FOR Repository»
    «EXPAND repositoryInterface»
    «EXPAND repositoryBase»
    «IF gapClass»
    	«EXPAND repositorySubclass»
    «ENDIF»
    «IF !otherDependencies.isEmpty»
        «EXPAND repositoryDependencyInjectionJUnit»
    «ENDIF»
«ENDDEFINE»

«DEFINE repositoryInterface FOR Repository»
    «LET getRepositoryBaseName() AS baseName »
    «FILE javaFileName(aggregateRoot.module.getRepositoryapiPackage() + "." + name)»
«javaHeader()»
package «aggregateRoot.module.getRepositoryapiPackage()»;

«IF formatJavaDoc() == "" -»
/**
 * Generated interface for Repository for «baseName»
 */
«ELSE -»
«formatJavaDoc()»
«ENDIF -»
«IF pureEjb3()-»
@javax.ejb.Local
«ENDIF -»
public interface «name» «IF subscribe != null»extends «fw("event.EventSubscriber")» «ENDIF» {

	«IF isSpringToBeGenerated()»
    public final static String BEAN_ID = "«name.toFirstLower()»";
    «ENDIF»

    «EXPAND interfaceRepositoryMethod FOREACH operations.select(op | op.isPublicVisibility())»

	«EXPAND repositoryInterfaceHook»
}
    «ENDFILE»
    «ENDLET»
«ENDDEFINE»

«DEFINE repositoryBase FOR Repository»
    «LET getRepositoryBaseName() AS baseName »
    «FILE javaFileName(aggregateRoot.module.getRepositoryimplPackage() + "." + name +
    	(gapClass ? "Base" : getSuffix("Impl")))»
«javaHeader()»
package «aggregateRoot.module.getRepositoryimplPackage()»;

«IF gapClass»
/**
 * Generated base class for implementation of Repository for «baseName»
	«IF isSpringToBeGenerated() -»
 * <p>Make sure that subclass defines the following annotations:
 * <pre>
   @org.springframework.stereotype.Repository("«name.toFirstLower()»")
 * </pre>
 *	«ENDIF -»
	«IF pureEjb3()-»
 * <p>Make sure that subclass defines the following annotations:
 * <pre>
   @javax.ejb.Stateless(name="«name.toFirstLower()»")
 * </pre>
 *	«ENDIF»
 */
«ELSE»
/**
 * Repository implementation for «baseName»
 */
	«IF isSpringToBeGenerated()»
@org.springframework.stereotype.Repository("«name.toFirstLower()»")
	«ENDIF»
	«IF pureEjb3()»
@javax.ejb.Stateless(name="«name.toFirstLower()»")
	«ENDIF»
«ENDIF»
«IF subscribe != null»«EXPAND templates::common::PubSub::subscribeAnnotation FOR subscribe»«ENDIF»
public «IF gapClass»abstract «ENDIF»class «name»«gapClass ? "Base" : getSuffix("Impl")» «extendsLitteral()»
    implements «aggregateRoot.module.getRepositoryapiPackage()».«name» {

    public «name»«gapClass ? "Base" : getSuffix("Impl")»() {
    }

    «EXPAND repositoryDependencies»

    «EXPAND baseRepositoryMethod FOREACH operations.select(op | op.delegateToAccessObject && !op.isGenericAccessObject())»
    «EXPAND genericBaseRepositoryMethod FOREACH operations.select(op | op.isGenericAccessObject()).reject(e|e.hasPagingParameter())»
    «EXPAND pagedGenericBaseRepositoryMethod FOREACH operations.select(op | op.isGenericAccessObject() && op.hasPagingParameter())»

    «EXPAND abstractBaseRepositoryMethod FOREACH operations.select(op | !op.delegateToAccessObject && !op.isGenericAccessObject())»

	«IF jpa() && isJpaProviderDataNucleus() && !pureEjb3()»
	    @javax.persistence.PersistenceContext«IF persistenceContextUnitName() != ""»(unitName = "«persistenceContextUnitName()»")«ENDIF»
	    private javax.persistence.EntityManager entityManager;
	«ENDIF»

	«IF pureEjb3() && jpa()»
		«EXPAND entityManagerDependency »
	«ELSEIF isSpringToBeGenerated() && jpa()»
		«EXPAND daoSupportEntityManagerDependency »
	«ELSEIF mongoDb()»
		«EXPAND dbManagerDependency»
	«ENDIF»
	
	«EXPAND accessObjectFactory»
	
	«EXPAND repositoryHook»

}
    «ENDFILE»
    «ENDLET»
«ENDDEFINE»

«DEFINE accessObjectFactory FOR Repository»
	«EXPAND AccessObjectFactory::genericFactoryMethod FOREACH getDistinctOperations().select(op | op.isGenericAccessObject())»
    «EXPAND AccessObjectFactory::factoryMethod FOREACH getDistinctOperations().select(op | op.delegateToAccessObject && !op.isGenericAccessObject())»
	«EXPAND AccessObjectFactory::getPersistentClass»
	«IF mongoDb()»
		«EXPAND AccessObjectFactory::getAdditionalDataMappers»
		«EXPAND AccessObjectFactory::ensureIndex»
	«ENDIF»
«ENDDEFINE»

«DEFINE entityManagerDependency FOR Repository»
	@javax.persistence.PersistenceContext«IF persistenceContextUnitName() != ""»(unitName = "«persistenceContextUnitName()»")«ENDIF»
	private javax.persistence.EntityManager entityManager;

    /**
     * Dependency injection
     */
    @javax.persistence.PersistenceContext«IF persistenceContextUnitName() != ""»(unitName = "«persistenceContextUnitName()»")«ENDIF»
    protected void setEntityManager(javax.persistence.EntityManager entityManager) {
    	this.entityManager = entityManager;
    }

    protected javax.persistence.EntityManager getEntityManager() {
        return entityManager;
    }
«ENDDEFINE»

«DEFINE dbManagerDependency FOR Repository»
	@org.springframework.beans.factory.annotation.Autowired
	private «fw("accessimpl.mongodb.DbManager")» dbManager;
	
	protected «fw("accessimpl.mongodb.DbManager")» getDbManager() {
	    return dbManager;
	}
«ENDDEFINE»

«DEFINE daoSupportEntityManagerDependency FOR Repository»
    private javax.persistence.EntityManager entityManager;
    
    /**
     * Dependency injection
     */
    @javax.persistence.PersistenceContext«IF persistenceContextUnitName() != ""»(unitName = "«persistenceContextUnitName()»")«ENDIF»
    protected void setEntityManagerDependency(javax.persistence.EntityManager entityManager) {
    	this.entityManager = entityManager;
    	// for JpaDaoSupport, JpaTemplate
    	setEntityManager(entityManager);
    }
    
    protected javax.persistence.EntityManager getEntityManager() {
        return entityManager;
    }
«ENDDEFINE»

«DEFINE repositoryDependencies FOR Repository»
	«FOREACH repositoryDependencies AS dependency »
		«IF isSpringToBeGenerated()»
	    	@org.springframework.beans.factory.annotation.Autowired
		«ENDIF»
		«IF pureEjb3()»
	    	@javax.ejb.EJB
		«ENDIF»
		private «dependency.aggregateRoot.module.getRepositoryapiPackage()».«dependency.name» «dependency.name.toFirstLower()»;
	
	    protected «dependency.aggregateRoot.module.getRepositoryapiPackage()».«dependency.name» get«dependency.name»() {
	        return «dependency.name.toFirstLower()»;
	    }
    «ENDFOREACH»
«ENDDEFINE»

«DEFINE repositorySubclass FOR Repository»
    «LET getRepositoryBaseName() AS baseName »
    «FILE javaFileName(aggregateRoot.module.getRepositoryimplPackage() + "." + name + getSuffix("Impl")) TO_SRC»
«javaHeader()»
package «aggregateRoot.module.getRepositoryimplPackage()»;

/**
 * Repository implementation for «baseName»
 */
«IF isSpringToBeGenerated()»
@org.springframework.stereotype.Repository("«name.toFirstLower()»")
«ENDIF»
«IF pureEjb3()»
@javax.ejb.Stateless(name="«name.toFirstLower()»")
«ENDIF»
public class «name + getSuffix("Impl")» extends «name»Base {

    public «name + getSuffix("Impl")»() {
    }

	«EXPAND otherDependencies»

    «EXPAND subclassRepositoryMethod FOREACH operations.select(op | !op.delegateToAccessObject && !op.isGenericAccessObject())»

}
    «ENDFILE»
    «ENDLET»
«ENDDEFINE»

«DEFINE otherDependencies FOR Repository»
    «FOREACH otherDependencies AS dependency -»
    /**
     * Dependency injection
     */
    «IF isSpringToBeGenerated()»
	@org.springframework.beans.factory.annotation.Autowired
	«ENDIF»
    «IF pureEjb3()»
	@javax.ejb.EJB
	«ENDIF»
    public void set«dependency.toFirstUpper()»(Object «dependency») {
        // TODO implement setter for dependency injection of «dependency»
        throw new UnsupportedOperationException("Implement setter for dependency injection of «dependency» in «name + getSuffix("Impl")»");
    }

    «ENDFOREACH -»

«ENDDEFINE»

«DEFINE baseRepositoryMethod FOR RepositoryOperation»
  «LET repository.getRepositoryBaseName() AS baseName »
  «LET getPagingParameter() AS pagingParameter »
	/**
	 * Delegates to {@link «getAccessapiPackage(repository.aggregateRoot.module)».«getAccessObjectName()»}
	 */
	«EXPAND repositoryMethodAnnotation»
	«getVisibilityLitteral()»«getTypeName()» «name»(«EXPAND paramTypeAndName FOREACH parameters SEPARATOR ","») «
			EXPAND templates::common::Exception::throws» {
		«getAccessapiPackage(repository.aggregateRoot.module)».«getAccessObjectName()»«getGenericType()» ao = create«getAccessObjectName()»();
		«EXPAND setCache-»
		«EXPAND setOrdered-»
		«FOREACH parameters.reject(e | e == pagingParameter) AS parameter-»
		ao.set«parameter.name.toFirstUpper()»(«parameter.name»);
		«ENDFOREACH -»
		«IF pagingParameter != null-»
		if («pagingParameter.name».getStartRow() != PagedResult.UNKNOWN
				&& «pagingParameter.name».getRealFetchCount() != PagedResult.UNKNOWN) {
			ao.setFirstResult(«pagingParameter.name».getStartRow()); 
			ao.setMaxResult(«pagingParameter.name».getRealFetchCount());
		}
		«ENDIF-»
		ao.execute();
		«IF isPagedResult()-»
	        «IF isJpaProviderDataNucleus()»
	    // workaround for datanucleus serialization issue 
        java.util.ArrayList<«domainObjectType.getDomainPackage() + "." + domainObjectType.name»> result = new java.util.ArrayList<«domainObjectType.getDomainPackage() + "." + domainObjectType.name»>();
        result.addAll(ao.getResult());
	        «ELSE»
		«getAccessObjectResultTypeName()» result = ao.getResult();
	        «ENDIF»
		
		«EXPAND calculateMaxPages»

		«getTypeName()» pagedResult = new «getTypeName()»(result
				, pagingParameter.getStartRow()
				, pagingParameter.getRowCount()
				, pagingParameter.getPageSize()
				, rowCount
				, additionalRows);
		return pagedResult;
		«ELSEIF getTypeName() != "void" -»
	        «IF isJpaProviderDataNucleus() && getTypeName().startsWith("java.util.List")»
	    // workaround for datanucleus serialization issue 
        java.util.ArrayList<«domainObjectType.getDomainPackage() + "." + domainObjectType.name»> result = new java.util.ArrayList<«domainObjectType.getDomainPackage() + "." + domainObjectType.name»>();
        result.addAll(ao.getResult());
        return result;
	        «ELSE»
		return ao.getResult();
	        «ENDIF»
		«ENDIF-»
	}
  «ENDLET»
  «ENDLET»
«ENDDEFINE»

«DEFINE setCache FOR RepositoryOperation»
	«IF hasHint("cache")-»
		ao.setCache(true);
	«ENDIF-»
«ENDDEFINE»

«DEFINE setOrdered FOR RepositoryOperation»
	«IF hasHint("orderBy")-»
		ao.setOrderBy("«getHint("orderBy")»");
	«ENDIF-»
	«IF hasHint("orderByAsc") && getHint("orderByAsc") != "true"-»
		ao.setOrderByAsc(false);
	«ENDIF-»
«ENDDEFINE»

«DEFINE genericBaseRepositoryMethod FOR RepositoryOperation»
  «LET repository.getRepositoryBaseName() AS baseName »
    /**
     * Delegates to {@link «genericAccessObjectInterface(name)»}
     */
    «EXPAND repositoryMethodAnnotation»
    «getVisibilityLitteral()»«getTypeName()» «name»(«EXPAND paramTypeAndName FOREACH parameters SEPARATOR ","») «
    EXPAND templates::common::Exception::throws» {
        «genericAccessObjectInterface(name)»«getGenericType()» ao = create«getAccessObjectName()»();
    	«EXPAND setCache-»
    	«EXPAND setOrdered-»
    «IF hasHint("useSingleResult")»
    	ao.setUseSingleResult(true);
    «ENDIF»
    «IF name != "findByKey" -»
    	«FOREACH parameters AS parameter-»
        ao.set«parameter.name.toFirstUpper()»(«parameter.name»);
    	«ENDFOREACH -»
    «ENDIF-»
    «EXPAND findByKeysSpecialCase»
    «EXPAND findByKeySpecialCase»
        ao.execute();
    «IF getTypeName() != "void" -»
    	«EXPAND nullThrowsNotFoundExcpetion»
        «EXPAND findByKeySpecialCase2»
        «IF (parameters.exists(e|e.name == "useSingleResult") || hasHint("useSingleResult"))  && this.collectionType == null»
        return «IF getTypeName() != "Object"»(«getTypeName().getObjectTypeName()») «ENDIF»ao.getSingleResult();
        «ELSE»
	        «IF isJpaProviderDataNucleus() && getTypeName().startsWith("java.util.List")»
	    // workaround for datanucleus serialization issue 
        java.util.ArrayList<«domainObjectType.getDomainPackage() + "." + domainObjectType.name»> result = new java.util.ArrayList<«domainObjectType.getDomainPackage() + "." + domainObjectType.name»>();
        result.addAll(ao.getResult());
        return result;
	        «ELSE»
        return ao.getResult();
        	«ENDIF»
        «ENDIF»
    «ENDIF-»
    }
    «EXPAND findByNaturalKeys -»
  «ENDLET»
«ENDDEFINE»

«DEFINE pagedGenericBaseRepositoryMethod FOR RepositoryOperation»
  «LET repository.getRepositoryBaseName() AS baseName »
  «LET getPagingParameter() AS pagingParameter »
	«EXPAND repositoryMethodAnnotation»
	«getVisibilityLitteral()»«getTypeName()» «name»(«EXPAND paramTypeAndName FOREACH parameters SEPARATOR ","») «
				EXPAND templates::common::Exception::throws» {
		«genericAccessObjectInterface(name)»«getGenericType()» ao = create«getAccessObjectName()»();
		«EXPAND setCache-»
		«EXPAND setOrdered-»
		«FOREACH parameters.reject(e | e == pagingParameter) AS parameter-»
		ao.set«parameter.name.toFirstUpper()»(«parameter.name»);
		«ENDFOREACH -»

		if («pagingParameter.name».getStartRow() != PagedResult.UNKNOWN
				&& «pagingParameter.name».getRealFetchCount() != PagedResult.UNKNOWN) {
			ao.setFirstResult(«pagingParameter.name».getStartRow()); 
			ao.setMaxResult(«pagingParameter.name».getRealFetchCount());
		}

		ao.execute();
	«IF isPagedResult()-»
	        «IF isJpaProviderDataNucleus()»
	    // workaround for datanucleus serialization issue 
        java.util.ArrayList<«domainObjectType.getDomainPackage() + "." + domainObjectType.name»> result = new java.util.ArrayList<«domainObjectType.getDomainPackage() + "." + domainObjectType.name»>();
        result.addAll(ao.getResult());
	        «ELSE»
		«getAccessObjectResultTypeName()» result = ao.getResult();
	        «ENDIF»
		«EXPAND calculateMaxPages»

		«getTypeName()» pagedResult = new «getTypeName()»(result
				, pagingParameter.getStartRow()
				, pagingParameter.getRowCount()
				, pagingParameter.getPageSize()
				, rowCount
				, additionalRows);
		return pagedResult;
	«ELSEIF getTypeName() != "void" -»
		return ao.getResult();
	«ENDIF-»
	}
	«EXPAND findByNaturalKeys -»
  «ENDLET»
  «ENDLET»
«ENDDEFINE»

«DEFINE calculateMaxPages FOR RepositoryOperation»
	«LET getPagingParameter() AS pagingParameter »
	«LET getHint("countOperation") AS countOperationHint»
	«LET getHint("countQuery") AS countQueryHint»
		int rowCount = PagedResult.UNKNOWN;
		int additionalRows=PagedResult.UNKNOWN;
		if («pagingParameter.name».getStartRow() != PagedResult.UNKNOWN && «pagingParameter.name».getRealFetchCount() != 0) {
			int resultSize=result.size();
			if (resultSize > 0 && resultSize < pagingParameter.getRealFetchCount()) {
				// Not enough rows fetched - end of result reached, we should fill row
				// count and also additional pages without real counting.
				// Fill it even when nobody  ask (isCountTotal), don't cost nothing and can be used on client side
				rowCount=pagingParameter.getStartRow()+resultSize;
				additionalRows=resultSize - pagingParameter.getRowCount();
				additionalRows=additionalRows < 0 ? 0 : additionalRows;
			} else {
				if («pagingParameter.name».isCountTotal()) {
				«IF countOperationHint != null»
					«LET repository.operations.selectFirst(e | e != this && e.name == countOperationHint) AS countOperation»
						«IF countOperation == null»
							Number countNumber = «countOperationHint»«IF !countOperationHint.endsWith(")")»()«ENDIF»;
						«ELSE»
							Number countNumber = «countOperation.name»(«FOREACH countOperation.parameters AS param SEPARATOR ", "
								»«IF parameters.exists(e|e.name == param.name)»«param.name»«ELSE»null«ENDIF»«ENDFOREACH»);
						«ENDIF»
					«ENDLET»
				«ELSEIF countQueryHint != null || name == "findByQuery"» 
					«LET repository.operations.selectFirst(e | e != this && e.name == "findByQuery" && e.parameters.exists(p | p.name == "useSingleResult")) AS countOperation1»
					«LET repository.operations.selectFirst(e | e != this && e.name == "findByQuery") AS countOperation2»
					«LET countOperation1 != null ? countOperation1 : countOperation2 AS countOperation»
						«IF countOperation == null»
							// TODO define findByQuery
							Number countNumber = null;
						«ELSE»
							«IF parameters.notExists(e|e.name == "parameters") && countOperation.parameters.exists(e|e.name == "parameters")»
							java.util.Map<String, Object> parameters = new java.util.HashMap<String, Object>();
							«FOREACH parameters.reject(e | e.isPagingParameter()) AS param -»
							parameters.put("«param.name»", «param.name»);
							«ENDFOREACH»
							«ENDIF»
							Number countNumber = «IF countOperation.getTypeName() == "Object"»(Number) «ENDIF-» 
								«countOperation.name»(«FOREACH countOperation.parameters AS param SEPARATOR ", "
								»«IF param.name == "query" || param.name == "namedQuery"»«IF countQueryHint == null»«param.name».replaceFirst("find", "count")«ELSE»"«countQueryHint»"«ENDIF»«
								ELSEIF param.name == "useSingleResult"»true«
								ELSEIF param.name == "parameters"»parameters«
								ELSEIF parameters.exists(e|e.name == param.name)»«param.name»«
								ELSE»null«ENDIF»«ENDFOREACH»)«IF countOperation1 == null».size()«ENDIF»;
						«ENDIF»
					«ENDLET»
					«ENDLET»
					«ENDLET»
				«ELSEIF name == "findByCondition"»
					ao.executeCount();
					Number countNumber = ao.getResultCount();
				«ELSE»
					// If you need to calculate max pages you should define hint="countOperation=..." or hint="countQuery=..."
					Number countNumber = null;
				«ENDIF»
					rowCount = countNumber == null ? PagedResult.UNKNOWN : countNumber.intValue();
				}
				if (rowCount != PagedResult.UNKNOWN) {
					additionalRows = rowCount - pagingParameter.getEndRow();
					additionalRows = additionalRows < 0 ? 0 : additionalRows;
				} else {
					additionalRows = resultSize - pagingParameter.getRowCount();
					additionalRows = additionalRows < 0 ? 0 : additionalRows;
				}
	
				additionalRows = additionalRows > pagingParameter.getAdditionalResultRows()
					? pagingParameter.getAdditionalResultRows()
					: additionalRows;
			}
		}
	«ENDLET»
	«ENDLET»
	«ENDLET»
«ENDDEFINE»

«DEFINE findByNaturalKeys FOR RepositoryOperation»
    «IF (name == "findByKeys") && repository.aggregateRoot.hasNaturalKey() »
      «IF repository.aggregateRoot.getAllNaturalKeyAttributes().size == 1 && repository.aggregateRoot.getAllNaturalKeyReferences().isEmpty»
        «EXPAND findByNaturalKeys(repository,
            repository.aggregateRoot.getAllNaturalKeyAttributes().first().getTypeName(),
            repository.aggregateRoot.getAllNaturalKeyAttributes().first().name)»
      «ELSEIF repository.aggregateRoot.getAllNaturalKeyReferences().size == 1 && repository.aggregateRoot.getAllNaturalKeyAttributes().isEmpty»
        «EXPAND findByNaturalKeys(repository,
            repository.aggregateRoot.getAllNaturalKeyReferences().first().to.getDomainPackage() + "." + repository.aggregateRoot.getAllNaturalKeyReferences().first().to.name,
            repository.aggregateRoot.getAllNaturalKeyAttributes().first().name)»
      «ELSE»
        «EXPAND findByNaturalKeys(repository,
            repository.aggregateRoot.getDomainPackage() + "." + repository.aggregateRoot.name + (repository.aggregateRoot.gapClass ? "Base" : "") + "." + repository.aggregateRoot.name + "Key",
            "key") »
      «ENDIF»
    «ENDIF»
«ENDDEFINE»

«DEFINE findByNaturalKeys(Repository repository, String naturalKeyTypeName, String keyPropertyName) FOR RepositoryOperation»
    «LET repository.aggregateRoot.getDomainPackage() + "." + repository.aggregateRoot.name AS fullAggregateRootName »
    «LET naturalKeyTypeName.getObjectTypeName() AS naturalKeyObjectType »
     /**
      * Find by the natural keys.
      * Delegates to {@link «genericAccessObjectInterface(name)»}
      */
     «getVisibilityLitteral()»java.util.Map<«naturalKeyObjectType», «fullAggregateRootName»> findByNaturalKeys(java.util.Set<«naturalKeyObjectType»> naturalKeys) {
          java.util.Map<Object, «fullAggregateRootName»> result1 = findByKeys(naturalKeys«IF
            parameters.exists(p | p.name == "keyPropertyName")», "«keyPropertyName»"«ENDIF»«IF
            parameters.exists(p | p.name == "persistentClass")», «fullAggregateRootName».class«ENDIF»);
          // convert to Map with «naturalKeyObjectType» key type
          java.util.Map<«naturalKeyObjectType», «fullAggregateRootName»> result2 = new java.util.HashMap<«naturalKeyObjectType», «fullAggregateRootName»>();
          for (java.util.Map.Entry<Object, «fullAggregateRootName»> e : result1.entrySet()) {
        «IF isJpaProviderDataNucleus()»
	        // Workaround for datanucleus, bug with @Version
    	    if (entityManager != null)
        		entityManager.refresh(e.getValue());
        «ENDIF»
            result2.put((«naturalKeyObjectType») e.getKey(), e.getValue());
          }
          return result2;
      }
    «ENDLET»
    «ENDLET»
«ENDDEFINE»

«DEFINE findByKeysSpecialCase FOR RepositoryOperation»
    «IF (name == "findByKeys") -»
      «IF !parameters.exists(p | p.name == "keyPropertyName") -»
        «IF repository.aggregateRoot.getAllNaturalKeyAttributes().size == 1 && repository.aggregateRoot.getAllNaturalKeyReferences().isEmpty»
        ao.setKeyPropertyName("«repository.aggregateRoot.getAllNaturalKeyAttributes().first().name»");
        «ELSEIF repository.aggregateRoot.getAllNaturalKeyReferences().size == 1 && repository.aggregateRoot.getAllNaturalKeyAttributes().isEmpty»
        ao.setKeyPropertyName("«repository.aggregateRoot.getAllNaturalKeyReferences().first().name»");
        «ELSE-»
        ao.setKeyPropertyName("key");
        «ENDIF -»
      «ENDIF -»

      «IF !parameters.exists(p | p.name == "restrictionPropertyName") -»
        «IF !repository.aggregateRoot.getAllNaturalKeyReferences().isEmpty -»
        ao.setRestrictionPropertyName("«repository.aggregateRoot.getAllNaturalKeyReferences().first().name».«
            repository.aggregateRoot.getAllNaturalKeyReferences().first().to.getAllNaturalKeyAttributes().first().name»");
        «ELSEIF repository.aggregateRoot.getAllNaturalKeyAttributes().size > 1 -»
        ao.setRestrictionPropertyName("«repository.aggregateRoot.getAllNaturalKeyAttributes().first().name»");
        «ENDIF-»
      «ENDIF -»
    «ENDIF -»
«ENDDEFINE»

«DEFINE findByKeySpecialCase FOR RepositoryOperation»
    «IF (name == "findByKey")-»
    	«IF repository.aggregateRoot.hasNaturalKey() -»
        	ao.setKeyPropertyNames(«FOREACH repository.aggregateRoot.getAllNaturalKeys() AS e SEPARATOR ", "»"«e.name»"«ENDFOREACH»);
        	ao.setKeyPropertyValues(«FOREACH repository.aggregateRoot.getAllNaturalKeys() AS e SEPARATOR ", "»«e.name»«ENDFOREACH»);
        «ELSEIF repository.aggregateRoot.getUuid() != null -»
        	ao.setKeyPropertyNames("«repository.aggregateRoot.getUuid().name»");
        	ao.setKeyPropertyValues(«repository.aggregateRoot.getUuid().name»);
        «ENDIF -»
    «ENDIF -»
«ENDDEFINE»

«DEFINE findByKeySpecialCase2 FOR RepositoryOperation»
  «LET repository.getRepositoryBaseName() AS baseName »
    «IF (name == "findByKey") && repository.aggregateRoot.hasNaturalKey() -»
	    «IF isJpaProviderDataNucleus()»
	    // Workaround for datanucleus, bug with @Version
	    if (entityManager != null)
	    	entityManager.refresh(ao.getResult());
	    «ENDIF»
    «ENDIF-»
  «ENDLET-»
«ENDDEFINE»

«DEFINE nullThrowsNotFoundExcpetion FOR RepositoryOperation»
  «IF hasNotFoundException()»
  «LET repository.getRepositoryBaseName() AS baseName »
    if (ao.getResult() == null) {
        throw new «getExceptionPackage(repository.aggregateRoot.module)».«repository.aggregateRoot.name»NotFoundException("No «baseName» found with «parameters.get(0).name»: " + «parameters.get(0).name»);
    }
  «ENDLET-»
  «ENDIF»
«ENDDEFINE»

«DEFINE interfaceRepositoryMethod FOR RepositoryOperation»
    «LET repository.getRepositoryBaseName() AS baseName »
     «formatJavaDoc()»
     public «getTypeName()» «name»(«EXPAND paramTypeAndName FOREACH parameters SEPARATOR ","») «
     EXPAND templates::common::Exception::throws»;
     «EXPAND findByNaturalKeysInterfaceRepositoryMethod -»
    «ENDLET»
«ENDDEFINE»

«DEFINE findByNaturalKeysInterfaceRepositoryMethod FOR RepositoryOperation»
    «IF (name == "findByKeys") && repository.aggregateRoot.hasNaturalKey()»
      «IF repository.aggregateRoot.getAllNaturalKeyAttributes().size == 1 && repository.aggregateRoot.getAllNaturalKeyReferences().isEmpty»
        «EXPAND findByNaturalKeysInterfaceRepositoryMethod(
            repository.aggregateRoot.getAllNaturalKeyAttributes().get(0).getTypeName())»
      «ELSEIF repository.aggregateRoot.getAllNaturalKeyReferences().size == 1 && repository.aggregateRoot.getAllNaturalKeyAttributes().isEmpty»
      	«EXPAND findByNaturalKeysInterfaceRepositoryMethod(
      		repository.aggregateRoot.getAllNaturalKeyReferences().first().to.getDomainPackage() + "." + repository.aggregateRoot.getAllNaturalKeyReferences().first().to.name)»
      «ELSE»
        «EXPAND findByNaturalKeysInterfaceRepositoryMethod(
            repository.aggregateRoot.getDomainPackage() + "." + repository.aggregateRoot.name + (repository.aggregateRoot.gapClass ? "Base" : "") + "." + repository.aggregateRoot.name + "Key") »
      «ENDIF»
    «ENDIF-»
«ENDDEFINE»

«DEFINE findByNaturalKeysInterfaceRepositoryMethod(String naturalKeyTypeName)  FOR RepositoryOperation»
     «IF (name == "findByKeys") && repository.aggregateRoot.hasNaturalKey()»
       «LET repository.aggregateRoot.getDomainPackage() + "." + repository.aggregateRoot.name AS fullAggregateRootName -»
       «LET naturalKeyTypeName.getObjectTypeName() AS naturalKeyObjectType »
     /**
      * Find by the natural keys.
      */
     public java.util.Map<«naturalKeyObjectType», «fullAggregateRootName»> findByNaturalKeys(java.util.Set<«naturalKeyObjectType»> naturalKeys);
        «ENDLET-»
        «ENDLET-»
     «ENDIF-»
«ENDDEFINE»


«DEFINE abstractBaseRepositoryMethod FOR RepositoryOperation»
    «LET repository.getRepositoryBaseName() AS baseName »
     «getVisibilityLitteral()»abstract «getTypeName()» «name»(«EXPAND paramTypeAndName FOREACH parameters SEPARATOR ","») «
     EXPAND templates::common::Exception::throws»;
    «ENDLET»
«ENDDEFINE»

«DEFINE subclassRepositoryMethod FOR RepositoryOperation»
    «LET repository.getRepositoryBaseName() AS baseName »
    «EXPAND repositoryMethodAnnotation»
    «getVisibilityLitteral()»«getTypeName()» «name»(«EXPAND paramTypeAndName FOREACH parameters SEPARATOR ","») {
  «IF !delegateToAccessObject»
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("«name» not implemented");
  «ELSE-»
        «getAccessapiPackage(repository.aggregateRoot.module)».«getAccessObjectName()»«getGenericType()» ao = create«getAccessObjectName()»();
    «FOREACH parameters AS parameter-»
        ao.set«parameter.name.toFirstUpper()»(«parameter.name»);
    «ENDFOREACH -»
        ao.execute();
    «IF getTypeName() != "void" -»
        return ao.getResult();
    «ENDIF-»
  «ENDIF»
     }
    «ENDLET»
«ENDDEFINE»

«DEFINE paramTypeAndName FOR Parameter»
«getTypeName()» «name»
«ENDDEFINE»


«DEFINE repositoryDependencyInjectionJUnit FOR Repository»
    «FILE javaFileName(aggregateRoot.module.getRepositoryimplPackage() + "." + name + "DependencyInjectionTest") TO_GEN_SRC_TEST»
«javaHeader()»
package «aggregateRoot.module.getRepositoryimplPackage()»;

/**
 * JUnit test to verify that dependency injection setter methods
 * of other Spring beans have been implemented.
 */
public class «name»DependencyInjectionTest extends junit.framework.TestCase {

    «EXPAND repositoryDependencyInjectionTestMethod(this) FOREACH otherDependencies»

}
    «ENDFILE »
«ENDDEFINE »

«REM»This (String) is the name of the dependency«ENDREM»
«DEFINE repositoryDependencyInjectionTestMethod(Repository repository) FOR String»
    public void test«this.toFirstUpper()»Setter() throws Exception {
        Class clazz = «repository.aggregateRoot.module.getRepositoryimplPackage()».«repository.name + getSuffix("Impl")».class;
        java.lang.reflect.Method[] methods = clazz.getMethods();
        String setterMethodName = "set«this.toFirstUpper()»";
        java.lang.reflect.Method setter = null;
        for (int i = 0; i < methods.length; i++) {
            if (methods[i].getName().equals(setterMethodName) &&
                    void.class.equals(methods[i].getReturnType()) &&
                    methods[i].getParameterTypes().length == 1) {
                setter = methods[i];
                break;
            }
        }

        assertNotNull("Setter method for dependency injection of " +
                    "«this» must be defined in «repository.name».",
                    setter);

        «repository.aggregateRoot.module.getRepositoryimplPackage()».«repository.name + getSuffix("Impl")» «repository.name.toFirstLower()» = new «repository.aggregateRoot.module.getRepositoryimplPackage()».«repository.name + getSuffix("Impl")»();
        try {
            setter.invoke(«repository.name.toFirstLower()», new Object[] {null});
        } catch (java.lang.reflect.InvocationTargetException e) {
            if (e.getCause().getClass().equals(UnsupportedOperationException.class)) {
                assertTrue(e.getCause().getMessage(), false);
            } else {
                // exception due to something else, but the method was not forgotten
            }
        }

    }
«ENDDEFINE»

«REM»Extension point to generate more stuff in repository interface.
Use AROUND templates::repository::Repository::repositoryInterfaceHook FOR Repository
in SpecialCases.xpt«ENDREM»
«DEFINE repositoryInterfaceHook FOR Repository»
«ENDDEFINE»

«REM»Extension point to generate more stuff in repository implementation.
Use AROUND templates::repository::Repository::repositoryHook FOR Repository
in SpecialCases.xpt«ENDREM»
«DEFINE repositoryHook FOR Repository»
«ENDDEFINE»

«REM»Extension point to generate annotations for repository methods.
Use AROUND templates::repository::Repository::repositoryMethodAnnotation FOR RepositoryOperation
in SpecialCases.xpt«ENDREM»
«DEFINE repositoryMethodAnnotation FOR RepositoryOperation»
«IF publish != null»«EXPAND templates::common::PubSub::publishAnnotation FOR publish»«ENDIF-»
«ENDDEFINE»