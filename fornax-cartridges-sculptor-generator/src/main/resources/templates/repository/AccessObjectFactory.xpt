«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::dbhelper»
«EXTENSION extensions::properties»

«DEFINE getPersistentClass FOR Repository»
    protected Class<«getDomainPackage(aggregateRoot)».«aggregateRoot.name»> getPersistentClass() {
        return «getDomainPackage(aggregateRoot)».«aggregateRoot.name».class;
    }
«ENDDEFINE»

«DEFINE genericFactoryMethod FOR RepositoryOperation»
    protected «genericAccessObjectInterface(name)»«getGenericType()» create«getAccessObjectName()»() {
        «genericAccessObjectImplementation(name)»«getGenericType()» ao = new «genericAccessObjectImplementation(name)»«getGenericType()»(«
            IF hasAccessObjectPersistentClassConstructor()»getPersistentClass()«ENDIF»);
		«EXPAND factoryMethodInit»
        return ao;
    }
«ENDDEFINE»

«DEFINE factoryMethod FOR RepositoryOperation»
    protected «getAccessapiPackage(repository.aggregateRoot.module)».«getAccessObjectName()»«getGenericType()» create«getAccessObjectName()»() {
        «getAccessimplPackage(repository.aggregateRoot.module)».«getAccessObjectName()»«getGenericType()»Impl«getGenericType()» ao = new «getAccessimplPackage(repository.aggregateRoot.module)».«getAccessObjectName()»«getGenericType()»Impl«getGenericType()»();
        «EXPAND factoryMethodInit»
        return ao;
    }
«ENDDEFINE»

«DEFINE factoryMethodInit FOR RepositoryOperation»
	«IF jpa()-»
		ao.setEntityManager(getEntityManager());
	«ELSEIF mongoDb() -»
		ao.setDbManager(dbManager);
		ao.setDataMapper(«repository.aggregateRoot.module.getMapperPackage()».«repository.aggregateRoot.name»Mapper.getInstance());
		ao.setAdditionalDataMappers(getAdditionalDataMappers());
	«ENDIF -»
«ENDDEFINE»

«DEFINE getAdditionalDataMappers FOR Repository»
	«LET aggregateRoot.getAggregate().getAllReferences().select(e | e.isUnownedReference()) AS allUnownedReferences»
	«LET aggregateRoot.getNaturalKeyReferences().reject(e | e.isEnumReference()) AS allNonEnumNaturalKeyReferences»
		@SuppressWarnings("unchecked")
		private «fw("accessimpl.mongodb.DataMapper")»[] additionalDataMappers =  
			new «fw("accessimpl.mongodb.DataMapper")»[] {
				«IF isJodaDateTimeLibrary() -»
				«fw("accessimpl.mongodb.JodaLocalDateMapper")».getInstance(),
				«fw("accessimpl.mongodb.JodaDateTimeMapper")».getInstance(),
				«ENDIF -»
				«fw("accessimpl.mongodb.EnumMapper")».getInstance()«IF !allUnownedReferences.isEmpty»,«ENDIF-»
				«FOREACH allUnownedReferences AS ref SEPARATOR ", "»
				«fw("accessimpl.mongodb.IdMapper")».getInstance(«ref.to.getDomainPackage()».«ref.to.name».class)
				«ENDFOREACH»«IF !allNonEnumNaturalKeyReferences.isEmpty»,«ENDIF-»
				«FOREACH allNonEnumNaturalKeyReferences AS ref SEPARATOR ", "»
					«getMapperPackage(ref.to.module)».«ref.to.name»Mapper.getInstance()
				«ENDFOREACH»
				};

		@SuppressWarnings("unchecked")
		protected «fw("accessimpl.mongodb.DataMapper")»<Object, com.mongodb.DBObject>[] getAdditionalDataMappers() {
			return additionalDataMappers;		
		}
	«ENDLET»
	«ENDLET»
«ENDDEFINE»

«DEFINE ensureIndex FOR Repository»
    @javax.annotation.PostConstruct
    protected void ensureIndex() {
        com.mongodb.DBCollection dbCollection = dbManager.getDBCollection(«aggregateRoot.module.getMapperPackage()».«aggregateRoot.name»Mapper.getInstance().getDBCollectionName());
        for («fw("accessimpl.mongodb.IndexSpecification")» each : «aggregateRoot.module.getMapperPackage()».«aggregateRoot.name»Mapper.getInstance().indexes()) {
            dbCollection.ensureIndex(each.getKeys(), each.getName(), each.isUnique());
        }
    }
«ENDDEFINE»