«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::gwt::sofeauihelpers»


«DEFINE domainObjectUIMapperDispatch(GuiApplication guiApp) FOR Module»
    «FILE javaFileName(this.dtoMapper() )»
package «getDomainPackage(this)»;

import com.google.common.base.Function;
import com.google.common.collect.Lists;

public class «name.toFirstUpper()»DtoMapper {

	protected static jmultimethod.Multimethod mapToDomainMM = new jmultimethod.Multimethod("mapToDomain", «name.toFirstUpper()»DtoMapper.class);
	protected static jmultimethod.Multimethod mapFromDomainMM = new jmultimethod.Multimethod("mapFromDomain", «name.toFirstUpper()»DtoMapper.class);

	«EXPAND mapperDispatchFn(guiApp) FOREACH this.domainObjects.select(d|d.shouldBeMapped())»

«REM»
	«EXPAND mapperDispatchFn(guiApp) FOREACH this.domainObjects.typeSelect(Entity).reject(e|e.abstract)»

	«EXPAND mapperDispatchFn(guiApp) FOREACH this.domainObjects.select(e | ValueObject.isInstance(e) && !DomainEvent.isInstance(e) && !e.abstract)»

	«EXPAND mapperDispatchFn(guiApp) FOREACH this.domainObjects.typeSelect(Enum)»

«ENDREM»	

}
    «ENDFILE»
    
«ENDDEFINE»


«DEFINE copyAttrToDomain FOR Attribute»
	domainObj.set«name.toFirstUpper()»(«this.getToDomainConversionExpression("dtoObj." + this.getGetAccessor() + "()", "domainObj." + this.getGetAccessor() + "()" )»);
«ENDDEFINE»

«DEFINE copyAttrFromDomain FOR Attribute»
	dtoObj.set«name.toFirstUpper()»(«this.getToDtoConversionExpression("domainObj." + this.getGetAccessor() + "()")»);
«ENDDEFINE»

«DEFINE copyManyRefFromDomain FOR Reference»
        {
        	java.lang.Iterable<«getGwtTypeName()»> dtosIterable =
        		com.google.common.collect.Iterables.transform(domainObj.«this.getGetAccessor()»(), new Function<«getTypeName()», «getGwtTypeName()»>() {
        		public «getGwtTypeName()» apply(
        				«getTypeName()» from) {
		    	    Object mappedDto = mapFromDomainMM.invoke(null, from);
//		    	    if(mappedDto == null) {
//		    	    	throw new IllegalArgumentException("Was unable to map " + from

        			return («getGwtTypeName()»)mappedDto;
        		}
        	});
        	dtoObj.replace«name.toFirstUpper()»(dtosIterable);
        }
«ENDDEFINE»

«DEFINE copyOneRefFromDomain FOR Reference»
		dtoObj.set«name.toFirstUpper()»(«mapFromDomainCall()»(domainObj.«this.getGetAccessor()»()));
«ENDDEFINE»

«DEFINE copyManyRefToDomain FOR Reference»
    	domainObj.removeAll«name.toFirstUpper()»();
    	for («getGwtTypeName()» obj : dtoObj.get«name.toFirstUpper()»()) {
    	    Object mappedDomain = mapToDomainMM.invoke(null, obj);
    	
    		domainObj.add«name.singular().toFirstUpper()»((«getTypeName()»)mappedDomain);
		}
«ENDDEFINE»

«DEFINE copyOneRefToDomain FOR Reference»
		domainObj.set«name.toFirstUpper()»(«mapToDomainCall()»(dtoObj.«this.getGetAccessor()»()));
«ENDDEFINE»



«DEFINE mapperDispatchFn(GuiApplication guiApp) FOR DomainObject»

	«EXPAND mapToDomain(guiApp) FOR this»
	
	public static «this.fqnDomain()» mapToDomain(«this.fqnGwtDto()» dtoObj) {
		return map«name.toFirstUpper()»ToDomain(dtoObj);
	}
	
	public static java.util.List<«this.fqnDomain()»> map«name.toFirstUpper()»ToDomain(java.util.List<«this.fqnGwtDto()»> dtoObjsList) {
        return new java.util.ArrayList<«this.fqnDomain()»>(Lists.transform(dtoObjsList, new Function<«this.fqnGwtDto()», «this.fqnDomain()»>() {
			public «this.fqnDomain()» apply(
					«this.fqnGwtDto()» from) {
				return map«name.toFirstUpper()»ToDomain(from);
			}
        }));
	}
	
	

	«EXPAND mapFromDomain(guiApp) FOR this»
	
	public static «this.fqnGwtDto()» mapFromDomain(«this.fqnDomain()» domainObj) {
		return map«name.toFirstUpper()»FromDomain(domainObj);
	}
		
	public static java.util.List<«this.fqnGwtDto()»> map«name.toFirstUpper()»FromDomain(java.util.List<«this.fqnDomain()»> domainObjsList) {
        return new java.util.ArrayList<«this.fqnGwtDto()»>(com.google.common.collect.Lists.transform(domainObjsList, new Function<«this.fqnDomain()», «this.fqnGwtDto()»>() {
			public «this.fqnGwtDto()» apply(
					«this.fqnDomain()» from) {
				return map«name.toFirstUpper()»FromDomain(from);
			}
        }));
	}
	
	public static java.util.Set<«this.fqnGwtDto()»> map«name.toFirstUpper()»FromDomain(
			java.util.Set<«this.fqnDomain()»> domainObjsSet) {

		java.util.HashSet<«this.fqnGwtDto()»> newSet = new java.util.HashSet<«this.fqnGwtDto()»>();

		java.lang.Iterable<«this.fqnGwtDto()»> transIter = com.google.common.collect.Iterables
				.transform(
						domainObjsSet,
						new Function<«this.fqnDomain()», «this.fqnGwtDto()»>() {
							@Override
							public «this.fqnGwtDto()» apply(
									«this.fqnDomain()» from) {
								return map«name.toFirstUpper()»FromDomain(from);
							}
						});

		for («this.fqnGwtDto()» toObj : transIter) {
			newSet.add(toObj);
		}
		return newSet;
	}

	
«ENDDEFINE»

«DEFINE mapToDomain(GuiApplication guiApp) FOR DomainObject»
	/**
	 * Map the «name» DTO to its corresponding domain object.
	 */
	@jmultimethod.Multi("mapToDomain")	 
	public static «this.fqnDomain()» map«name.toFirstUpper()»ToDomain(«this.fqnGwtDto()» dtoObj) {
		if(dtoObj == null) {
			return null;
		}
		«this.fqnDomain()» domainObj = new «this.fqnDomain()»(); 
		
		«REM»Copy attributes«ENDREM»
		«EXPAND copyAttrToDomain FOREACH this.getAllBusinessAttributes().select(a | a.name != "uuid")»
		
		«REM»Copy one-many«ENDREM»
		«EXPAND copyManyRefToDomain FOREACH references.select(r | r.many).reject(r | r.isUnownedReference())»

		«REM»Copy one-one«ENDREM»
		«EXPAND copyOneRefToDomain FOREACH references.select(r | !r.many).reject(r | r.isUnownedReference())»
		
		return domainObj;
	}
«ENDDEFINE»

«DEFINE mapFromDomain(GuiApplication guiApp) FOR DomainObject»
	/**
	 * Map the «name» domain object to its corresponding DTO.
	 */
	@jmultimethod.Multi("mapFromDomain")	  
	public static «this.fqnGwtDto()» map«name.toFirstUpper()»FromDomain(«this.fqnDomain()» domainObj) {
		if(domainObj == null) {
			return null;
		}

		«this.fqnGwtDto()» dtoObj = new «this.fqnGwtDto()»(); 
		
		«REM»Copy attributes«ENDREM»
		«EXPAND copyAttrFromDomain FOREACH this.getAllBusinessAttributes().select(a | a.name != "uuid")»
		
		«REM»Copy one-many«ENDREM»
		«EXPAND copyManyRefFromDomain FOREACH references.select(r | r.many).reject(r | r.isUnownedReference())»
				
		«REM»Copy one-one«ENDREM»
		«EXPAND copyOneRefFromDomain FOREACH references.select(r | !r.many).reject(r | r.isUnownedReference())»
		
		return dtoObj;
	}

«ENDDEFINE»

«DEFINE mapToDomain(GuiApplication guiApp) FOR Enum»
	/**
	 * Map the «name» DTO to its corresponding Enum domain object.
	 */
	@jmultimethod.Multi("mapToDomain")	 
	public static «this.fqnDomain()» map«name.toFirstUpper()»ToDomain(«this.fqnGwtDto()» dtoObj) {
		
		«this.fqnDomain()» domainObj = «this.fqnDomain()».valueOf(dtoObj.name()); 
		
		return domainObj;
	}
«ENDDEFINE»

«DEFINE mapFromDomain(GuiApplication guiApp) FOR Enum»
	/**
	 * Map the «name» Enum domain object to its corresponding DTO.
	 */
	@jmultimethod.Multi("mapFromDomain")	  
	public static «this.fqnGwtDto()» map«name.toFirstUpper()»FromDomain(«this.fqnDomain()» domainObj) {
		«this.fqnGwtDto()» dtoObj = «this.fqnGwtDto()».valueOf(domainObj.name()); 
		
		return dtoObj;
	}

«ENDDEFINE»
