«REM»
 * Copyright 2010 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»

«DEFINE conversationDomainObectRepository FOR GuiApplication»
«FILE javaFileName(this.basePackage + ".util." + subPackage("web") + "." + "ConversationDomainObjectMongoDbRepositoryImpl") -»
«javaHeader()»
package «basePackage».util.«subPackage("web")»;

public class ConversationDomainObjectMongoDbRepositoryImpl implements «fw("web.hibernate.ConversationDomainObjectRepository")» {
    
    «EXPAND dbManager FOR guiForApplication»
    «EXPAND mappers FOR guiForApplication»
    «EXPAND get FOR guiForApplication»
    «EXPAND revert FOR guiForApplication»
    «EXPAND clear FOR guiForApplication»

}
«ENDFILE»
«ENDDEFINE»

«DEFINE dbManager FOR Application»
	private «fw("accessimpl.mongodb.DbManager")» dbManager;
	public «fw("accessimpl.mongodb.DbManager")» getDbManager() {
		return dbManager;
	}
	public void setDbManager(«fw("accessimpl.mongodb.DbManager")» dbManager) {
		this.dbManager = dbManager;
	} 
«ENDDEFINE»

«DEFINE mappers FOR Application»
	private java.util.Map<Class<?>, «fw("accessimpl.mongodb.DataMapper")»<?, com.mongodb.DBObject>> mappers = new java.util.HashMap<Class<?>, «fw("accessimpl.mongodb.DataMapper")»<?, com.mongodb.DBObject>>();
	{
	«FOREACH getAllDomainObjects(false).select(e | e.isPersistent() || e.metaType == BasicType) AS each -»
		mappers.put(«each.getDomainPackage()».«each.name».class, «each.module.getMapperPackage()».«each.name»Mapper.getInstance());
	«ENDFOREACH»
	}
«ENDDEFINE»

«DEFINE get FOR Application»
	@SuppressWarnings("unchecked")
    public <T> T get(Class<T> domainObjectClass, java.io.Serializable id) {
    	«fw("accessimpl.mongodb.DataMapper")»<T, com.mongodb.DBObject> mapper = («fw("accessimpl.mongodb.DataMapper")»<T, com.mongodb.DBObject>) mappers.get(domainObjectClass);
    	if (mapper == null) {
    		throw new IllegalArgumentException("Unsupported domain object: " + domainObjectClass.getName());
    	}
    	com.mongodb.DBRef dbRef = new com.mongodb.DBRef(dbManager.getDB(), mapper.getDBCollectionName(), 
            org.bson.types.ObjectId.massageToObjectId(id));
        T result = mapper.toDomain(dbRef.fetch());
        return result;
    }
«ENDDEFINE»

«DEFINE revert FOR Application»
    public void revert(Object domainObject) {
    	// TODO revert
    	throw new UnsupportedOperationException("Revert not implemented yet");
    }
«ENDDEFINE»

«DEFINE clear FOR Application»
	public void clear() {
	}
«ENDDEFINE»

