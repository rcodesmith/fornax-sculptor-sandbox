«REM»
 * Copyright 2008 The Fornax Project Team, including the original 
 * author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»

«EXTENSION extensions::helper»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::properties»

«DEFINE createControllerTest FOR GuiApplication»
	«EXPAND createControllerTest FOREACH modules»
«ENDDEFINE» 

«DEFINE createControllerTest FOR GuiModule»
	«EXPAND createControllerTest FOREACH userTasks.typeSelect(CreateTask)»
«ENDDEFINE»

«DEFINE createControllerTest FOR CreateTask»
	«EXPAND createControllerTestBase»
	«EXPAND createControllerTestImpl»
«ENDDEFINE»

«DEFINE createControllerTestBase FOR CreateTask»
	«FILE javaFileName(module.getRichClientPackage() + ".controller.New" +for.name + "ControllerTestBase") TO_GEN_SRC_TEST-»
«javaHeader()»
package «module.getRichClientPackage()».controller;

public abstract class New«for.name»ControllerTestBase {

	«EXPAND setUpBeforeClass»
	«EXPAND setUp»
	«EXPAND abstractPopulateFormSuccess»
	«EXPAND newSuccess»
	«EXPAND abstractCreateSelectedObject»
	«EXPAND newFromSelectionSuccess»
	
	«EXPAND createTargetObservables»
	
}
	«ENDFILE»
«ENDDEFINE»

«DEFINE setUpBeforeClass FOR UserTask»
    @org.junit.BeforeClass
    public static void setUpBeforeClass() throws Exception {
        «fw("richclient.util.HeadlessRealm")».useAsDefault();
    }
«ENDDEFINE»

«DEFINE setUp FOR CreateTask»
    private org.jmock.Mockery mockery = new org.jmock.Mockery();
    private «module.getRichClientPackage()».controller.New«for.name»Presentation presentation;
    private «module.getRichClientPackage()».data.Rich«for.name»Repository repository;
    private «module.getRichClientPackage()».controller.New«for.name»Controller controller;
    
    @org.junit.Before
    public void setUp() throws Exception {
        controller = new «module.getRichClientPackage()».controller.New«for.name»Controller();
        controller.setMessages(new «fw("richclient.util.MessageSourceStub")»());
        controller.setObjectFactory(new «module.getRichClientPackage()».data.Rich«for.name».Factory() {
            @Override
            public «module.getRichClientPackage()».data.Rich«for.name» create() {
                return new «module.getRichClientPackage()».data.Rich«for.name»() {};
            }
        });
        
        repository = mockery.mock(«module.getRichClientPackage()».data.Rich«for.name»Repository.class);
        presentation = mockery.mock(«module.getRichClientPackage()».controller.New«for.name»Presentation.class);
        
        «fw("richclient.util.HeadlessRealm")».processDisplayEvents();
    }
«ENDDEFINE»

«DEFINE tearDown FOR UpdateTask»
    @org.junit.After
    public void tearDown() throws Exception {
        «fw("richclient.util.HeadlessRealm")».processDisplayEvents();
    }
«ENDDEFINE»

«DEFINE abstractPopulateFormSuccess FOR CreateTask»
    /**
     * Subclass populates the valid form values.
     */
    protected abstract void populateFormSuccess(java.util.Map<String, org.eclipse.core.databinding.observable.value.IObservableValue> targetObservables);
«ENDDEFINE»

«DEFINE newSuccess FOR CreateTask»
«LET viewProperties.reject(p | p.isSystemAttribute()).reject(e|e.metaType == ReferenceViewProperty || e.metaType == DerivedReferenceViewProperty) AS properties»
    @org.junit.Test
    public void updateSuccess() throws Exception {
        final java.util.Map<String, org.eclipse.core.databinding.observable.value.IObservableValue> targetObservables = createTargetObservables();
        
        «IF getPrimaryServiceOperation() != null»
        final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);
        final org.jmock.lib.action.CustomAction countdownLatch = new org.jmock.lib.action.CustomAction("Countdown latch") {
            public Object invoke(org.jmock.api.Invocation invocation) {
                latch.countDown();
                return null;
            }
        };
        «ENDIF»
        
        // expectations
        mockery.checking(new org.jmock.Expectations() {
            {
                atLeast(1).of(presentation).setPageComplete(with(any(Boolean.class)));
                
                atLeast(1).of(presentation).getTargetObservables();
                will(returnValue(targetObservables));
                
                allowing(presentation).setErrorMessage(with(any(String.class)));
                allowing(presentation).hasErrorMessage();
                allowing(presentation).clearErrorMessage();
                allowing(presentation).setMessage(with(any(String.class)), with(any(Integer.class)));
             
             «IF getPrimaryServiceOperation() != null»
                one(repository).«getPrimaryServiceOperation().name»(with(any(«module.getRichClientPackage()».data.Rich«for.name».class)));
                will(countdownLatch);
             «ENDIF»
            }
        });
        
        controller.setRepository(repository);
        
        controller.pageCreated(presentation);
        
        populateFormSuccess(targetObservables);
        
        «FOREACH properties AS prop -»
        junit.framework.Assert.assertEquals(targetObservables.get("«prop.name»").getValue(), controller.getModel().get«prop.name.toFirstUpper()»());
        «ENDFOREACH»
        
        controller.performFinish();
        
        «IF getPrimaryServiceOperation() != null»
        latch.await(3, java.util.concurrent.TimeUnit.SECONDS);
        «ENDIF»
        «fw("richclient.util.HeadlessRealm")».processDisplayEvents();
        
        mockery.assertIsSatisfied();
    }
«ENDLET»
«ENDDEFINE»

«DEFINE abstractCreateSelectedObject FOR CreateTask»
    /**
     * Subclass will return selected object.
     */
    protected abstract «module.getRichClientPackage()».data.Rich«for.name» createSelectedObject();
«ENDDEFINE»


«DEFINE newFromSelectionSuccess FOR CreateTask»
«LET viewProperties.reject(p | p.isSystemAttribute()).reject(e|e.metaType == ReferenceViewProperty || e.metaType == DerivedReferenceViewProperty) AS properties»
    @org.junit.Test
    public void newFromSelectionSuccess() throws Exception {
        final java.util.Map<String, org.eclipse.core.databinding.observable.value.IObservableValue> targetObservables = createTargetObservables();
        
        «IF getPrimaryServiceOperation() != null»
        final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);
        final org.jmock.lib.action.CustomAction countdownLatch = new org.jmock.lib.action.CustomAction("Countdown latch") {
            public Object invoke(org.jmock.api.Invocation invocation) {
                latch.countDown();
                return null;
            }
        };
        «ENDIF»
        
        // expectations
        mockery.checking(new org.jmock.Expectations() {
            {
                atLeast(1).of(presentation).setPageComplete(with(any(Boolean.class)));
                
                atLeast(1).of(presentation).getTargetObservables();
                will(returnValue(targetObservables));
                
                allowing(presentation).setErrorMessage(with(any(String.class)));
                allowing(presentation).hasErrorMessage();
                allowing(presentation).clearErrorMessage();
                allowing(presentation).setMessage(with(any(String.class)), with(any(Integer.class)));
                allowing(presentation).resetForm();
             
            «IF getPrimaryServiceOperation() != null»
                one(repository).«getPrimaryServiceOperation().name»(with(any(«module.getRichClientPackage()».data.Rich«for.name».class)));
                will(countdownLatch);
            «ENDIF»
            }
        });
        
        controller.setRepository(repository);
        «module.getRichClientPackage()».data.Rich«for.name» selectedObject = createSelectedObject();
        controller.setSelection(new org.eclipse.jface.viewers.StructuredSelection(selectedObject));
        
        controller.pageCreated(presentation);
        
        controller.copyFromSelection();
        
        junit.framework.Assert.assertNotSame("Expected copy", selectedObject, controller.getModel());
        
        «FOREACH properties AS prop -»
        junit.framework.Assert.assertEquals(selectedObject.get«prop.name.toFirstUpper()»(), controller.getModel().get«prop.name.toFirstUpper()»());
        «ENDFOREACH»
        
        «FOREACH properties AS prop -»
        junit.framework.Assert.assertEquals(selectedObject.get«prop.name.toFirstUpper()»(), targetObservables.get("«prop.name»").getValue());
        «ENDFOREACH»
        
        controller.performFinish();
        
        «IF getPrimaryServiceOperation() != null»
        latch.await(3, java.util.concurrent.TimeUnit.SECONDS);
        «ENDIF»
        «fw("richclient.util.HeadlessRealm")».processDisplayEvents();
        
        mockery.assertIsSatisfied();
    }
«ENDLET»
«ENDDEFINE»


«DEFINE createTargetObservables FOR CreateTask»
«LET viewProperties.reject(p | p.isSystemAttribute()).reject(e|e.metaType == ReferenceViewProperty || e.metaType == DerivedReferenceViewProperty) AS properties»
    protected java.util.Map<String, org.eclipse.core.databinding.observable.value.IObservableValue> createTargetObservables() {
        java.util.Map<String, org.eclipse.core.databinding.observable.value.IObservableValue> result = new java.util.HashMap<String, org.eclipse.core.databinding.observable.value.IObservableValue>();
    «FOREACH properties AS prop -»
        result.put("«prop.name»", new org.eclipse.core.databinding.observable.value.WritableValue());
        «IF prop.getAttributeType() == "Date"-»
        result.put("«prop.name»Defined", new org.eclipse.core.databinding.observable.value.WritableValue());
        «ENDIF-»
    «ENDFOREACH»
        return result;
    }
«ENDLET»
«ENDDEFINE»




«DEFINE createControllerTestImpl FOR CreateTask»
	«FILE javaFileName(module.getRichClientPackage() + ".controller.New" +for.name + "ControllerTest") TO_SRC_TEST-»
«javaHeader()»
package «module.getRichClientPackage()».controller;

public class New«for.name»ControllerTest extends New«for.name»ControllerTestBase {
	«EXPAND populateFormSuccess»
	«EXPAND createSelectedObject»
	
}
	«ENDFILE»
«ENDDEFINE»

«DEFINE populateFormSuccess FOR CreateTask»
«LET viewProperties.reject(p | p.isSystemAttribute()).reject(e|e.metaType == ReferenceViewProperty || e.metaType == DerivedReferenceViewProperty) AS properties»
    @Override
    protected void populateFormSuccess(java.util.Map<String, org.eclipse.core.databinding.observable.value.IObservableValue> targetObservables) {
        // TODO define necessary properties
        «FOREACH properties AS prop -»
        // targetObservables.get("«prop.name»").setValue(...);
        «ENDFOREACH»
    }
«ENDLET»
«ENDDEFINE»

«DEFINE createSelectedObject FOR CreateTask»
«LET viewProperties.reject(p | p.isSystemAttribute()).reject(e|e.metaType == ReferenceViewProperty || e.metaType == DerivedReferenceViewProperty) AS properties»
    @Override
    protected «module.getRichClientPackage()».data.Rich«for.name» createSelectedObject() {
        «module.getRichClientPackage()».data.Rich«for.name» input = new «module.getRichClientPackage()».data.Rich«for.name»() {};
        // TODO populate selected object
        «FOREACH properties AS prop -»
        // input.set«prop.name.toFirstUpper()»(...);
        «ENDFOREACH»
        return input;
    }
«ENDLET»
«ENDDEFINE»