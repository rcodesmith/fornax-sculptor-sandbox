«REM»
 * Copyright 2008 The Fornax Project Team, including the original 
 * author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»

«EXTENSION extensions::helper»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::properties»

«DEFINE adapter FOR GuiApplication»
	«EXPAND adapter FOREACH modules»
«ENDDEFINE» 

«DEFINE adapter FOR GuiModule»
	«EXPAND adapter FOREACH userTasks.typeSelect(ListTask)»
	«EXPAND gapAdapter FOREACH userTasks.typeSelect(ListTask)
		.select(e | isGapClassToBeGenerated(e, e.for.name + "Adapter"))»
	«EXPAND adapterFactory»
	«IF isGapClassToBeGenerated(this.name, this.name.toFirstUpper() + "AdapterFactory")»
		«EXPAND gapAdapterFactory»
	«ENDIF»
	
	
«ENDDEFINE»

«DEFINE gapAdapter FOR ListTask»
«LET for.name + "Adapter" AS className»
«FILE javaFileName(module.getRichClientPackage() + ".adapter." + className) TO_SRC -»
«javaHeader()»
package «module.getRichClientPackage()».adapter;

public class «className» extends «className»Base {
	public «className»() {
    }
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE adapter FOR ListTask»
«LET for.name + "Adapter" + gapSubclassSuffix(this, for.name + "Adapter") AS className»
«FILE javaFileName(module.getRichClientPackage() + ".adapter." + className) -»
«javaHeader()»
package «module.getRichClientPackage()».adapter;

/**
 * Adapter for Rich«for.name» objects
 * 
 */
public «IF className.endsWith("Base")»abstract«ENDIF» class «className» implements org.eclipse.ui.progress.IDeferredWorkbenchAdapter {
    private org.eclipse.jface.resource.ImageDescriptor imageDescriptor = 
        «module.application.getRichClientPackage()».«module.application.name.toFirstUpper()»Plugin.getImageDescriptor(«module.application.getRichClientPackage()».«module.application.name.toFirstUpper()»Plugin.ICONS_PATH + "domain_object.png");

    public void fetchDeferredChildren(Object object, org.eclipse.ui.progress.IElementCollector collector, final org.eclipse.core.runtime.IProgressMonitor monitor) {
        // This type has no children
    }

    public org.eclipse.core.runtime.jobs.ISchedulingRule getRule(Object object) {
        return null;
    }

    public boolean isContainer() {
        return false;
    }

    public Object[] getChildren(Object object) {
        return null;
    }

    public org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(Object object) {
        return imageDescriptor;
    }

    «EXPAND adapterGetLabel»

    public Object getParent(Object object) {
        return «module.application.getRichClientPackage("common")».data.DomainObjectFolder.«for.name.toUpperCase()»;
    }

}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«REM»TODO we need something in gui meta model to define the short label«ENDREM»
«DEFINE adapterGetLabel FOR ListTask -»
    public String getLabel(Object object) {
        «module.getRichClientPackage()».data.Rich«for.name» rich«for.name» = ((«module.getRichClientPackage()».data.Rich«for.name») object);
        StringBuilder result = new StringBuilder();
«IF for.hasNaturalKey()-»
	«LET for.getAllNaturalKeyReferences().first() AS naturalKeyRef -»
	«IF naturalKeyRef == null -»
		«LET for.getNaturalKeyAttributes() AS naturalKeys-»
			«FOREACH viewProperties.typeSelect(AttributeViewProperty).select(e|naturalKeys.contains(e.attribute)) AS keyProp SEPARATOR '.append(", ");
			' -»
			result.append(rich«for.name».get«keyProp.name.toFirstUpper()»())
			«ENDFOREACH-»;
		«ENDLET-» 
	«ELSE -»
		«FOREACH viewProperties.typeSelect(BasicTypeViewProperty).select(e|e.reference == naturalKeyRef) AS keyProp SEPARATOR '.append(", ");
		'-»
		result.append(rich«for.name».get«keyProp.name.toFirstUpper()»())
		«ENDFOREACH-»;
	«ENDIF»
	«ENDLET»
«ELSEIF for.getConstructorParameters().select(p | p.metaType == Attribute).size > 0 -»
	«REM»TODO should we support basic types and enum when getting from contructor parameters?«ENDREM»
	«LET for.getConstructorParameters().select(p | p.metaType == Attribute) AS params-»
		«FOREACH viewProperties.typeSelect(AttributeViewProperty).select(e|params.contains(e.attribute)) AS paramProp SEPARATOR '.append(", ");
		'-»
		result.append(rich«for.name».get«paramProp.name.toFirstUpper()»())
		«ENDFOREACH-»;
	«ENDLET-»
«ELSE»
	«LET for.getAllNonSystemAttributes() AS atts-»
		«FOREACH viewProperties.typeSelect(AttributeViewProperty).select(e|atts.contains(e.attribute)) AS attProp SEPARATOR '.append(", ");
		'-»
		result.append(rich«for.name».get«attProp.name.toFirstUpper()»())
		«ENDFOREACH-»;
	«ENDLET-»
«ENDIF-»
        return result.toString();
    }
«ENDDEFINE»

«DEFINE gapAdapterFactory FOR GuiModule»
«LET name.toFirstUpper() + "AdapterFactory" AS className»
«FILE javaFileName(getRichClientPackage() + ".adapter." + className) TO_SRC -»
«javaHeader()»
package «getRichClientPackage()».adapter;

public class «className» extends «className»Base {
	public «className»() {
    }
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE adapterFactory FOR GuiModule»
«LET name.toFirstUpper() + "AdapterFactory" + gapSubclassSuffix(this, name.toFirstUpper() + "AdapterFactory") AS className»
«FILE javaFileName(getRichClientPackage() + ".adapter." + className) -»
«javaHeader()»
package «getRichClientPackage()».adapter;

/**
 * Factory for adapters in the «name» module.
 * 
 */
public «IF className.endsWith("Base")»abstract«ENDIF» class «className» extends «fw("richclient.adapter.AbstractAdapterFactory")» {
    
    public «className»() {
    	«FOREACH userTasks.typeSelect(ListTask) AS task»
    	addAdapterForObject(«task.module.getRichClientPackage()».data.Rich«task.for.name».class, «task.for.name»Adapter.class);
    	«ENDFOREACH»
    }

}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

