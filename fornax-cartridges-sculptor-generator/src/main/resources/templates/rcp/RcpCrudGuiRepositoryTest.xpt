«REM»
 * Copyright 2008 The Fornax Project Team, including the original 
 * author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»

«EXTENSION extensions::helper»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::properties»

«DEFINE repositoryTest FOR GuiApplication»
	«EXPAND repositoryTest FOREACH groupByTarget()»
«ENDDEFINE» 

«DEFINE repositoryTest FOR UserTaskGroup»
	«REM»At least findAll must exist«ENDREM»
	«IF getListTaskPrimaryServiceOperation() != null && for.getFindAllMethod() != null»
		«EXPAND repositoryTestBase»
		«EXPAND repositoryTestImpl»
	«ENDIF»
«ENDDEFINE»

«DEFINE repositoryTestBase FOR UserTaskGroup»
	«FILE javaFileName(module.getRichClientPackage() + ".data.Rich" + for.name + "RepositoryTestBase") TO_GEN_SRC_TEST-»
«javaHeader()»
package «module.getRichClientPackage()».data;

public abstract class Rich«for.name»RepositoryTestBase {

	«EXPAND repositoryTestBaseSetUpBeforeClass»
	«EXPAND repositoryTestBaseSetUp»
	«EXPAND repositoryTestBaseTearDown»
	«EXPAND repositoryTestBaseCreateNewObject»
	«EXPAND repositoryTestBaseCreateExistingObject»
	
	«IF getListTaskPrimaryServiceOperation() != null && for.getFindAllMethod() != null»
		«EXPAND repositoryTestBaseGetAll»

		«IF getUpdateTaskPrimaryServiceOperation() != null»    
		    «EXPAND repositoryTestBaseSaveExisting»
		    
		    «IF getDeleteTaskPrimaryServiceOperation() != null»
				«EXPAND repositoryTestBaseDelete»
			«ENDIF»
    	«ENDIF»
    	«IF getCreateTaskPrimaryServiceOperation() != null»
    		«EXPAND repositoryTestBaseSaveNew»
    	«ENDIF»
	«ENDIF»
}
	«ENDFILE»
«ENDDEFINE»

«DEFINE repositoryTestBaseSetUpBeforeClass FOR UserTaskGroup»
    @org.junit.BeforeClass
    public static void setUpBeforeClass() throws Exception {
        «fw("richclient.util.HeadlessRealm")».useAsDefault();
    }
«ENDDEFINE»

«DEFINE repositoryTestBaseSetUp FOR UserTaskGroup»
    private «fw("richclient.util.SpringInitializer")» spring;
    private «module.getRichClientPackage()».data.Rich«for.name»Repository repository;
    
    private org.jmock.Mockery mockery = new org.jmock.Mockery();
    private java.util.Observer observer;
    
    @org.junit.Before
    public void setUp() throws Exception {
        spring = new «fw("richclient.util.SpringInitializer")»(getClass().getClassLoader()) {
            @Override
            protected String getSpringConfig() {
                return "/applicationContext-test.xml";
            }
        };
        spring.start();
        repository = spring.getBeanFromSimpleClassName(«module.getRichClientPackage()».data.Rich«for.name»Repository.class);
        
        observer = mockery.mock(java.util.Observer.class);
        repository.addObserver(observer);
    }
    
    protected «fw("richclient.util.SpringInitializer")» getSpring() {
        return spring;
    }
«ENDDEFINE»

«DEFINE repositoryTestBaseTearDown FOR UserTaskGroup»
    @org.junit.After
    public void tearDown() throws Exception {
        spring.stop();
        if (repository != null) {
            repository.deleteObserver(observer);
        }
    }
«ENDDEFINE»

«DEFINE repositoryTestBaseCreateNewObject FOR UserTaskGroup»
    protected abstract «module.getRichClientPackage()».data.Rich«for.name» createNewObject();
«ENDDEFINE»

«DEFINE repositoryTestBaseCreateExistingObject FOR UserTaskGroup»
    protected abstract «module.getRichClientPackage()».data.Rich«for.name» createExistingObject();
«ENDDEFINE»

«DEFINE repositoryTestBaseGetAll FOR UserTaskGroup»
«LET getListTaskPrimaryServiceOperation() != null ? getListTaskPrimaryServiceOperation() : for.getFindAllMethod() AS operation»
    @org.junit.Test
    public void «operation.name»() throws Exception {
        // expectations
        mockery.checking(new org.jmock.Expectations() {{
        	allowing(observer).update(with(any(java.util.Observable.class)), with(any(«fw("richclient.data.DataEvent")».class)));
        }});
        
        «IF operation.hasPagingParameter()»
        java.util.List<«module.getRichClientPackage()».data.Rich«for.name»> all = repository.«operation.name»(«getJavaType("PagingParameter")».pageAccess(20)).getValues();
        «ELSE»
        java.util.List<«module.getRichClientPackage()».data.Rich«for.name»> all = repository.«operation.name»();
        «ENDIF»
        junit.framework.Assert.assertNotNull(all);
        
        mockery.assertIsSatisfied();
    }
«ENDLET»
«ENDDEFINE»

«DEFINE repositoryTestBaseSaveNew FOR UserTaskGroup»
«LET getCreateTaskPrimaryServiceOperation() AS operation»
«LET getListTaskPrimaryServiceOperation() != null ? getListTaskPrimaryServiceOperation() : for.getFindAllMethod() AS getAllOperation»
    @org.junit.Test
    public void saveNew() throws Exception {
        final «module.getRichClientPackage()».data.Rich«for.name» obj = createNewObject();
        
        // expectations
        mockery.checking(new org.jmock.Expectations() {
            {
                atLeast(1).of(observer).update(with(any(java.util.Observable.class)), with(any(«fw("richclient.data.DataEvent")».class)));
            }
        });
        
        
        «IF getAllOperation.hasPagingParameter()»
        int sizeBefore = repository.«getAllOperation.name»(«getJavaType("PagingParameter")».pageAccess(20)).getValues().size();
        repository.«operation.name»(obj);
        java.util.List<«module.getRichClientPackage()».data.Rich«for.name»> all = repository.«getAllOperation.name»(«getJavaType("PagingParameter")».pageAccess(20)).getValues();
        «ELSE»
        int sizeBefore = repository.«getAllOperation.name»().size();
        repository.«operation.name»(obj);
        java.util.List<«module.getRichClientPackage()».data.Rich«for.name»> all = repository.«getAllOperation.name»();
        «ENDIF»
        junit.framework.Assert.assertEquals(sizeBefore + 1, all.size());
        
        mockery.assertIsSatisfied();
    }
«ENDLET»
«ENDLET»
«ENDDEFINE»

«DEFINE repositoryTestBaseSaveExisting FOR UserTaskGroup»
«LET getUpdateTaskPrimaryServiceOperation() AS operation»
«LET getListTaskPrimaryServiceOperation() != null ? getListTaskPrimaryServiceOperation() : for.getFindAllMethod() AS getAllOperation»
    @org.junit.Test
    public void saveExisting() throws Exception {
        final «module.getRichClientPackage()».data.Rich«for.name» obj = createExistingObject();
        
        // expectations
        mockery.checking(new org.jmock.Expectations() {
            {
                atLeast(1).of(observer).update(with(any(java.util.Observable.class)), with(any(«fw("richclient.data.DataEvent")».class)));
            }
        });
        
        «IF getAllOperation.hasPagingParameter()»
        int sizeBefore = repository.«getAllOperation.name»(«getJavaType("PagingParameter")».pageAccess(20)).getValues().size();
        repository.«operation.name»(obj);
        java.util.List<«module.getRichClientPackage()».data.Rich«for.name»> all = repository.«getAllOperation.name»(«getJavaType("PagingParameter")».pageAccess(20)).getValues();
        «ELSE»
        int sizeBefore = repository.«getAllOperation.name»().size();
        repository.«operation.name»(obj);
        java.util.List<«module.getRichClientPackage()».data.Rich«for.name»> all = repository.«getAllOperation.name»();
        «ENDIF»
        junit.framework.Assert.assertEquals(sizeBefore, all.size());
        
        mockery.assertIsSatisfied();
    }
«ENDLET»
«ENDLET»
«ENDDEFINE»

«DEFINE repositoryTestBaseDelete FOR UserTaskGroup»
«LET userTasks.typeSelect(DeleteTask).first() AS aTask»
«LET getUpdateTaskPrimaryServiceOperation() != null ? getUpdateTaskPrimaryServiceOperation() : getCreateTaskPrimaryServiceOperation() AS saveOperation»
«LET getListTaskPrimaryServiceOperation() != null ? getListTaskPrimaryServiceOperation() : for.getFindAllMethod() AS getAllOperation»
    @org.junit.Test
    public void delete() throws Exception {
        final «module.getRichClientPackage()».data.Rich«for.name» obj = createExistingObject();
        
        // expectations
        mockery.checking(new org.jmock.Expectations() {
            {
                atLeast(1).of(observer).update(with(any(java.util.Observable.class)), with(any(«fw("richclient.data.DataEvent")».class)));
            }
        });
        
        «IF getAllOperation.hasPagingParameter()»
        int sizeBefore = repository.«getAllOperation.name»(«getJavaType("PagingParameter")».pageAccess(20)).getValues().size();
        repository.«aTask.getPrimaryServiceOperation().name»(obj);
        java.util.List<«module.getRichClientPackage()».data.Rich«for.name»> all = repository.«getAllOperation.name»(«getJavaType("PagingParameter")».pageAccess(20)).getValues();
        «ELSE»
        int sizeBefore = repository.«getAllOperation.name»().size();
        repository.«aTask.getPrimaryServiceOperation().name»(obj);
        java.util.List<«module.getRichClientPackage()».data.Rich«for.name»> all = repository.«getAllOperation.name»();
        «ENDIF»
        junit.framework.Assert.assertEquals(sizeBefore - 1, all.size());
        
        mockery.assertIsSatisfied();
    }
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»


«DEFINE repositoryTestImpl FOR UserTaskGroup»
	«FILE javaFileName(module.getRichClientPackage() + ".data.Rich" + for.name + "RepositoryTest") TO_SRC_TEST-»
«javaHeader()»
package «module.getRichClientPackage()».data;

public class Rich«for.name»RepositoryTest extends Rich«for.name»RepositoryTestBase {

	«EXPAND repositoryTestImplCreateNewObject FOR this»
	«EXPAND repositoryTestImplCreateExistingObject FOR this»

}
	«ENDFILE»
«ENDDEFINE»

«DEFINE repositoryTestImplCreateNewObject FOR UserTaskGroup»
    @Override
    protected «module.getRichClientPackage()».data.Rich«for.name» createNewObject() {
        «module.getRichClientPackage()».data.Rich«for.name» input = new «module.getRichClientPackage()».data.Rich«for.name»();
        // TODO populate input
        «FOREACH getAggregatedViewProperties().reject(p | p.isSystemAttribute()).reject(e|e.metaType == ReferenceViewProperty || e.metaType == DerivedReferenceViewProperty) AS prop -»
        // input.set«prop.name.toFirstUpper()»(...);
        «ENDFOREACH»
        return input;
    }
«ENDDEFINE»

«DEFINE repositoryTestImplCreateExistingObject FOR UserTaskGroup»
«LET getListTaskPrimaryServiceOperation() != null ? getListTaskPrimaryServiceOperation() : for.getFindAllMethod() AS operation»
    @Override
    protected «module.getRichClientPackage()».data.Rich«for.name» createExistingObject() {
		«module.getRichClientPackage()».data.Rich«for.name» input = new «module.getRichClientPackage()».data.Rich«for.name»();
		«IF operation != null»
		// TODO add obj in ServiceStub
		«operation.service.getServiceapiPackage()».«operation.service.name» service = getSpring().getBeanFromSimpleClassName(«operation.service.getServiceapiPackage()».«operation.service.name».class);
		«for.getDomainPackage()».«for.name» domainObj = service.«operation.name»(«IF isServiceContextToBeGenerated()»null«ENDIF»).iterator().next();
		input.fromDomainObject(domainObj);
		«ENDIF»        
        return input;
    }
«ENDLET»
«ENDDEFINE»