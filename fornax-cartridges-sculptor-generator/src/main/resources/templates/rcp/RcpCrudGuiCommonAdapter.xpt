«REM»
 * Copyright 2008 The Fornax Project Team, including the original 
 * author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»

«EXTENSION extensions::helper»
«EXTENSION extensions::guihelper»
«EXTENSION extensions::rcphelper»
«EXTENSION extensions::properties»

«DEFINE commonAdapter FOR GuiApplication»
	«EXPAND commonAdapterFactory»
	«IF isGapClassToBeGenerated("", "CommonAdapterFactory")»
		«EXPAND gapCommonAdapterFactory»
	«ENDIF»
	
	«EXPAND domainObjectFolderAdapter»
	«IF isGapClassToBeGenerated("", "DomainObjectFolderAdapter")»
		«EXPAND gapDomainObjectFolderAdapter»
	«ENDIF»
	
	«EXPAND errorNodeAdapter»
	«IF isGapClassToBeGenerated("", "ErrorNodeAdapter")»
		«EXPAND gapErrorNodeAdapter»
	«ENDIF»
	
	«EXPAND moreNodeAdapter»
	«IF isGapClassToBeGenerated("", "MoreNodeAdapter")»
		«EXPAND gapMoreNodeAdapter»
	«ENDIF»
	
	«EXPAND moduleFolderAdapter»
	«IF isGapClassToBeGenerated("", "ModuleFolderAdapter")»
		«EXPAND gapModuleFolderAdapter»
	«ENDIF»
	
	«EXPAND rootNodeAdapter»
	«IF isGapClassToBeGenerated("", "RootNodeAdapter")»
		«EXPAND gapRootNodeAdapter»
	«ENDIF»
	
«ENDDEFINE»

«DEFINE gapCommonAdapterFactory FOR GuiApplication»
«LET "CommonAdapterFactory" AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) TO_SRC -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

public class «className» extends «className»Base {
	public «className»() {
    }
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE commonAdapterFactory FOR GuiApplication»
«LET "CommonAdapterFactory" + gapSubclassSuffix("CommonAdapterFactory") AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

/**
 * Factory for common adapters used in the navigation tree. 
 * 
 */
public «IF className.endsWith("Base")»abstract«ENDIF» class «className» extends «fw("richclient.adapter.AbstractAdapterFactory")» {
    
    public «className»() {
        addAdapterForObject(«getRichClientPackage("common")».data.RootNode.class, RootNodeAdapter.class);
        addAdapterForObject(«getRichClientPackage("common")».data.ModuleFolder.class, ModuleFolderAdapter.class);
        addAdapterForObject(«getRichClientPackage("common")».data.DomainObjectFolder.class, DomainObjectFolderAdapter.class);
        addAdapterForObject(«getRichClientPackage("common")».data.ErrorNode.class, ErrorNodeAdapter.class);
        addAdapterForObject(«getRichClientPackage("common")».data.MoreNode.class, MoreNodeAdapter.class);
    }

}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE gapDomainObjectFolderAdapter FOR GuiApplication»
«LET "DomainObjectFolderAdapter" AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) TO_SRC -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

public class «className» extends «className»Base {
	public «className»() {
    }
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE domainObjectFolderAdapter FOR GuiApplication»
«LET "DomainObjectFolderAdapter" + gapSubclassSuffix("DomainObjectFolderAdapter") AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

/**
 * Adapter for the DomainObject folder node.
 * 
 */
public «IF className.endsWith("Base")»abstract«ENDIF» class «className» implements org.eclipse.ui.progress.IDeferredWorkbenchAdapter {
    private org.eclipse.jface.resource.ImageDescriptor imageDescriptor = 
    	«getRichClientPackage()».«name.toFirstUpper()»Plugin.getImageDescriptor(«getRichClientPackage()».«name.toFirstUpper()»Plugin.ICONS_PATH + "domain_object_folder.png");

	«FOREACH modules.userTasks.typeSelect(ListTask) AS task»
	private «task.module.getRichClientPackage()».data.Rich«task.for.name»Repository «task.for.name.toFirstLower()»Repository;
	«ENDFOREACH»
    
    public «className»() {
        messages = (org.springframework.context.MessageSource) «getRichClientPackage()».«name.toFirstUpper()»Plugin.getDefault()
            .getSpringContext().getBean("messageSource");
            
    «FOREACH modules.userTasks.typeSelect(ListTask) AS task»
		«task.for.name.toFirstLower()»Repository = «getRichClientPackage()».«name.toFirstUpper()»Plugin.getDefault().getRepository(«task.module.getRichClientPackage()».data.Rich«task.for.name»Repository.class);
	«ENDFOREACH»
	
	«FOREACH modules.userTasks.typeSelect(ListTask) AS task»
	    fetchers.put(«getRichClientPackage("common")».data.DomainObjectFolder.«task.for.name.toUpperCase()», new «task.for.name»Fetcher());
	«ENDFOREACH»
    }
    
    «EXPAND RcpCrudGuiMessageResources::messageSourceDependencyProperty»
    
	«EXPAND domainObjectFolderAdapterFetchDeferredChildren»

    public org.eclipse.core.runtime.jobs.ISchedulingRule getRule(Object object) {
        return null;
    }

    public boolean isContainer() {
        return true;
    }

    public Object[] getChildren(Object object) {
        return null;
    }

    public org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(Object object) {
        return imageDescriptor;
    }

    public String getLabel(Object object) {
        return ((«getRichClientPackage("common")».data.DomainObjectFolder) object).getName();
    }

    public Object getParent(Object object) {
        return ((«getRichClientPackage("common")».data.DomainObjectFolder) object).getParent();
    }
    
    «EXPAND domainObjectFolderAdapterFetchers»

}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE domainObjectFolderAdapterFetchDeferredChildren FOR GuiApplication»
    public void fetchDeferredChildren(final Object object, final org.eclipse.ui.progress.IElementCollector collector, final org.eclipse.core.runtime.IProgressMonitor monitor) {
        java.util.concurrent.Callable<Object> callable = new java.util.concurrent.Callable<Object>() {
            public Object call() throws Exception {
		        «getRichClientPackage("common")».data.DomainObjectFolder current = («getRichClientPackage("common")».data.DomainObjectFolder) object;
		        try {
		            monitor.beginTask(org.eclipse.osgi.util.NLS.bind(«getMessagesClass()».fetchChildrenJob, current.getName()), 1);
		
		            Fetcher fetcher = fetchers.get(current);
		            if (fetcher == null) {
		                throw new IllegalArgumentException("Unsupported DomainObjectFolder " + current);
		            }
		            
		            for («fw("richclient.data.RichObject")» each : fetcher.getAll()) {
		                collector.add(each, monitor);
		            }
		            monitor.worked(1);
		            return null;
		
		        } catch (Exception e) {
		            collector.add(new «getRichClientPackage("common")».data.ErrorNode(«getMessagesClass()».errorNode, current), monitor);
		            throw e;
		        } finally {
		            monitor.done();
		        }
		    }
        };
        
        «fw("richclient.errorhandling.ExceptionAware")»<Object> runner = new «fw("richclient.errorhandling.ExceptionAware")»<Object>(messages);
        runner.run(callable);
    }
«ENDDEFINE»

«DEFINE domainObjectFolderAdapterFetchers FOR GuiApplication»
    private java.util.Map<«getRichClientPackage("common")».data.DomainObjectFolder, Fetcher> fetchers = new java.util.HashMap<«getRichClientPackage("common")».data.DomainObjectFolder, Fetcher>();
    
    static interface Fetcher {
        java.util.List<? extends «fw("richclient.data.RichObject")»> getAll();
    }
    
    «FOREACH modules.userTasks.typeSelect(ListTask) AS task»
    «LET task.getPrimaryServiceOperation() != null ? task.getPrimaryServiceOperation() : task.for.getFindAllMethod() AS operation»
    class «task.for.name»Fetcher implements Fetcher {
        public java.util.List<? extends «fw("richclient.data.RichObject")»> getAll() {
        	«IF task.isPaging()»
        		int pageSize = 20;
        		«getJavaType("PagedResult")»<«task.module.getRichClientPackage()».data.Rich«task.for.name»> pagedResult = «task.for.name.toFirstLower()»Repository.«operation.name»(
        			«getJavaType("PagingParameter")».pageAccess(pageSize, 1, true));
            	java.util.List<«fw("richclient.data.RichObject")»> result = new java.util.ArrayList<«fw("richclient.data.RichObject")»>(pagedResult.getValues());
	            if (pagedResult.isTotalCounted() && pagedResult.getTotalPages() > 1) {
	                result.add(new «getRichClientPackage("common")».data.MoreNode());
	            }
	            return result;
        	«ELSE»
            	return «task.for.name.toFirstLower()»Repository.«operation.name»();
            «ENDIF»
        }
    }
    «ENDLET»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE gapErrorNodeAdapter FOR GuiApplication»
«LET "ErrorNodeAdapter" AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) TO_SRC -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

public class «className» extends «className»Base {
	public «className»() {
    }
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE errorNodeAdapter FOR GuiApplication»
«LET "ErrorNodeAdapter" + gapSubclassSuffix("ErrorNodeAdapter") AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

/**
 * Adapter for error objects
 * 
 */
public «IF className.endsWith("Base")»abstract«ENDIF» class «className» implements org.eclipse.ui.progress.IDeferredWorkbenchAdapter {
    private org.eclipse.jface.resource.ImageDescriptor imageDescriptor = 
        «getRichClientPackage()».«name.toFirstUpper()»Plugin.getImageDescriptor(«getRichClientPackage()».«name.toFirstUpper()»Plugin.ICONS_PATH + "error_node.png");

    public void fetchDeferredChildren(Object object, org.eclipse.ui.progress.IElementCollector collector, final org.eclipse.core.runtime.IProgressMonitor monitor) {
        // This type has no children
    }

    public org.eclipse.core.runtime.jobs.ISchedulingRule getRule(Object object) {
        return null;
    }

    public boolean isContainer() {
        return false;
    }

    public Object[] getChildren(Object object) {
        return null;
    }

    public org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(Object object) {
        return imageDescriptor;
    }

    public String getLabel(Object object) {
        return ((«getRichClientPackage("common")».data.ErrorNode) object).getMessage();
    }

    public Object getParent(Object object) {
        return ((«getRichClientPackage("common")».data.ErrorNode) object).getParent();
    }
    
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE gapMoreNodeAdapter FOR GuiApplication»
«LET "MoreNodeAdapter" AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) TO_SRC -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

public class «className» extends «className»Base {
	public «className»() {
    }
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE moreNodeAdapter FOR GuiApplication»
«LET "MoreNodeAdapter" + gapSubclassSuffix("MoreNodeAdapter") AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

/**
 * Adapter for MoreNode objects
 * 
 */
public «IF className.endsWith("Base")»abstract«ENDIF» class «className» implements org.eclipse.ui.progress.IDeferredWorkbenchAdapter {
    public void fetchDeferredChildren(Object object, org.eclipse.ui.progress.IElementCollector collector, final org.eclipse.core.runtime.IProgressMonitor monitor) {
        // This type has no children
    }

    public org.eclipse.core.runtime.jobs.ISchedulingRule getRule(Object object) {
        return null;
    }

    public boolean isContainer() {
        return false;
    }

    public Object[] getChildren(Object object) {
        return null;
    }

    public org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(Object object) {
        return null;
    }

    public String getLabel(Object object) {
        // Nodes are ordered by label.
        // Is there a better way to make sure that this is placed last?
        return "_ ...";
    }

    public Object getParent(Object object) {
        return null;
    }
    
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE gapModuleFolderAdapter FOR GuiApplication»
«LET "ModuleFolderAdapter" AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) TO_SRC -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

public class «className» extends «className»Base {
	public «className»() {
    }
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE moduleFolderAdapter FOR GuiApplication»
«LET "ModuleFolderAdapter" + gapSubclassSuffix("ErrorNodeAdapter") AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

/**
 * Adapter for the Module folder node
 * 
 */
public «IF className.endsWith("Base")»abstract«ENDIF» class «className» implements org.eclipse.ui.progress.IDeferredWorkbenchAdapter {
    private org.eclipse.jface.resource.ImageDescriptor imageDescriptor = 
        «getRichClientPackage()».«name.toFirstUpper()»Plugin.getImageDescriptor(«getRichClientPackage()».«name.toFirstUpper()»Plugin.ICONS_PATH + "module_folder.png");
    
    public «className»() {
    «FOREACH modules.reject(m | m.userTasks.typeSelect(ListTask).isEmpty) AS module»
	fetchers.put(«getRichClientPackage("common")».data.ModuleFolder.«module.name.toUpperCase()», new «module.name.toFirstUpper()»Fetcher());
	«ENDFOREACH»
    }
    
    «EXPAND moduleFolderAdapterFetchDeferredChildren»

    public org.eclipse.core.runtime.jobs.ISchedulingRule getRule(Object object) {
        return null;
    }

    public boolean isContainer() {
        return true;
    }

    public Object[] getChildren(Object pO) {
        return null;
    }

    public org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(Object object) {
        return imageDescriptor;
    }

    public String getLabel(Object object) {
        return ((«getRichClientPackage("common")».data.ModuleFolder) object).getName();
    }

    public Object getParent(Object object) {
        return «getRichClientPackage("common")».data.RootNode.INSTANCE;
    }
    
    «EXPAND moduleFolderAdapterFetchers»

}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE moduleFolderAdapterFetchDeferredChildren FOR GuiApplication»
    public void fetchDeferredChildren(Object object, org.eclipse.ui.progress.IElementCollector collector, org.eclipse.core.runtime.IProgressMonitor monitor) {

        «getRichClientPackage("common")».data.ModuleFolder current = («getRichClientPackage("common")».data.ModuleFolder) object;

        monitor.beginTask("Fetching domain object types", 1);
        
        Fetcher fetcher = fetchers.get(current);
        if (fetcher == null) {
            throw new IllegalArgumentException("Unsupported ModuleFolder " + current);
        }
        
        for («getRichClientPackage("common")».data.DomainObjectFolder each : fetcher.getAll()) {
            collector.add(each, monitor);
        }
        monitor.worked(1);
        monitor.done();
    }
«ENDDEFINE»

«DEFINE moduleFolderAdapterFetchers FOR GuiApplication»
    private java.util.Map<«getRichClientPackage("common")».data.ModuleFolder, Fetcher> fetchers = new java.util.HashMap<«getRichClientPackage("common")».data.ModuleFolder, Fetcher>();
    
    static interface Fetcher {
        java.util.List<«getRichClientPackage("common")».data.DomainObjectFolder> getAll();
    }
    
    «FOREACH modules.reject(m | m.userTasks.typeSelect(ListTask).isEmpty) AS module»
    class «module.name.toFirstUpper()»Fetcher implements Fetcher {
        public java.util.List<«getRichClientPackage("common")».data.DomainObjectFolder> getAll() {
            java.util.List<«getRichClientPackage("common")».data.DomainObjectFolder> result = new java.util.ArrayList<«getRichClientPackage("common")».data.DomainObjectFolder>();
            «FOREACH module.userTasks.typeSelect(ListTask) AS task»
            result.add(«getRichClientPackage("common")».data.DomainObjectFolder.«task.for.name.toUpperCase()»);
            «ENDFOREACH»
            return result;
        }
    }
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE gapRootNodeAdapter FOR GuiApplication»
«LET "RootNodeAdapter" AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) TO_SRC -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

public class «className» extends «className»Base {
	public «className»() {
    }
}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE rootNodeAdapter FOR GuiApplication»
«LET "RootNodeAdapter" + gapSubclassSuffix("RootNodeAdapter") AS className»
«FILE javaFileName(getRichClientPackage("common") + ".adapter." + className) -»
«javaHeader()»
package «getRichClientPackage("common")».adapter;

/**
 * Adapter for the root node. This class is responsible for loading
 * all modules.
 * 
 */
public «IF className.endsWith("Base")»abstract«ENDIF» class «className» implements org.eclipse.ui.progress.IDeferredWorkbenchAdapter {
    private volatile java.util.concurrent.atomic.AtomicBoolean initialized = new java.util.concurrent.atomic.AtomicBoolean(false);

    public «className»() {
    }

    public void fetchDeferredChildren(Object object, org.eclipse.ui.progress.IElementCollector collector, final org.eclipse.core.runtime.IProgressMonitor monitor) {

        synchronized (initialized) {
            if (initialized.get()) {
                return;
            }
            initialized.set(true);

            monitor.beginTask("Fetching modules", 1);
            «FOREACH modules.reject(m | m.userTasks.typeSelect(ListTask).isEmpty) AS module»
            collector.add(«getRichClientPackage("common")».data.ModuleFolder.«module.name.toUpperCase()», monitor);
            «ENDFOREACH»
            monitor.worked(1);
            monitor.done();
        }
    }

    public org.eclipse.core.runtime.jobs.ISchedulingRule getRule(Object object) {
        return null;
    }

    public boolean isContainer() {
        return true;
    }

    public Object[] getChildren(Object object) {
        return null;
    }

    public org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(Object object) {
        return null;
    }

    public String getLabel(Object object) {
        return "Root";
    }

    public Object getParent(Object object) {
        return null;
    }

}
«ENDFILE»
«ENDLET»
«ENDDEFINE»

