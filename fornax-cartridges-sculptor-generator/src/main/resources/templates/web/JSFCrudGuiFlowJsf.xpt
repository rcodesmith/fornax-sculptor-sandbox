«REM»
 * Copyright 2008 The Fornax Project Team, including the original 
 * author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«IMPORT sculptorguimetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::properties»
«EXTENSION extensions::guihelper»

«DEFINE flowJsf FOR GuiApplication»
	«EXPAND taskJsf FOREACH this.modules.userTasks»
	«EXPAND errorJsf»
	«REM»«EXPAND formErrorsInc »«ENDREM»
«ENDDEFINE»

«REM»Kind of abstract method, not used, concrete implementations 
for subclasses of UserTask are defined«ENDREM»
«DEFINE taskJsf FOR UserTask»
«ENDDEFINE »

«DEFINE taskJsf FOR CreateTask»
	«EXPAND createTaskJsfForm»
	«EXPAND createTaskJsfFormInc»
	«EXPAND createTaskJsfConfirm»
	«EXPAND createTaskJsfConfirmInc»
	«EXPAND createTaskJsfDone»
«ENDDEFINE»

«DEFINE taskJsf FOR UpdateTask»
	«EXPAND updateTaskJsfForm»
	«EXPAND updateTaskJsfFormInc»
	«EXPAND updateTaskJsfConfirm»
	«EXPAND updateTaskJsfConfirmInc»
	«EXPAND updateTaskJsfDone»
«ENDDEFINE»

«DEFINE createTaskJsfForm FOR CreateTask»
	«EXPAND createUpdateTaskJsfForm»
«ENDDEFINE»

«DEFINE updateTaskJsfForm FOR UpdateTask»
	«EXPAND createUpdateTaskJsfForm»
«ENDDEFINE»

«DEFINE faceletsXmlns FOR Object-»
 xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:f="http://java.sun.com/jsf/core" xmlns:t="http://myfaces.apache.org/tomahawk" xmlns:h="http://java.sun.com/jsf/html" xmlns:c="http://java.sun.com/jstl/core" xmlns:sf="http://www.springframework.org/tags/faces" xmlns:a="ApplicationTaglib"
«ENDDEFINE»

«DEFINE docType FOR Object-»
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
«ENDDEFINE»

«DEFINE createUpdateTaskJsfForm FOR UserTask»
	«IF gapClass»
		«EXPAND createUpdateTaskJsfFormGap»
	«ELSE»
		«EXPAND createUpdateTaskJsfFormGen»
	«ENDIF»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfFormGap FOR UserTask»
	«FILE "WEB-INF/flows/" + module.name + "/" + name + "/input.xhtml" TO_WEBROOT-»
«EXPAND createUpdateTaskJsfFormContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfFormGen FOR UserTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/input.xhtml" TO_GEN_WEBROOT-»
«EXPAND createUpdateTaskJsfFormContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfFormContent FOR UserTask -»
«EXPAND docType-»
<html «EXPAND faceletsXmlns»>
	<body>
		<ui:composition template="/WEB-INF/common/template.xhtml">
			<ui:define name="content">
				<h1><h:outputFormat value="#{msg['«taskType».formHeader']}">
						<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name»']}" />
					</h:outputFormat></h1>
				<ui:include src="/WEB-INF/generated/flows/«module.name»/«name»/input_include.html" />
			</ui:define>
		</ui:composition>
	</body>
</html>
«ENDDEFINE»

«DEFINE createTaskJsfFormInc FOR CreateTask»
	«EXPAND createUpdateTaskJsfFormInc»
«ENDDEFINE»

«DEFINE updateTaskJsfFormInc FOR UpdateTask»
	«EXPAND createUpdateTaskJsfFormInc»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfFormInc FOR UserTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/input_include.html" TO_GEN_WEBROOT-»
	<h:form «EXPAND faceletsXmlns»>
	<div id="formInputFields">
		<h:messages globalOnly="true" styleClass="errorList" />
		<fieldset>
			<legend>
				<h:outputFormat value="#{msg['createUpdate.fieldsLegend']}">
					<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name»']}" />
				</h:outputFormat>
			</legend>
			<table>
			«EXPAND jsfInputFields-»
			</table>
		</fieldset>
	</div>
	<div id="formReferences">
		«EXPAND formReference(name + "Form") 
			FOREACH this.viewProperties.typeSelect(ReferenceViewProperty).reject(p | p.base) -»
	</div>
	«EXPAND formActionButtons-»
	</h:form>
	«ENDFILE»
«ENDDEFINE»

«DEFINE createTaskJsfConfirm FOR CreateTask»
	«EXPAND createUpdateTaskJsfConfirm»
«ENDDEFINE»
«DEFINE updateTaskJsfConfirm FOR UpdateTask»
	«EXPAND createUpdateTaskJsfConfirm»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfConfirm FOR UserTask»
	«IF gapClass»
		«EXPAND createUpdateTaskJsfConfirmGap»
	«ELSE»
		«EXPAND createUpdateTaskJsfConfirmGen»
	«ENDIF»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfConfirmGap FOR UserTask»
	«FILE "WEB-INF/flows/" + module.name + "/" + name + "/confirm.xhtml" TO_WEBROOT-»
«EXPAND createUpdateTaskJsfConfirmContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfConfirmGen FOR UserTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/confirm.xhtml" TO_GEN_WEBROOT-»
«EXPAND createUpdateTaskJsfConfirmContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfConfirmContent FOR UserTask -»
«EXPAND docType-»
<html «EXPAND faceletsXmlns»>
	<body>
		<ui:composition template="/WEB-INF/common/template.xhtml">
			<ui:define name="content">
				<h1><h:outputFormat value="#{msg['«taskType».confirmHeader']}">
						<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name»']}" />
					</h:outputFormat></h1>
				<ui:include src="/WEB-INF/generated/flows/«module.name»/«name»/confirm_include.html" />
			</ui:define>
		</ui:composition>
	</body>
</html>
«ENDDEFINE»

«DEFINE createTaskJsfConfirmInc FOR CreateTask»
	«EXPAND createUpdateTaskJsfConfirmInc»
«ENDDEFINE»
«DEFINE updateTaskJsfConfirmInc FOR UpdateTask»
	«EXPAND createUpdateTaskJsfConfirmInc»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfConfirmInc FOR UserTask»
	«LET metaType == UpdateTask AS isUpdateTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/confirm_include.html" TO_GEN_WEBROOT-»
	<h:form «EXPAND faceletsXmlns» prependId="false" >
	
	<h:messages globalOnly="true" styleClass="errorList" />
	
	<c:set var="viewDomainObjectLinkToReferences" value="false" />
	<c:set var="viewDomainObjectSystemAttribute" value="«isUpdateTask»" />
	
	<ui:include src="/WEB-INF/generated/flows/«module.name»/view«for.name»DomainObject.html">
		<ui:param name="«for.name.toFirstLower()»" value="#{«name»Form.confirmDraft}" />
		«FOREACH viewProperties.typeSelect(ReferenceViewProperty).reject(p | p.base) AS ref-»
		<ui:param name="«ref.name»" value="#{«name»Form.«ref.name»}" />
		«ENDFOREACH-»
	</ui:include>
	
	<div id="formActionButtons">
		<h:commandButton action="back" value="#{msg['createUpdate.back']}" id="back"/>
		<h:commandButton action="cancel" value="#{msg['createUpdate.cancel']}" id="cancel"/>
		<h:commandButton action="submit" value="#{msg['«taskType».save']}" id="save" «IF isUpdateTask»disabled="#{(!«name»Form.nextEnabled || !empty facesContext.maximumSeverity) ? 'true' : 'false'}" «ENDIF»/>		
	</div>
	</h:form>
	«ENDFILE»
	«ENDLET»
«ENDDEFINE»

«DEFINE createTaskJsfDone FOR CreateTask»
	«EXPAND createUpdateTaskJsfDone»
«ENDDEFINE»
«DEFINE updateTaskJsfDone FOR UpdateTask»
	«EXPAND createUpdateTaskJsfDone»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfDone FOR UserTask»
	«IF gapClass»
		«EXPAND createUpdateTaskJsfDoneGap»
	«ELSE»
		«EXPAND createUpdateTaskJsfDoneGen»
	«ENDIF»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfDoneGap FOR UserTask»
	«FILE "WEB-INF/flows/" + module.name + "/" + name + "/finish.xhtml" TO_WEBROOT-»
«EXPAND createUpdateTaskJsfDoneContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfDoneGen FOR UserTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/finish.xhtml" TO_GEN_WEBROOT-»
«EXPAND createUpdateTaskJsfDoneContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE createUpdateTaskJsfDoneContent FOR UserTask -»
«EXPAND docType-»
<html «EXPAND faceletsXmlns»>
	<body>
		<ui:composition template="/WEB-INF/common/template.xhtml">
			<ui:define name="content">
				<h1><h:outputFormat value="#{msg['«this.taskType».doneHeader']}">
						<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name»']}" />
						<f:param value="#{«for.name».id}" />
					</h:outputFormat>
				</h1>
			</ui:define>
		</ui:composition>
	</body>
</html>	
«ENDDEFINE»

«DEFINE taskJsf FOR ViewTask»
	«IF gapClass»
		«EXPAND taskJsfGap»
	«ELSE»
		«EXPAND taskJsfGen»
	«ENDIF»
	
	«EXPAND viewTaskJsfInc»
	«EXPAND viewDomainObjectJsfInc»
«ENDDEFINE»

«DEFINE taskJsfGap FOR ViewTask»
	«FILE "WEB-INF/flows/" + module.name + "/" + name + "/view.xhtml" TO_WEBROOT-»
«EXPAND taskJsfContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE taskJsfGen FOR ViewTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/view.xhtml" TO_GEN_WEBROOT-»
«EXPAND taskJsfContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE taskJsfContent FOR ViewTask -»
«EXPAND docType-»
<html «EXPAND faceletsXmlns»>
	<body>
		<ui:composition template="/WEB-INF/common/template.xhtml">
			<ui:define name="content">
				<h1><h:outputFormat value="#{msg['view.header']}">
						<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name»']}" />
					</h:outputFormat>#{" "}
					<c:if test="#{«name»Form.domainObject.id != null}">
						<h:outputFormat value="#{msg['view.header.withId']}">
							<f:param value="#{«name»Form.domainObject.id}" />
						</h:outputFormat>
					</c:if>
				</h1>
				<ui:include src="/WEB-INF/generated/flows/«module.name»/«name»/view_include.html" />
			</ui:define>
		</ui:composition>
	</body>
</html>
«ENDDEFINE»

«DEFINE viewTaskJsfInc FOR ViewTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/view_include.html" TO_GEN_WEBROOT-»
	<h:form «EXPAND faceletsXmlns»>
	
	<h:messages globalOnly="true" styleClass="errorList" />
	
	<ui:fragment rendered="#{empty facesContext.maximumSeverity}">
		<c:set var="viewDomainObjectLinkToReferences" value="true" />
		<c:set var="viewDomainObjectSystemAttribute" value="true" />
		
		<ui:include src="/WEB-INF/generated/flows/«module.name»/view«for.name»DomainObject.html">
			<ui:param name="«for.name.toFirstLower()»" value="#{«name»Form.domainObject}" />
			«FOREACH viewProperties.typeSelect(ReferenceViewProperty).reject(p | p.base) AS ref-»
			<ui:param name="«ref.name»" value="#{«name»Form.«ref.name»}" />
			«ENDFOREACH-»
		</ui:include>
	</ui:fragment>
	
	<div id="formActionButtons">
		<h:commandButton action="cancel" value="#{msg['view.ok']}" id="ok" />
	</div>
	</h:form>
	«ENDFILE»
«ENDDEFINE»

«DEFINE taskJsf FOR DeleteTask»
	«EXPAND deleteTaskJsfConfirm»
	«EXPAND deleteTaskJsfConfirmInc»
	«EXPAND deleteTaskJsfDone»
«ENDDEFINE»

«DEFINE deleteTaskJsfConfirm FOR DeleteTask»
	«IF gapClass»
		«EXPAND deleteTaskJsfConfirmGap»
	«ELSE»
		«EXPAND deleteTaskJsfConfirmGen»
	«ENDIF»
«ENDDEFINE»

«DEFINE deleteTaskJsfConfirmGap FOR DeleteTask»
	«FILE "WEB-INF/flows/" + module.name + "/" + name + "/confirm.xhtml" TO_WEBROOT-»
«EXPAND deleteTaskJsfConfirmContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE deleteTaskJsfConfirmGen FOR DeleteTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/confirm.xhtml" TO_GEN_WEBROOT-»
«EXPAND deleteTaskJsfConfirmContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE deleteTaskJsfConfirmContent FOR DeleteTask -»
«EXPAND docType-»
<html «EXPAND faceletsXmlns»>
	<body>
		<ui:composition template="/WEB-INF/common/template.xhtml">
			<ui:define name="content">
				<h1><h:outputFormat value="#{msg['delete.header']}">
						<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name»']}" />
					</h:outputFormat>#{" "}
					<c:if test="#{«name»Form.id != null}">
						<h:outputFormat value="#{msg['delete.header.withId']}">
							<f:param value="#{«name»Form.id}" />
						</h:outputFormat>
					</c:if>
				</h1>
				<ui:include src="/WEB-INF/generated/flows/«module.name»/«name»/confirm_include.html" />
			</ui:define>
		</ui:composition>
	</body>
</html>
«ENDDEFINE»

«DEFINE deleteTaskJsfConfirmInc FOR DeleteTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/confirm_include.html" TO_GEN_WEBROOT-»
	<h:form «EXPAND faceletsXmlns»>
	
	<h:messages globalOnly="true" styleClass="errorList" />
	
	<ui:fragment rendered="#{empty facesContext.maximumSeverity}">
		<c:set var="viewDomainObjectLinkToReferences" value="false" />
		<c:set var="viewDomainObjectSystemAttribute" value="true" />
		
		<ui:include src="/WEB-INF/generated/flows/«module.name»/view«for.name»DomainObject.html">
			<ui:param name="«for.name.toFirstLower()»" value="#{«for.name.toFirstLower()»}" />
			«FOREACH viewProperties.typeSelect(ReferenceViewProperty).reject(p | p.base) AS ref-»
			<ui:param name="«ref.name»" value="#{«for.name.toFirstLower()».«ref.name»}" />
			«ENDFOREACH-»
		</ui:include>
	</ui:fragment>
	
	<div id="formActionButtons">
		<h:commandButton action="submit" value="#{msg['delete.yes']}" id="yes" disabled="#{empty facesContext.maximumSeverity ? 'false' : 'true'}" />
		<h:commandButton action="cancel" value="#{msg['delete.no']}" id="no"/>
	</div>
	</h:form>
	«ENDFILE»
«ENDDEFINE»

«DEFINE deleteTaskJsfDone FOR DeleteTask»
	«IF gapClass»
		«EXPAND deleteTaskJsfDoneGap»
	«ELSE»
		«EXPAND deleteTaskJsfDoneGen»
	«ENDIF»
«ENDDEFINE»

«DEFINE deleteTaskJsfDoneGap FOR DeleteTask»
	«FILE "WEB-INF/flows/" + module.name + "/" + name + "/finish.xhtml" TO_WEBROOT-»
«EXPAND deleteTaskJsfDoneContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE deleteTaskJsfDoneGen FOR DeleteTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/finish.xhtml" TO_GEN_WEBROOT-»
«EXPAND deleteTaskJsfDoneContent»
	«ENDFILE»
«ENDDEFINE»

«DEFINE deleteTaskJsfDoneContent FOR DeleteTask -»
«EXPAND docType-»
<html «EXPAND faceletsXmlns»>
	<body>
		<ui:composition template="/WEB-INF/common/template.xhtml">
			<ui:define name="content">
				<h1><h:outputFormat value="#{msg['delete.doneHeader']}">
						<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name»']}" />
						<f:param value="#{«for.name».id}" />
					</h:outputFormat>
				</h1>
			</ui:define>
		</ui:composition>
	</body>
</html>
«ENDDEFINE»

«DEFINE taskJsf FOR ListTask»
	«EXPAND listTaskJsf»
	«EXPAND listTaskJsfInc»
«ENDDEFINE»

«DEFINE listTaskJsf FOR ListTask»
	«IF gapClass»
		«EXPAND listTaskJsfGap»
	«ELSE»
		«EXPAND listTaskJsfGen»
	«ENDIF»
«ENDDEFINE»

«DEFINE listTaskJsfGap FOR ListTask»
	«FILE "WEB-INF/flows/" + module.name + "/" + name + "/list.xhtml" TO_WEBROOT-»
«EXPAND listTaskJsfContent»	
	«ENDFILE»
«ENDDEFINE»

«DEFINE listTaskJsfGen FOR ListTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/list.xhtml" TO_GEN_WEBROOT-»
«EXPAND listTaskJsfContent»	
	«ENDFILE»
«ENDDEFINE»

«DEFINE listTaskJsfContent FOR ListTask -»
«EXPAND docType-»
<html «EXPAND faceletsXmlns»>
	<body>
		<ui:composition template="/WEB-INF/common/template.xhtml">
			<ui:define name="content">
				<h1><h:outputFormat value="#{msg['list.header']}">
						<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name».plural']}" />
					</h:outputFormat></h1>
				<ui:include src="/WEB-INF/generated/flows/«module.name»/«name»/list_include.html" />
			</ui:define>
		</ui:composition>
	</body>
</html>
«ENDDEFINE»

«DEFINE listTaskJsfInc FOR ListTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "/list_include.html" TO_GEN_WEBROOT-»
	<h:form «EXPAND faceletsXmlns»>
	<h:messages globalOnly="true" styleClass="errorList" />
	<t:dataTable value="#{«name»Form.all«for.name.plural()»}" var="«for.name.toFirstLower()»" styleClass="list">
		<t:column styleClass="idCell">
			<f:facet name="header">
				#{msg«resolveModuleName()»['model.DomainObject.«for.name».id']}
			</f:facet>
			<h:commandLink action="view" value="#{«for.name.toFirstLower()».id}">
		    	<f:param name="id" value="#{«for.name.toFirstLower()».id}" />
		    </h:commandLink>
		</t:column>
	«FOREACH viewProperties.reject(p | p.isSystemAttribute()) AS prop-»
		<t:column>
			<f:facet name="header">
				#{msg«resolveModuleName()»['model.DomainObject.«for.name».«prop.getDOPropertyPath()»']}
			</f:facet>
			«EXPAND jsfOutputField(false) FOR prop-»
		</t:column>
	«ENDFOREACH-»
	«IF isUpdateSubTaskAvailable() || isDeleteSubTaskAvailable()-»
		<t:column styleClass="actionCell">
		    <f:facet name="header">
		        <h:outputText value="#{msg['list.actions']}"/>
		    </f:facet>
		    |
		    «IF isUpdateSubTaskAvailable()-»
		    <h:commandLink action="update">
		    	<f:param name="id" value="#{«for.name.toFirstLower()».id}" />
		    	<h:graphicImage value="/img/update.png" alt="Edit" title="#{msg['list.edit']}" style="border:none;"/>
		    </h:commandLink>
		    |
		    «ENDIF-»
		    «IF isDeleteSubTaskAvailable()-»
		    <h:commandLink action="delete">
		    	<f:param name="id" value="#{«for.name.toFirstLower()».id}" />
		    	<h:graphicImage value="/img/delete.png" alt="Delete" title="#{msg['list.delete']}" style="border:none;"/>
		    </h:commandLink>
		    |
		    «ENDIF-»
		</t:column>
	«ENDIF-»
	</t:dataTable>
	«IF searchDOWith.isPagedResult()»
		«EXPAND listTaskPaging»
	«ENDIF»
	</h:form>
	«ENDFILE»
«ENDDEFINE»

«DEFINE listTaskPaging FOR ListTask»
	<c:if test="${not «name»Form.emptyResult}" >
		<div id="paging">
			<br/>	
			<h:outputLabel for="pageNumber" value="#{msg['list.pageLabel']}" />
			<h:inputText id="pageNumber" label="#{msg['list.pageLabel']}" value="#{«name»Form.pageNumber}" />
			<c:if test="${«name»Form.totalPagesCounted}" >
				#{msg['list.maxPagesLabel']} #{«name»Form.totalPages}
			</c:if>
			<br/>
		</div>
	</c:if>
«ENDDEFINE»

«DEFINE jsfInputFields FOR UserTask-»
	«FOREACH viewProperties.reject(p | p.metaType == ReferenceViewProperty || p.metaType == DerivedReferenceViewProperty || p.isSystemAttribute()) AS prop»
		«EXPAND jsfInputField((metaType == CreateTask) || prop.isChangeable()) FOR prop-»
	«ENDFOREACH»
«ENDDEFINE »

«DEFINE jsfInputField(boolean editable) FOR ViewDataProperty-»
	«IF editable-»
		«EXPAND jsfInputField-»
	«ELSE-»
		«EXPAND nonEditableField-»
	«ENDIF-»
«ENDDEFINE »

«DEFINE jsfInputField(boolean editable) FOR EnumViewProperty-»
	«IF editable»
		«EXPAND selectEnumItems-»
	«ELSE»
		«EXPAND nonEditableEnumField-»
	«ENDIF»
«ENDDEFINE »

«DEFINE jsfInputField FOR ViewDataProperty-»
	«LET this.userTask.for.name.toFirstLower() AS for»
	<tr>
		<td class="headingCell">
			<h:outputLabel for="«for»_«name»" value="#{msg«resolveModuleName()»['«this.messageKey»']}" />:
		</td>
		<td>
			<«resolveJSFInputComponent(true)» id="«for»_«name»" label="#{msg«resolveModuleName()»['«this.messageKey»']}" value="#{«this.userTask.name»Form.«name»}" «IF this.isNullable()==false»required="true"«ENDIF»>
			«IF getTypeName() == "String" && !isSystemAttribute()-»
				<f:validateLength maximum="«getDatabaseLength()»" />
			«ENDIF-»
			  «resolveJSFInputConverterTag()»
			</«resolveJSFInputComponent(false)»>
			<h:message for="«for»_«name»" showSummary="true" showDetail="false" styleClass="fieldError" />
		</td>
	</tr>
	«ENDLET»
«ENDDEFINE»

«REM»TODO: Can't be correct, converter? See jsfOutputField «ENDREM»
«DEFINE nonEditableField FOR ViewDataProperty-»
	<tr>
		<td>
			#{msg«resolveModuleName()»['«this.messageKey»']}:
		</td>
		<td>
			#{«this.userTask.name»Form.«name»}
		</td>
	</tr>
«ENDDEFINE »

«DEFINE jsfOutputField(boolean messageFor) FOR ViewDataProperty-»
	«IF getAttributeType() == "boolean" || getAttributeType() == "Boolean"-»
		<h:outputText value="#{msg[«this.userTask.for.name.toFirstLower()».«this.getDOPropertyPath()» ? 'format.booleanTrue' : 'format.booleanFalse']}" «IF messageFor»id="«this.getDOPropertyPath().replaceAll("\\.", "_")»"«ENDIF»/>
	«ELSEIF resolveJSFOutputConverterTag() != '' -»
		<h:outputText value="#{«this.userTask.for.name.toFirstLower()».«this.getDOPropertyPath()»}" «IF messageFor»id="«this.getDOPropertyPath().replaceAll("\\.", "_")»"«ENDIF»>
			«resolveJSFOutputConverterTag()»
		</h:outputText>
	«ELSE-»
		<h:outputText value="#{«this.userTask.for.name.toFirstLower()».«this.getDOPropertyPath()»}" «IF messageFor»id="«this.getDOPropertyPath().replaceAll("\\.", "_")»"«ENDIF»/>
	«ENDIF-»
	«IF messageFor-»
		<h:message for="«this.getDOPropertyPath().replaceAll("\\.", "_")»" showSummary="true" showDetail="false" styleClass="fieldError" />
	«ENDIF-»
«ENDDEFINE»

«DEFINE jsfOutputField FOR EnumViewProperty-»
	«IF isNullable()»<c:if test='#{«this.userTask.for.name.toFirstLower()».«this.getDOPropertyPath()»} != ""'>«ENDIF-»
	<c:set var="«this.getDOPropertyPath().replaceAll("\\.", "")»Name" value="#{'model.DomainObject.«this.reference.to.name».'}#{«this.userTask.for.name.toFirstLower()».«this.getDOPropertyPath()»}" />
	«IF isNullable()»</c:if>«ENDIF-»
	<h:outputText value="#{msg[«this.getDOPropertyPath().replaceAll("\\.", "")»Name]}" id="«this.getDOPropertyPath()»"/>
	<h:message for="«this.getDOPropertyPath()»" showSummary="true" showDetail="false" styleClass="fieldError" />
«ENDDEFINE»

«DEFINE jsfOutputProperty(String property) FOR ViewDataProperty»
	«IF getAttributeType() == "boolean" || getAttributeType() == "Boolean"-»
		<h:outputText value="#{msg[«property» ? 'format.booleanTrue' : 'format.booleanFalse']}" />
	«ELSEIF resolveJSFOutputConverterTag() != '' -»
		<h:outputText value="#{«property»}">
			«resolveJSFOutputConverterTag()»
		</h:outputText>
	«ELSE-»
		#{«property»}
	«ENDIF-»
«ENDDEFINE»

«DEFINE jsfOutputProperty(String property) FOR EnumViewProperty»
	«IF isNullable()»<c:if test='#{«property»} != ""'>«ENDIF-»
	<c:set var="«this.getDOPropertyPath().replaceAll("\\.", "")»Name" value="#{'model.DomainObject.«this.reference.to.name».'}#{«property»}" />
	«IF isNullable()»</c:if>«ENDIF-»
	#{msg[«this.getDOPropertyPath().replaceAll("\\.", "")»Name]}
«ENDDEFINE»

«DEFINE selectEnumItems FOR EnumViewProperty»
	«LET this.userTask.for.name.toFirstLower() AS for»
	<tr>
		<td class="headingCell">
			<h:outputLabel for="«for»_«name»" value="#{msg«resolveModuleName()»['«this.messageKey»']}" />:
		</td>
		<td>
			<t:selectOneMenu id="«for»_«name»" value="#{«this.userTask.name»Form.«name»}" «IF this.isNullable()==false»required="true" «ENDIF»>
				«IF this.isNullable()»<f:selectItem itemLabel="" itemValue="#{null}" />«ENDIF»
				<t:selectItems value="#{«this.userTask.name»Form.«name»Items}" var="«name»Item"
					itemLabel="#{msg[«name»Item.label]}" itemValue="#{«name»Item.value}" />
			</t:selectOneMenu>
			<h:message for="«for»_«name»" showSummary="true" showDetail="false" styleClass="fieldError" />
		</td>
	</tr>
	«ENDLET»
«ENDDEFINE»

«DEFINE nonEditableEnumField FOR EnumViewProperty-»
	<tr>
		<td>
			#{msg«resolveModuleName()»['«this.messageKey»']}:
		</td>
		<td>
			#{«this.userTask.name»Form.«name»}
		</td>
	</tr>
«ENDDEFINE »

«DEFINE viewDomainObjectJsfInc FOR ViewTask»
	«FILE "WEB-INF/generated/flows/" + module.name + "/" + name + "DomainObject.html" TO_GEN_WEBROOT-»
	<div «EXPAND faceletsXmlns»>
	<div id="formInputFields">
		<fieldset>
			<legend>
				<h:outputFormat value="#{msg['view.fieldsLegend']}">
					<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«for.name»']}" />
				</h:outputFormat>
			</legend>
			<table>
			«FOREACH viewProperties.reject(p | p.metaType == ReferenceViewProperty || p.metaType == DerivedReferenceViewProperty) AS prop»
				«EXPAND viewField FOR prop-»
			«ENDFOREACH»
			</table>
		</fieldset>
	</div>
	«IF !viewProperties.typeSelect(ReferenceViewProperty).isEmpty»
	<div id="formReferences">
		<c:choose>
		<c:when test="${viewDomainObjectLinkToReferences == 'true'}">
		«EXPAND viewReference(true) FOREACH viewProperties.typeSelect(ReferenceViewProperty).reject(p | p.base)»
		</c:when>
		<c:otherwise>
		«EXPAND viewReference(false) FOREACH viewProperties.typeSelect(ReferenceViewProperty).reject(p | p.base)»
		</c:otherwise>
		</c:choose>
	</div>
	«ENDIF»
	</div>
	«ENDFILE»
«ENDDEFINE»

«DEFINE viewField FOR ViewDataProperty-»
	«IF isSystemAttribute()»<c:if test="${viewDomainObjectSystemAttribute}" >«ENDIF»
		<tr>
			<td class="headingCell">#{msg«resolveModuleName()»['model.DomainObject.«this.userTask.for.name».«getDOPropertyPath()»']}:</td>
			<td>«EXPAND jsfOutputField(true) FOR this-»</td>
		</tr>
	«IF isSystemAttribute()»</c:if>«ENDIF»
«ENDDEFINE »

«DEFINE viewReference(boolean links) FOR ReferenceViewProperty»
<fieldset>
	«EXPAND formReferenceLegend »
	<table class="references">
	«EXPAND viewReferenceThead »
	<tbody>
	«IF isMany()»
		«LET reference.name.singular() AS item»
		<t:dataList value="#{«reference.name»}" var="«item»Item" rowIndexVar="«item»Index">
		«IF reference.to.abstract-»
		<ui:fragment rendered="#{a:isOfType(«item»Item, '«target.getDomainPackage()».«target.name»')}">
		«ENDIF»
		<tr>
			<td>
				«IF links-»
				<h:commandLink action="«resolveViewTransitionEventName()»" value="#{«item»Item.id}">
			    	<f:param name="index" value="#{«item»Index}" />
			    </h:commandLink>
			    «ELSE-»
			    #{«item»Item.id}
				«ENDIF-»
			</td>
			«FOREACH previewProperties AS prop-»
			<td>
				«IF links-»
				<h:commandLink action="«resolveViewTransitionEventName()»">
			    	<f:param name="index" value="#{«item»Index}" />
			    	«EXPAND jsfOutputProperty(item + "Item." + prop.getDOPropertyPath()) FOR prop»
			    </h:commandLink>
			    «ELSE-»
			    «EXPAND jsfOutputProperty(item + "Item." + prop.getDOPropertyPath()) FOR prop»
				«ENDIF-»
			</td>
			«ENDFOREACH-»
		</tr>
		«IF reference.to.abstract»
		</ui:fragment>
		«ENDIF»
		</t:dataList>
		«ENDLET»
	«ELSE»
		<c:if test="#{«reference.name» != null}">
			«IF reference.to.abstract»
		<c:if test="#{a:isOfType(«reference.name», '«target.getDomainPackage()».«target.name»')}">
			«ENDIF»
		<tr>
			<td>
				«IF links-»
				<h:commandLink action="«resolveViewTransitionEventName()»" value="#{«reference.name».id}">
				   	
				</h:commandLink>
				«ELSE-»
				#{«reference.name».id}
				«ENDIF-»
			</td>
			«FOREACH previewProperties AS prop-»
			<td>
			«IF links-»
			<h:commandLink action="«resolveViewTransitionEventName()»">
				«EXPAND jsfOutputProperty(reference.name + "." + prop.getDOPropertyPath()) FOR prop»
			</h:commandLink>
			«ELSE-»
				«EXPAND jsfOutputProperty(reference.name + "." + prop.getDOPropertyPath()) FOR prop»
			«ENDIF-»
			</td>
			«ENDFOREACH-»
		</tr>
			«IF reference.to.abstract»
		</c:if>
			«ENDIF»
		</c:if>
	«ENDIF»
	</tbody>
	</table>
</fieldset>
«ENDDEFINE»

«DEFINE viewReferenceThead FOR ReferenceViewProperty-»
	<thead>
	<tr>
		<th>#{msg«resolveModuleName()»['model.DomainObject.«target.name».id']}</th>
		«FOREACH previewProperties AS prop-»
		<th>#{msg«resolveModuleName()»['«prop.messageKey»']}</th>
		«ENDFOREACH-»
	</tr>
	</thead>
«ENDDEFINE»

«DEFINE errorJsf FOR GuiApplication»
	«FILE "error.xhtml" TO_WEBROOT»
	«EXPAND JSFCrudGuiFlowJsf::docType-»
	<html «EXPAND faceletsXmlns»>
	<body>
		<ui:composition template="/WEB-INF/common/template.xhtml">
			<ui:define name="content">
				<h1>#{msg['error.header']}</h1>
				<p><span class="errors">
					<c:if test="#{exception == null}">
						<h:outputFormat value="#{msg['«systemExceptionClass()»']}"
							escape="false">
							 <f:param value="page.error" />
							 <f:param value="" />
						</h:outputFormat>
					</c:if>
					<c:if test="#{exception != null}">
						<h:outputFormat value="#{msg['«systemExceptionClass()»']}"
							escape="false">
							 <f:param value="${a:resolveSystemExceptionErrorCode(exception)}" />
							 <f:param value="${a:resolveSystemExceptionMessage(exception)}" />
						</h:outputFormat>
					</c:if>
				</span></p>
			</ui:define>
		</ui:composition>
	</body>
	</html>
	«ENDFILE»
«ENDDEFINE»

«REM»
«DEFINE formReferenceAbstractHiddenField FOR ReferenceViewProperty»
	«IF reference.to.abstract && !isMany() -»
		<form:hidden path="selected«name.singular().toFirstUpper()»" />
	«ENDIF»
«ENDDEFINE»
«ENDREM»

«DEFINE formReference(String formName) FOR ReferenceViewProperty»
<fieldset>
	«EXPAND formReferenceLegend»
	«EXPAND selectNewOrExistingButtons("create", formName)»
	<table class="references">
	<thead>
		<tr>
			<th>#{msg«resolveModuleName()»['model.DomainObject.«target.name».id']}</th>
			«FOREACH previewProperties AS prop-»
			<th>#{msg«resolveModuleName()»['«prop.messageKey»']}</th>
			«ENDFOREACH-»
			<th></th>
		</tr>
	</thead>
	<tbody>
	«IF isMany()-»
		
		«LET reference.name.singular() AS item»
		<t:dataList value="#{«formName».«reference.name»}" var="«item»Item" rowIndexVar="«item»Index">
		«IF reference.to.abstract-»
		<ui:fragment rendered="#{a:isOfType(«item»Item, '«target.getDomainPackage()».«target.name»')}">
		«ENDIF»
		<tr>
		
		<td>	
			#{«reference.name.singular()»Item.id}
		</td>
		«FOREACH previewProperties AS prop-»
		<td>
			«EXPAND jsfOutputProperty(reference.name.singular() + "Item." + prop.getDOPropertyPath()) FOR prop»
		</td>
		«ENDFOREACH-»
		<td class="actionCell">
			|
			<h:commandLink action="«resolveViewTransitionEventName()»" value="#{msg['createUpdate.subflowView']}">
				<f:param name="index" value="#{«item»Index}" />
			</h:commandLink>
			|
			«IF isUpdateSubTaskAvailable() -»
			<h:commandLink action="«resolveUpdateTransitionEventName()»" value="#{msg['createUpdate.subflowUpdate']}">
				<f:param name="index" value="#{«item»Index}" />
			</h:commandLink>
			|
			«ENDIF»
			<h:commandLink action="«resolveRemoveTransitionEventName()»" value="#{msg['createUpdate.subflowDelete']}">
				<f:param name="index" value="#{«item»Index}" />
			</h:commandLink>
			|
		</td>
		</tr>
		«IF reference.to.abstract»
		</ui:fragment>
		«ENDIF»
		</t:dataList>
		«ENDLET»
		
	«ELSE-»
		
		«IF reference.to.abstract»
		<c:if test="#{a:isOfType(«formName».«reference.name», '«target.getDomainPackage()».«target.name»')}">
		«ENDIF»
		
		<c:if test="#{«formName».«reference.name» != null}">
		<tr>
			<td>#{«formName».«reference.name».id}</td>
			«FOREACH previewProperties AS prop-»
			<td>
			«EXPAND jsfOutputProperty(formName + "." + reference.name + "." + prop.getDOPropertyPath()) FOR prop»
			</td>
			«ENDFOREACH-»
			<td class="actionCell">
				|
				<h:commandLink action="«resolveViewTransitionEventName()»" value="#{msg['createUpdate.subflowView']}" />
				|
				<h:commandLink action="«resolveRemoveTransitionEventName()»" value="#{msg['createUpdate.subflowDelete']}"/>
				|
			</td>
		</tr>
		</c:if>
		
		«IF reference.to.abstract»
		</c:if>
		«ENDIF»
		
	«ENDIF-»
	</tbody>
	</table>
</fieldset>
«ENDDEFINE»

«DEFINE formReferenceLegend FOR ReferenceViewProperty »
	<legend>
		<h:outputFormat value="#{msg«resolveModuleName(this.userTask)»['model.DomainObject.«reference.from.name».«reference.name»']}">
			<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«target.name»']}" />
		</h:outputFormat>
	</legend>
«ENDDEFINE»

«DEFINE selectNewOrExistingButtons(String eventPrefix, String formName) FOR ReferenceViewProperty»
<c:if test="«EXPAND selectNewOrExistingButtonsRuntimeCondition(eventPrefix, formName)»">
  «LET !isMany() && !reference.changeable AS notChangeable »
  «IF notChangeable »
  <c:choose>
    <c:when test="#{«formName».«reference.name» == null}">
  «ENDIF»
	«IF isCreateSubTaskAvailable() -»
	<p style="text-align: right;">
		<h:commandLink action="«resolveCreateTransitionEventName()»">
			<h:outputFormat value="#{msg['createUpdate.subflow«eventPrefix.toFirstUpper()»']}">
				<f:param value="#{msg«resolveModuleName()»['model.DomainObject.«target.name»']}" />
			</h:outputFormat>		
		</h:commandLink>
	</p>		
	«ENDIF -»
	«IF isAddSubTaskAvailable() -»
	<span class="headerButtonContainer">
		#{msg['createUpdate.selectLabel']}
		«EXPAND selectExistingItems(formName)»
		«IF isMany() -»
		<h:commandButton value="#{msg['createUpdate.addExisting']}" id="«resolveAddExistingChildEventName()»" action="«resolveAddExistingChildEventName()»" />		
		«ELSE»
		<h:commandButton value="#{msg['createUpdate.setExisting']}" id="«resolveAddExistingChildEventName()»" action="«resolveAddExistingChildEventName()»" 
			«IF reference.to.abstract»  onclick="this.form.selected«reference.name.singular().toFirstUpper()».value=this.form.«resolveSelectedExistingChildIdAttributeName()».options[this.form.«resolveSelectedExistingChildIdAttributeName()».selectedIndex].value" «ENDIF»/>		
		«ENDIF»
	</span>
	«ENDIF»
  «IF notChangeable »
  </c:when>
    <c:otherwise>
	«REM»<form:hidden path="«resolveSelectedExistingChildIdAttributeName()»"/>«ENDREM»
    </c:otherwise>
  </c:choose>
  «ENDIF»
  «ENDLET»
</c:if>
«ENDDEFINE»

«DEFINE selectNewOrExistingButtonsRuntimeCondition(String eventPrefix, String formName) FOR ReferenceViewProperty -»
${flowExecutionContext.activeSession.root or 
				(flowExecutionContext.activeSession.parent.definition.id != '«userTask.module.name»/create«target.name»' and
				 flowExecutionContext.activeSession.parent.definition.id != '«userTask.module.name»/update«target.name»')
}«ENDDEFINE»


«DEFINE selectExistingItems(String formName) FOR ReferenceViewProperty»
		<t:selectOneMenu id="ref_«resolveSelectedExistingChildIdAttributeName()»" value="#{«formName».«resolveSelectedExistingChildIdAttributeName()»}">
  			<f:selectItem itemLabel="#{msg['createUpdate.unselectedOptionWithoutParam']} #{msg«resolveModuleName()»['model.DomainObject.«target.name»']}" itemValue="" />
  			<f:selectItems value="#{«formName».«target.name.toFirstLower()»Items}" />
  		</t:selectOneMenu>
  		<h:message for="ref_«resolveSelectedExistingChildIdAttributeName()»" showSummary="true" showDetail="false" styleClass="fieldError" />
«ENDDEFINE»

«DEFINE formActionButtons FOR UserTask»
<div id="formActionButtons">
	«IF metaType == UpdateTask-»
	<h:commandButton action="submit" value="#{msg['createUpdate.next']}" id="next" disabled="#{!«name»Form.nextEnabled}" />
	«ELSE-»
	<h:commandButton action="submit" value="#{msg['createUpdate.next']}" id="next" />
	«ENDIF-»
	<sf:commandButton action="cancel" value="#{msg['createUpdate.cancel']}" id="cancel"/>
</div>
«ENDDEFINE»
