«REM»
 * Copyright 2007 The Fornax Project Team, including the original
 * author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
«ENDREM»

«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::dbhelper»
«EXTENSION extensions::properties»

«DEFINE domainObjectSubclassAnnotations FOR DataTransferObject»
	«IF isXmlRootToBeGenerated()-»
		«EXPAND xmlRootAnnotation»
	«ENDIF-»
	«IF isXstreamAnnotationToBeGenerated()-»
		«EXPAND xstreamAliasAnnotation»
	«ENDIF-»
«ENDDEFINE»

«DEFINE domainObjectSubclassAnnotations FOR Trait»
«ENDDEFINE»

«DEFINE domainObjectSubclassAnnotations FOR DomainObject»
	«IF isXmlRootToBeGenerated()-»
		«EXPAND xmlRootAnnotation»
	«ENDIF-»
	«IF isXstreamAnnotationToBeGenerated()-»
		«EXPAND xstreamAliasAnnotation»
	«ENDIF-»
«ENDDEFINE»

«REM»We need to format this carefully because it is included in JavaDoc, which is not beautified.«ENDREM»
«DEFINE domainObjectAnnotations FOR DomainObject -»
	«IF isEmbeddable() -»
@javax.persistence.Embeddable
	«ENDIF-»
	«IF hasOwnDatabaseRepresentation()-»
@javax.persistence.Entity
		«IF !isInheritanceTypeSingleTable(getRootExtends()) || this == getRootExtends()-»
@javax.persistence.Table(name = "«getDatabaseName()»"«
			IF hasClassLevelUniqueConstraints() »«EXPAND uniqueConstraints»«ENDIF»)
		«ENDIF-»
		«EXPAND domainObjectInheritanceAnnotations-»
		«IF isJpaProviderHibernate() && cache-»
@org.hibernate.annotations.Cache(usage = «getHibernateCacheStrategy()»)
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE domainObjectBaseAnnotations FOR DataTransferObject»
	«IF !gapClass && isXmlRootToBeGenerated()-»
		«EXPAND xmlRootAnnotation»
	«ENDIF-»
	«IF !gapClass && isXstreamAnnotationToBeGenerated()-»
		«EXPAND xstreamAliasAnnotation»
	«ENDIF-»
«ENDDEFINE»

«DEFINE domainObjectBaseAnnotations FOR DomainObject -»
«IF isJpaAnnotationToBeGenerated() && hasOwnDatabaseRepresentation() && (getValidationEntityListener() != null || getAuditEntityListener() != null)»
	«EXPAND jpaEntityListenersAnnotation FOR this»
«ENDIF»
«IF isValidationAnnotationToBeGenerated()»
	«getValidationAnnotations()»
«ENDIF»
«IF !gapClass && isXmlRootToBeGenerated()-»
	«EXPAND xmlRootAnnotation»
«ENDIF-»
«IF !gapClass && isXstreamAnnotationToBeGenerated()-»
	«EXPAND xstreamAliasAnnotation»
«ENDIF-»
«ENDDEFINE»

«DEFINE xmlRootAnnotation FOR DomainObject -»
@javax.xml.bind.annotation.XmlRootElement(name="«getXmlRootElementName()»")
«ENDDEFINE»

«DEFINE xstreamAliasAnnotation FOR DomainObject -»
@com.thoughtworks.xstream.annotations.XStreamAlias("«getXStreamAliasName()»")
«ENDDEFINE»

«REM»set EntityListerners for Validation and Audit«ENDREM»
«REM»TODO: optimize this quick solution«ENDREM»
«DEFINE jpaEntityListenersAnnotation FOR DomainObject -»
@javax.persistence.EntityListeners({
	«formatAnnotationParameters({
		getValidationEntityListener() != null, "", getValidationEntityListener() + ".class",
		getAuditEntityListener() != null, "", getAuditEntityListener() + ".class"
	})»})
«ENDDEFINE»

«REM»We need to format this carefully beccause it is included in JavaDoc, which is not beautified.«ENDREM»
«DEFINE domainObjectInheritanceAnnotations FOR DomainObject-»
	«IF hasSubClass()-»
		«IF isInheritanceTypeSingleTable()-»
@javax.persistence.Inheritance(strategy=javax.persistence.InheritanceType.SINGLE_TABLE)
«formatAnnotationParameters("@javax.persistence.DiscriminatorColumn", {
	inheritance.discriminatorColumnName != null, "name", '"' + inheritance.discriminatorColumnName + '"',
	getDiscriminatorType() != "javax.persistence.DiscriminatorType.STRING", "discriminatorType", getDiscriminatorType(),
	inheritance.discriminatorColumnLength != null, "length", inheritance.discriminatorColumnLength,
	isJpaAnnotationColumnDefinitionToBeGenerated(), "columnDefinition", '"' + inheritance.getDiscriminatorColumnDatabaseType() + '"'
    }) -»
			«IF !abstract && discriminatorColumnValue != null-»
@javax.persistence.DiscriminatorValue("«discriminatorColumnValue»")
			«ENDIF-»
		«ELSEIF isInheritanceTypeJoined()-»
@javax.persistence.Inheritance(strategy=javax.persistence.InheritanceType.JOINED)
«REM»EclipseLink needs discriminator«ENDREM»
«IF isJpaProviderEclipseLink()»
@javax.persistence.DiscriminatorColumn(name="DTYPE", discriminatorType=DiscriminatorType.STRING, length=21)
	«IF !abstract»
@javax.persistence.DiscriminatorValue("«name»")
	«ENDIF»
«ENDIF»
		«ENDIF-»
	«ENDIF-»
	«IF hasSuperClass()-»
		«IF isInheritanceTypeSingleTable(getRootExtends())-»
			«IF discriminatorColumnValue != null-»
@javax.persistence.DiscriminatorValue("«discriminatorColumnValue»")
			«ENDIF-»
		«ELSEIF isInheritanceTypeJoined(getRootExtends())-»
@javax.persistence.PrimaryKeyJoinColumn(name="«extends.getExtendsForeignKeyName()»")
			«IF isJpaProviderHibernate()»
@org.hibernate.annotations.ForeignKey(
    name = "FK_«truncateLongDatabaseName(getDatabaseName(), extends.getDatabaseName())»")
«REM»EclipseLink needs discriminator«ENDREM»
			«ELSEIF isJpaProviderEclipseLink()»
@javax.persistence.DiscriminatorValue("«name»")
			«ENDIF-»
		«ENDIF-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE uniqueConstraints FOR DomainObject -»
	, uniqueConstraints = @javax.persistence.UniqueConstraint(columnNames={«
		EXPAND uniqueColumns("") FOREACH getAllNaturalKeys() SEPARATOR ", " »})«
ENDDEFINE»

«DEFINE uniqueColumns(String columnPrefix) FOR NamedElement
»"«getDatabaseName(columnPrefix, this)»"«
ENDDEFINE»

«DEFINE uniqueColumns(String columnPrefix) FOR Reference »«
	IF isBasicTypeReference() »«
		EXPAND uniqueColumns(getDatabaseName(columnPrefix, this) + "_") FOREACH to.getAllNaturalKeys() SEPARATOR ", " -»«
	ELSE»"«getDatabaseName(columnPrefix, this)»"«
	ENDIF »«
ENDDEFINE»







