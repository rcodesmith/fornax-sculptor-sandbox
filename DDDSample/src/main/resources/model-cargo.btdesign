import "classpath:/model-carrier.btdesign"
import "classpath:/model-routing.btdesign"
import "classpath:/model-location.btdesign"

ApplicationPart CargoPart {

    Module cargo {
        "A Cargo. This is the central class in the domain model,
        and it is the root of the Cargo-Itinerary-Leg-DeliveryHistory aggregate.
		<p>
        A cargo is identified by a unique tracking id, and it always has an origin
        and a destination. The life cycle of a cargo begins with the booking procedure,
        when the tracking id is assigned. During a (short) period of time, between booking
        and initial routing, the cargo has no itinerary.
		</p><p>
        The booking clerk requests a list of possible routes, matching a route specification,
        and assigns the cargo to one route. An itinerary listing the legs of the route
        is attached to the cargo.
		</p><p>
        A cargo can be re-routed during transport, on demand of the customer, in which case
        the destination is changed and a new route is requested. The old itinerary,
        being a value object, is discarded and a new one is attached.
		</p><p>
        It may also happen that a cargo is accidentally misrouted, which should notify the proper
        personnel and also trigger a re-routing procedure.
		<p>
        The life cycle of a cargo ends when the cargo is claimed by the customer.
		</p><p>
        The cargo aggregate, and the entre domain model, is built to solve the problem
        of booking and tracking cargo. All important business rules for determining whether
        or not a cargo is misrouted, what the current status of the cargo is (on board carrier,
        in port etc), are captured in this aggregate.
		</p>"
        Entity Cargo {
            - @TrackingId trackingId key
            - @Location origin required fetch="join"
            - @Location destination required fetch="join"
            - @Itinerary itinerary nullable inverse opposite cargo
            - Set<@HandlingEvent> events cascade="none" opposite cargo

            Repository CargoRepository {
                 @Cargo find(@TrackingId trackingId) throws CargoNotFoundException => FindCargoAccessObject;
                 @Cargo find(@TrackingId trackingId, boolean loadDeliveryHistory) throws CargoNotFoundException;
                 protected populateAssociations;
                 findAll;
                 save;
                 @TrackingId nextTrackingId;
                 detachItineray(@Cargo cargo);
                 "Delete orphaned itineraries - conceptually the responsibility
                 of the Cargo aggregate"
                 protected deleteOrphanItinerary => AccessObject;
                 protected findById;
            }
        }

        "Uniquely identifies a particular cargo. Automatically generated by the application."
        BasicType TrackingId {
            nogap
            String identifier key databaseColumn=""
        }

        ValueObject Itinerary {
        	belongsTo Cargo
            not optimisticLocking
            not immutable
            - @Cargo cargo nullable opposite itinerary
            - List<@Leg> legs inverse
        }

        "An itinerary consists of one or more legs."
        ValueObject Leg {
        	belongsTo Cargo 
            - @CarrierMovement carrierMovement fetch="join";
            - @Location from databaseColumn="FRM" fetch="join";
            - @Location ^to databaseColumn="T" fetch="join";
        }

        ValueObject DeliveryHistory {
            not persistent
            - Set<@HandlingEvent> events
        }

        "Cargo booking service."
        Service BookingService {
            inject @CargoRepository

            "Registers a new cargo in the tracking system, not yet routed."
            @TrackingId bookNewCargo(@UnLocode origin, @UnLocode destination)
                throws LocationNotFoundException;

            "Requests a list of itineraries describing possible routes for this cargo."
            List<@Itinerary> requestPossibleRoutesForCargo(@TrackingId trackingId)
                throws CargoNotFoundException,
                    LocationNotFoundException;

            "Assigns a cargo to route."
            void assignCargoToRoute(@TrackingId trackingId, @Itinerary itinerary) throws CargoNotFoundException;

            protected findLocation => LocationService.find;
            protected fetchRoutes => RoutingService.fetchRoutesForSpecification;
        }

        ValueObject RouteSpecification {
            not persistent
            - @Location origin
            - @Location destination
            DateTime arrivalDeadline
        }

        "Represents the different status codes for a cargo."
        enum StatusCode {
            NOT_RECEIVED, IN_PORT, ONBOARD_CARRIER, CLAIMED, UNKNOWN
        }

        Service RoutingService {
            "A list of itineraries that satisfy the specification. May be an empty list if no route is found."
            List<@Itinerary> fetchRoutesForSpecification(@RouteSpecification routeSpecification)
                throws LocationNotFoundException;
            protected findShortestPath => GraphTraversalService.findShortestPath;
            protected findLocation => LocationService.find;
            protected findCarrierMovement => CarrierService.find;
            protected saveCarrierMovement => CarrierService.save;
        }

        Service TrackingService {
            inject @CargoRepository

            "Track a particular cargo."
            @Cargo track(@TrackingId trackingId) throws CargoNotFoundException;

            "Inspect cargo and send relevant notifications to interested parties,
            for example if a cargo has been misdirected, or unloaded
            at the final destination."
            void inspectCargo(@TrackingId trackingId) throws CargoNotFoundException;
        }

        ValueObject HandlingEvent {
            - @Type type
            - @CarrierMovement carrierMovement nullable fetch="join"
            - @Location location  fetch="join"
            DateTime completionTime
            DateTime registrationTime
            - @Cargo cargo  fetch="join" opposite events

            Repository HandlingEventRepository {
                save;
                "All handling events for this cargo, ordered by completion time."
                List<@HandlingEvent> findEventsForCargo(@TrackingId trackingId);
                protected findByQuery;
            }
        }

        enum Type {
            boolean carrierMovementRequired

            LOAD("true"),
            UNLOAD("true"),
            RECEIVE("false"),
            CLAIM("false"),
            CUSTOMS("false")
        }

        Service HandlingEventService {
            inject @CargoRepository
            inject @HandlingEventRepository

            void register(DateTime completionTime, @TrackingId trackingId,
                @CarrierMovementId carrierMovementId, @UnLocode unlocode, @Type type)
                throws CargoNotFoundException,
                    org.sculptor.dddsample.carrier.exception.CarrierMovementNotFoundException,
                    LocationNotFoundException;
            protected findCarrierMovement => CarrierService.find;
            protected findLocation => LocationService.find;
        }

    }

}