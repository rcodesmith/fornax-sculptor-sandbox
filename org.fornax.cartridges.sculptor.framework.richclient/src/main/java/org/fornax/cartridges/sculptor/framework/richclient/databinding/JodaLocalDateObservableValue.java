/* * Copyright 2009 The Fornax Project Team, including the original  * author or authors. *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.fornax.cartridges.sculptor.framework.richclient.databinding;import org.eclipse.core.databinding.observable.Diffs;import org.eclipse.core.databinding.observable.Realm;import org.eclipse.core.databinding.observable.value.AbstractObservableValue;import org.eclipse.jface.databinding.swt.ISWTObservableValue;import org.eclipse.jface.util.Util;import org.eclipse.swt.SWT;import org.eclipse.swt.widgets.DateTime;import org.eclipse.swt.widgets.Event;import org.eclipse.swt.widgets.Listener;import org.eclipse.swt.widgets.Widget;import org.joda.time.LocalDate;public class JodaLocalDateObservableValue extends AbstractObservableValue implements ISWTObservableValue {    private DateTime dateTime;    private LocalDate currentValue;    private Listener listener;    private boolean updating = false;    public JodaLocalDateObservableValue(final DateTime dateTime) {        super(Realm.getDefault());        this.dateTime = dateTime;        currentValue = getLocalDateSelection();        listener = new Listener() {            public void handleEvent(Event event) {                if (updating)                    return;                notifyIfChanged(currentValue, currentValue = getLocalDateSelection());            }        };        dateTime.addListener(SWT.Selection, listener);    }    @Override    protected Object doGetValue() {        return currentValue;    }    @Override    protected void doSetValue(Object value) {        updating = true;        try {            setLocalDateSelection((LocalDate) value);        } finally {            updating = false;        }        notifyIfChanged(currentValue, currentValue = getLocalDateSelection());    }    private void notifyIfChanged(Object oldValue, Object newValue) {        if (!Util.equals(oldValue, newValue)) {            fireValueChange(Diffs.createValueDiff(oldValue, newValue));        }    }    public Object getValueType() {        return LocalDate.class;    }    private LocalDate getLocalDateSelection() {        return new LocalDate(dateTime.getYear(), dateTime.getMonth() + 1, dateTime.getDay());    }    private void setLocalDateSelection(LocalDate date) {        if (date == null) {            // TODO how to handle null            date = new LocalDate();        }        dateTime.setYear(date.getYear());        dateTime.setMonth(date.getMonthOfYear() - 1);        dateTime.setDay(date.getDayOfMonth());    }        public Widget getWidget() {        return dateTime;    }}